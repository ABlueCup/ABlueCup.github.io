<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>积步堂</title>
  
  <subtitle>不积跬步，无以致千里；不积小流，无以成江海。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://abluecup.github.io/"/>
  <updated>2020-05-11T02:33:38.444Z</updated>
  <id>https://abluecup.github.io/</id>
  
  <author>
    <name>卡而</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数组方法</title>
    <link href="https://abluecup.github.io/2020/05/09/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>https://abluecup.github.io/2020/05/09/数组方法/</id>
    <published>2020-05-09T09:28:06.000Z</published>
    <updated>2020-05-11T02:33:38.444Z</updated>
    
    <content type="html"><![CDATA[<p>本篇补充了一些数组方法的介绍<br><a id="more"></a></p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>作用：生成一个新的数组<br>参数：currentValue[,index[,array]]<br>返回值：新的数组<br>原有数组不改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var new_array = arr.map(function callback(currentValue[, index[, array]]) &#123;</span><br><span class="line"> // Return element for new_array </span><br><span class="line">&#125;[, thisArg])</span><br><span class="line"></span><br><span class="line">let _arr = arr.map(function(x,y,z)&#123;</span><br><span class="line">    return x = x * 2;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>作用：遍历数组，当数组中的当前值满足筛选条件的时候，返回给新数组<br>参数：element[,index[,array]]<br>返回值：新的数组<br>原有数组不改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</span><br><span class="line">let _arr = arr.filter((ele, index, array) =&gt; &#123;</span><br><span class="line">            return ele &gt; 2 //返回的必须是布尔值，true时，当前值返回给新数组</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>作用：遍历数组，当数组中的当前值满足筛选条件的时候，返回当前值<br>参数：element[,index[,array]]<br>返回值：满足条件的项<br>原有数组不改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const array1 = [5, 12, 8, 130, 44];</span><br><span class="line">const found = array1.find(element =&gt; element &gt; 10);</span><br><span class="line">console.log(found);</span><br><span class="line">// expected output: 12</span><br></pre></td></tr></table></figure></p><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p>作用：测试一个数组内的所有元素是否都能通过某个指定函数的测试。<br>参数：element[,index[,array]]<br>返回值：布尔值<br>原有数组不改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.every(callback[, thisArg])</span><br><span class="line"></span><br><span class="line">const isBelowThreshold = (currentValue) =&gt; currentValue &lt; 40;</span><br><span class="line">const array1 = [1, 30, 39, 29, 10, 41];</span><br><span class="line">console.log(array1.every(isBelowThreshold));</span><br><span class="line">// expected output: false</span><br></pre></td></tr></table></figure></p><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p>作用：测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。。<br>参数：element[,index[,array]]<br>返回值：Boolean类型的值<br>原有数组不改变<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.some(callback(element[, index[, array]])[, thisArg])</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">        <span class="keyword">let</span> _b = arr.some(<span class="function">(<span class="params">ele,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ele &gt; <span class="number">3</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(_b); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>作用：对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。<br>参数：element[,index[,array]]<br>返回值：单个返回值<br>原有数组不改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br><span class="line">// accumulator 累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue</span><br><span class="line">// currentValue 数组中正在处理的元素。</span><br><span class="line">// initialValue 设置累积值的初始值</span><br><span class="line"></span><br><span class="line">let arr = [1, 2, 3, 4];</span><br><span class="line">        let total = arr.reduce((result, curval)=&gt;&#123;</span><br><span class="line">            result += curval;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;,10);</span><br><span class="line">console.log(total); //20</span><br></pre></td></tr></table></figure></p><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>作用：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。<br>参数：element[,index[,array]]<br>返回值：新数组<br>原有数组改变<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr.fill(value[, start[, end]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">        arr.fill(<span class="string">'值'</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, "值", 4]</span></span><br></pre></td></tr></table></figure></p><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>作用：数组是否包含某个值<br>参数：特定值<br>返回值：布尔值<br>原有数组不改变</p><h3 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h3><p>作用：是否是数组<br>参数：某个值<br>返回值：布尔值<br>原有数组不改变</p><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of();"></a>Array.of();</h3><p>作用：方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。<br>参数：某个或者某些值<br>返回值：新数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Array.of(7);       // [7] </span><br><span class="line">Array.of(1, 2, 3); // [1, 2, 3]</span><br><span class="line"></span><br><span class="line">Array(7) //// [ , , , , , , ] 创建长度为7的数组，元素为空，而不是undefined</span><br><span class="line">Array(1, 2, 3);    // [1, 2, 3]</span><br></pre></td></tr></table></figure></p><h3 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h3><p>IE不支持<br>作用：会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。<br>参数：某个值<br>返回值：新的数组<br>原有数组不改变<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = arr.flat([depth])</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line">arr1.flat(); </span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line">arr2.flat();</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line">arr3.flat(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 Infinity，可展开任意深度的嵌套数组</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]];</span><br><span class="line">arr4.flat(<span class="literal">Infinity</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line">flat会移除空元素</span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr4.flat();</span><br><span class="line"><span class="comment">// [1, 2, 4, 5]</span></span><br><span class="line"></span><br><span class="line">[].contact(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// [1,2],</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇补充了一些数组方法的介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NODE</title>
    <link href="https://abluecup.github.io/2020/04/26/NODE/"/>
    <id>https://abluecup.github.io/2020/04/26/NODE/</id>
    <published>2020-04-26T06:49:21.000Z</published>
    <updated>2020-05-14T09:16:07.121Z</updated>
    
    <content type="html"><![CDATA[<p>本片是对node基础概念的介绍<br><a id="more"></a></p><h2 id="NODE介绍"><a href="#NODE介绍" class="headerlink" title="NODE介绍"></a>NODE介绍</h2><p>1.什么时node?<br>    基于V8引擎(谷歌浏览器的引擎)渲染JS的工具或者环境<br>    -&gt;安装NODE<br>    -&gt;把JS代码放到NODE环境中执行</p><p>2.安装NODE<br>NODE安装完成后，<br>-&gt; 当前电脑上自动安装了NPM(Node Package Manager：一个JS模块管理的工具)，基于NPM，可以安装下载JS模块(所有封装好可以供其他人调取使用的都可以称之为模块或者包)。<br>-&gt; 它会生成一个node执行命令(可以在DOS窗口或者终端命令中执行)：node xxx.js</p><p>3.如何在NODE中渲染和解析JS</p><ul><li>REPL(READ - EVALUATE - PRINT - LOOP， 输入-求值-输出-循环)</li><li>直接基于NODE来执行JS文件 </li></ul><p>4.之所以把NODE作为后台语言，是因为：<br>1）node可以安装在服务器上<br>2）我们可以把编写的JS代码放到服务器上，通过NODE来执行（我们可以使用JS来操作服务器，即使用JS来实现服务器端的一些功能操作。说NODE是后台语言，其实想表达的是JS是后台语言。所以JS是全栈编程语言）</p><p>5.NODE作后台的优势和特点<br>    传统后台语言： JAVA/PHP/PYTHON/GO/C#(.NET)/</p><ul><li>单线程的</li><li>基于V8引擎渲染：快</li><li>异步无阻塞的IO操作( IO: INPUT OUTPUT, 对文件的读写)</li><li>event-driven事件驱动，类似于发布订阅或者回调函数</li></ul><p>6.在vscode中开启node内置方法的代码提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typings</span><br><span class="line">在开发的项目中输入typings init, 当前目录下会出现typings.json的文件</span><br><span class="line"></span><br><span class="line">然后安装js插件的提示文件：：</span><br><span class="line"></span><br><span class="line">typings install dt~node --global--save 这个如果不行，可以使用 typings install @types/node --global --save</span><br></pre></td></tr></table></figure></p><h2 id="NPM的应用"><a href="#NPM的应用" class="headerlink" title="NPM的应用"></a>NPM的应用</h2><p>目前工程化开发/自动化开发（不一定是写后台），都是基于NODE环境，基于NPM管理模块，基于WEBPACK实现模块之间的依赖打包，部署上线。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm的常规命令：</span><br><span class="line">npm install xxx 把模块安装在当前目录下</span><br><span class="line">npm install xxx -global 把模块安装在全局目录下</span><br><span class="line">npm uninstall xxx</span><br><span class="line">npm uninstall xxx -g</span><br><span class="line">npm install xxx@xxx 安装指定版本号的模块</span><br><span class="line">npm view xxx&gt;xxx.version.txt 查看模块的版本号</span><br></pre></td></tr></table></figure></p><p>NPM的默认安装源 <a href="https://www.npmjs.com" target="_blank" rel="noopener">https://www.npmjs.com</a>, 在国内安装下载速度较慢，想要下载速度快些，我们可以做如下处理：<br>1.切换到淘宝镜像上<br>    安装CNPM，后期都是基于cnpm安装管理<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm -g</span><br><span class="line">cnpm install zepto</span><br></pre></td></tr></table></figure></p><pre><code>安装nrm切源工具，基于nrm把源切换到淘宝源上<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install nrm -g</span><br><span class="line">nrm ls 查看当前源</span><br><span class="line">nrm use xxx 使用某个源</span><br><span class="line">这样</span><br><span class="line">处理完成后，后期模块的管理依然基于npm即可</span><br></pre></td></tr></table></figure></code></pre><p>2，基于YARN安装：它也是模块管理工具，类似于NPM，但是安装管理的速度比NPM快好多<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install yarn -g</span><br><span class="line">yarn add xxx</span><br><span class="line">yarn remove xxxx</span><br><span class="line">使用yarn只能把模块安装在当前目录下，不能安装到全局环境下</span><br></pre></td></tr></table></figure></p><p>3，bower也是类似于npm的包管理器，只不过它是从github上下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install bower -g</span><br><span class="line">bower install xxx</span><br></pre></td></tr></table></figure></p><p>1.在本地项目中基于NPM/YARN安装第三方模块<br>第一步：在本地项目中创建一个package.json的文件<br>        作用：把当前项目中所有依赖的第三方模块信息(包含：模块名称以及版本号等信息)都记录下来，可以在这里配置一些可执行的命令脚本等；<br>        基于YARN安装会默认生成一个“配置清单”，只是信息没有手动创建的全面。<br>        npm init -y 或者 yarn init -y<br>        创建配置清单的时候，项目目录中不要出现中文和特殊符号，这样有可能识别不了。<br>第二步：安装<br>        开发依赖：只有在项目开发阶段以来的第三方模块 less webpack…<br>        生产依赖：项目部署实施的时候，也需要以来的第三方模块 jquery zepto…<br>        [npm]<br>            npm install xxx –save<br>                            –save-dev 保存到开发依赖中<br>        [yarn]<br>            yarn add xxx 默认就是保存到生产依赖中<br>                        –dev / -D  保存到开发依赖中<br>第三步：部署的时候跑环境<br>        不需要自己一个个的安装，只需要执行 npm install 或者 yarn install 即可，npm会自己先检测目录中是否有package.json文件，如果有的话，会按照文件中的配置清单依次安装。</p><p>== 开发一个项目，我们生成一个配置清单package.json, 当我们安装第三方模块使用的时候，把安装的模块信息记录到配置清单中，这样以后不管是团队协作开发还是项目部署上线，我们都没有必要把modules上传给别人，只需要把配置清单传递给其他人即可。其他人拿到配置清单，按照清单中的依赖项及版本号重新安装即可(重新安装：就叫“跑环境”)<br>package.json<br>{<br>  “name”: “node”,   模块名称<br>  “version”: “1.0.0”, 版本号<br>  “description”: “”,  描述<br>  “main”: “index.js”, 当前模块的主入口文件<br>  “scripts”: { //可执行脚本<br>    “test”: “echo \”Error: no test specified\” &amp;&amp; exit 1”<br>  },<br>  “keywords”: [],<br>  “author”: “”,<br>  “license”: “ISC”<br>  “dependencies”: {   生产依赖<br>    “jquery”: “^3.5.0”,<br>    “zepto”: “^1.2.0”<br>  }<br>   “devDependencies”: { 开发依赖<br>    “less”: “^3.11.1”<br>  }<br>}</p><p>2.安装在本地和全局的区别<br>安装在全局的特点：<br>    a. 所有的项目都可以使用这个模块(容易导致版本冲突，安装在全局的模块，不能基于CommonJS模块规范调取使用,即不能通过require调取使用)</p><p>安装在本地的特点：<br>    a. 只能当前项目使用这个模块(不能直接使用命令操作，安装在全局可以使用)</p><p>为什么安装在全局可以使用命令？<br>npm root / npm root -g  查看本地环境下或者全局环境下，NPM的安装目录<br>安装在全局目录下的模块，大部分都会生成一个xxx.cmd的文件，只要有这个文件，那么xxx就是一个可执行的命令。(例如yarn.cmd, yarn就是一个可执行的命令)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@IF EXIST &quot;%~dp0\node.exe&quot; (</span><br><span class="line">  &quot;%~dp0\node.exe&quot;  &quot;%~dp0\node_modules\yarn\bin\yarn.js&quot; %*</span><br><span class="line">) ELSE (</span><br><span class="line">  @SETLOCAL</span><br><span class="line">  @SET PATHEXT=%PATHEXT:;.JS;=;%</span><br><span class="line">  node  &quot;%~dp0\node_modules\yarn\bin\yarn.js&quot; %*</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>能否既安装在本地，也使用命令？<br>    可以，但是需要配置packagr.json中的<br>    1.把模块安装在本地，如果是支持命令操作的(会在node_modules中的bin中生成xxx.cmd的命令文件，只不过这个文件无法再全局下执行，不能直接使用命令)<br>    2.在package.json的scripts中配置需要执行的命令脚本<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;kp&quot;:&quot;lessc --version&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>属性名自己设置即可，属性值是需要执行的命令脚本，根据需要自己编写(可以配置很多命令)3.npm run kp / yarn kp 这样的操作就是把配置的脚本执行    -&gt; 首先到配置清单的scripts中查找    -&gt; 找到把后面对应的属性值执行    -&gt; 执行脚本的时候，会到本地node_modules中的.bin文件查找，没有的话，再向NPM安装的全局目录下查找</code></pre><h2 id="NODE入门"><a href="#NODE入门" class="headerlink" title="NODE入门"></a>NODE入门</h2><p>1.NODE本身是基于CommonJS模块规范设计的，所以模块是NODE的组成</p><pre><code>- 内置模块： NODE天生提供给JS调取使用的- 第三方模块： 别人写好的，我们可以基于NPM安装使用- 自定义模块： 自己创建的一些模块</code></pre><p>CommonJS模块化设计思想 (AMD/CMD/ES6 MODULE都是模块化设计思想)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.CommonJS规定，每一个JS文件都是一个单独的模块(模块是私有的，里面涉及的值和变量以及函数都是私有的，和其他JS文件是不冲突的)</span><br><span class="line">2.CommonJS中可以允许模块中的方法互相调用</span><br><span class="line">    B模块中想要调取A模块中的方法</span><br><span class="line">        -&gt; A导出</span><br><span class="line">        -&gt; B导入</span><br><span class="line">    [导出]</span><br><span class="line">        CommonJS给每一个模块都设置了内置的变量/属性/方法</span><br><span class="line">            module: 代表当前这个模块对象</span><br><span class="line">            module.exports: 模块的这个属性用来导出属性和方法</span><br><span class="line">            exports: 是内置的一个变量，也是用来导出当前模块的属性和方法的，虽然和module.exports不是一个东西，但是对应的值是同一个(modules.exports:exports, 值都是对象)</span><br><span class="line">    [导入]</span><br><span class="line">        require: CommonJS提供的内置变量，用来导入模块的(其实导入的就是module.exports导出的东西)，导入的值也是对象</span><br><span class="line"></span><br><span class="line">    exports.fn = fn; // 或者 module.exports.fn = fn</span><br><span class="line">    let temp1 = require(&apos;./temp1&apos;);  ./ 指当前目录中的某个模块，.js可以忽略</span><br><span class="line">                require导入的时候，首先把TEMP1中的代码自上而下执行，把exports对应的堆内存导入进来，所以接收到的结果是个对象。require是一个同步操作：只有把导入的模块代码执行完成，才可以获取值，然后继续执行本模块下面的代码</span><br><span class="line">                此时的temp1是一个对象&#123;fn:...&#125;</span><br><span class="line">    temp1.fn(2); 执行temp1中的fn方法</span><br></pre></td></tr></table></figure></p><p>特点：<br>    1.所有代码都运行在模块作用域，不会污染全局作用域。每一个模块都是私有的，包括里面所有的东西也都是私有的，和其他模块不会产生干扰；<br>    2.模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果，想要让模块再次运行，必须清除缓存。(为了保证性能，减少模块代码重复执行的次数)<br>    3.模块加载的顺序，按照其在代码中出现的顺序。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</p><p>exports={} 是无法导出内容的，默认和module.exports是同一个堆内存，但是这种操作让exoprts指向了新的堆内存，而module.exports不受影响， require导入的是module.exports对应的堆内存，而不是exports的</p><p>默认module.exports = exports， 所以我们在导出的时候，不能直接写module.exports={}或者exports={},这样会使两者指向的堆内存不同。</p><p>require 导入规则<br>    require(‘./xxx’); 查找当前目录下的自定义模块<br>    require(‘xxx’)首先到当前项目的node-module中查找是否存在这个模块，不存在着node提供的内置模块</p><p>_dirname: 模块中这个内置变量是当前所在的绝对路径<br>_filename: 包含绝对路径的文件名称 _dirname[a.js]</p><h2 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h2><h3 id="FS"><a href="#FS" class="headerlink" title="FS"></a>FS</h3><p>实现IO操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let fs = require(&apos;fs&apos;);</span><br><span class="line">1. fs.mkdir / fs.mkdirSync 创建目录, 有Sync的是同步创建，没有是异步。想要实现无阻塞，我们一般都使用异步操作完成要处理的事情。</span><br><span class="line">2. fs.readdir / fs.readdirSync: 读取文件目录中的内容, 返回的结果是一个数组</span><br><span class="line">3. fs.rmdir / fs.rmdirSync :删除目录，但是如果目录中有文件，无法删除，会报错</span><br><span class="line">4. fs.readFile: 读取文件中的内容</span><br><span class="line">5. fs.writeFile: 向文件中写入内容(覆盖式写入：原有的内容都没了)</span><br><span class="line">6. fs.appendFile: 追加写入内容，原有内容还在</span><br><span class="line">7. fs.copyFile: 复制文件到新的目录下</span><br><span class="line">8. fs.unlink: 删除文件</span><br></pre></td></tr></table></figure></p><h3 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let path = require(&apos;path);</span><br><span class="line">path.resolve(); 返回当前的绝对地址(不包含模块名)</span><br><span class="line"></span><br><span class="line">path.resolve(__dirname, &apos;less/tt&apos;) 可以把一个相对路径拼接到绝对路径上，第一个参数是绝对路径，第二个是相对的，如果都是绝对路径，以后一个为主</span><br></pre></td></tr></table></figure><p>__dirname是当前模块所在的绝对路径，跟模块在哪里执行没有关系。<br>path.resolve() 当前模块中的方法在哪个模块中执行的，那么对应的绝对路径是执行模块的绝对路径。</p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>1, url.parse(url[, flag]) 把一个url地址进行解析，把地址中的每一部分按照对象键值对的方式存储起来，第二个参数默认是false，设置为true可以把?传参的部分也解析为键值对的方式<br>Url {<br>  protocol: ‘https:’,  协议<br>  slashes: true, 是否有双斜线<br>  auth: null,<br>  host: ‘<a href="http://www.zhufengpeixun.cn&#39;" target="_blank" rel="noopener">www.zhufengpeixun.cn&#39;</a>, 主机<br>  port: null, 端口<br>  hostname: ‘<a href="http://www.zhufengpeixun.cn&#39;" target="_blank" rel="noopener">www.zhufengpeixun.cn&#39;</a>, 域名<br>  hash: ‘#video’,哈希值<br>  search: ‘?form=qq&amp;lx=stu’, ？传参<br>  query: ‘form=qq&amp;lx=stu’, ?传参不包含?<br>  pathname: ‘/main/guide/index.html’, 请求的资源路径名称<br>  path: ‘/main/guide/index.html?form=qq&amp;lx=stu’,<br>  href:<br>   ‘<a href="https://www.zhufengpeixun.cn/main/guide/index.html?form=qq&amp;lx=stu#video&#39;" target="_blank" rel="noopener">https://www.zhufengpeixun.cn/main/guide/index.html?form=qq&amp;lx=stu#video&#39;</a><br>}</p><p>Url {<br>  protocol: ‘https:’,<br>  slashes: true,<br>  auth: null,<br>  host: ‘<a href="http://www.zhufengpeixun.cn&#39;" target="_blank" rel="noopener">www.zhufengpeixun.cn&#39;</a>,<br>  port: null,<br>  hostname: ‘<a href="http://www.zhufengpeixun.cn&#39;" target="_blank" rel="noopener">www.zhufengpeixun.cn&#39;</a>,<br>  hash: ‘#video’,<br>  search: ‘?form=qq&amp;lx=stu’,<br>  query: [Object: null prototype] { form: ‘qq’, lx: ‘stu’ }, // 区别就是query的值是一个对象<br>  pathname: ‘/main/guide/index.html’,<br>  path: ‘/main/guide/index.html?form=qq&amp;lx=stu’,<br>  href:<br>   ‘<a href="https://www.zhufengpeixun.cn/main/guide/index.html?form=qq&amp;lx=stu#video&#39;" target="_blank" rel="noopener">https://www.zhufengpeixun.cn/main/guide/index.html?form=qq&amp;lx=stu#video&#39;</a> }</p><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>let server = http.createServer(); //创建服务<br>server.listen(); //监听端口</p><p>注意：基于NODE创建后台程序，我们一般都创建一个server模块，在模块当中实现创建WEB服务，和对于请求的处理(并且我们一般都会把server模块放在当前项目的根目录下)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">// 创建WEB服务</span><br><span class="line">let server = http.createServer();</span><br><span class="line">server.listen(&apos;8989&apos;, ()=&gt;&#123;</span><br><span class="line">    // 服务创建成功，并且端口号已经监听成功后，触发的回调函数</span><br><span class="line">    console.log(&apos;server is successful, listen on 8989&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// listen EACCES 0.0.0.0:8989 这种错误是端口号被占用了，我们需要重新修改端口号</span><br><span class="line"></span><br><span class="line">// 当服务创建成功，命令行中会一直存在光标闪烁，证明服务器正在运行中(一定要保证服务是运行的), 按 ctrl + c 可以结束正在运行的服务</span><br><span class="line">// 客户端如何向服务端发送请求，</span><br><span class="line">//  对应协议、域名、端口号等信息，在浏览器中或者AJAX中发送请求即可</span><br><span class="line">// http://localhost:8686/... 服务在当前电脑上</span><br><span class="line">// http://ip:8989/..IP做域名访问，如果是内网IP，相同局域网下的用户可以访问这个服务，如果是外网IP,所有能联网的都可以访问这个服务， 局域网下访问需要互相关掉防火墙</span><br><span class="line">// 把请求的URL地址中：路径名称&amp;问号传参分别解析出来</span><br></pre></td></tr></table></figure><p>createServer((req, res)=&gt;{<br>    req: request 请求对象，包含了客户端请求的信息<br>        req.url 存储的是请求资源的路径地址及问号传参（没有哈希值）<br>        req.method 客户端请求方式<br>        req.headers 客户端的请求头信息，是一个对象<br>    res: response 相应对象，包含了一些属性和方法，可以让服务器端返回给客户端的内容<br>        res.write() 基于这个方法，服务器端可以向客户端返回内容<br>        res.end 结束响应<br>        res.writeHead 重写响应头信息<br>        。。。<br>})</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> handle = <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> server = http.createServer(handle);</span><br><span class="line">server.listen(<span class="string">'8989'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="comment">// 服务创建成功，并且端口号已经监听成功后，触发的回调函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server is successful, listen on 8989'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="创建静态资源服务器"><a href="#创建静态资源服务器" class="headerlink" title="创建静态资源服务器"></a>创建静态资源服务器</h2><p>服务器上有一堆代码，这对项目代码中即可能有服务器端的程序代码，也可能有客户端的程序代码，而客户端的程序代码我们一般都放到static这个目录下<br>static<br>    都是服务器端需要返回给客户端，由客户端浏览器渲染和解析的(前端项目：包括页面、CSS、JS、图片等)<br>server.js<br>    都是需要在服务器端基于NODE执行的(后端项目，一般只有JS)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// let http = require(&apos;http&apos;),</span><br><span class="line">//     url = require(&apos;url&apos;);</span><br><span class="line">// let &#123; readFile &#125; = require(&apos;./utils/fsPromise&apos;);</span><br><span class="line">// let handle = function handle(req, res) &#123;</span><br><span class="line">//     //客户端请求资源文件(PATH-NAME),服务器端都是到STATIC这个目录下进行读取，根据客户端请求的路径名称，服务器端基于FS读取文件中内容的时候，直接加上./static即可</span><br><span class="line">//     let &#123; method, headers: requestHeaders &#125; = req,</span><br><span class="line">//         &#123; pathname, query &#125; = url.parse(req.url, true);</span><br><span class="line">//     readFile(`./static$&#123;pathname&#125;`).then(result =&gt; &#123;</span><br><span class="line">//         //读取成功，文件在</span><br><span class="line">//         res.writeHead(200);</span><br><span class="line">//         res.end(result);</span><br><span class="line">//     &#125;).catch(error =&gt; &#123;</span><br><span class="line">//         // 读取失败，文件不存在，客户端请求的地址是错误的，我们应该响应的内容是404</span><br><span class="line">//         res.writeHead(404,&#123;</span><br><span class="line">//             &apos;content-type&apos;:&apos;text/plain;charset=utf-8&apos;</span><br><span class="line">//         &#125;);</span><br><span class="line">//         res.end(&apos;NOT FOUND&apos;);</span><br><span class="line">//     &#125;);</span><br><span class="line">// &#125;</span><br><span class="line">// let server = http.createServer(handle);</span><br><span class="line">// server.listen(&apos;8989&apos;, () =&gt; &#123;</span><br><span class="line">//     // 服务创建成功，并且端口号已经监听成功后，触发的回调函数</span><br><span class="line">//     console.log(&apos;server is successful, listen on 8989&apos;);</span><br><span class="line">// &#125;);</span><br><span class="line"></span><br><span class="line">let http = require(&apos;http&apos;), url = require(&apos;url&apos;), mime = require(&apos;mime&apos;),</span><br><span class="line">    &#123; readFile &#125; = require(&apos;./utils/fsPromise&apos;)</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line">let handle = function handle(req, res) &#123;</span><br><span class="line">    let &#123; pathname, query &#125; = url.parse(req.url, true),</span><br><span class="line">    pathREG = /\.([a-zA-Z0-9]+)$/i; //捕获后缀名的正则</span><br><span class="line">    readFile(`./static$&#123;pathname&#125;`).then(result =&gt; &#123;</span><br><span class="line">        //根据请求资源的文件类型，设置相应内容的MIME(多用途互联网扩展类型)</span><br><span class="line">        //</span><br><span class="line">        let suffix = pathREG.exec(pathname)[1];</span><br><span class="line">        res.writeHead(200, &#123;</span><br><span class="line">            &apos;content-type&apos;: `$&#123;mime.getType(suffix)&#125;;charset=utf-8`</span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(result);</span><br><span class="line">    &#125;).catch(error =&gt; &#123;</span><br><span class="line">        res.writeHead(404, &#123;</span><br><span class="line">            &apos;content-type&apos;: `text/plain;charset=utf-8`</span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(&apos;NOT FOUND&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">http.createServer(handle).listen(8989, () =&gt; &#123;</span><br><span class="line">    console.log(&quot;server is successful&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>我们创建的WEB服务需要处理两类请求<br>1.静态资源文件的请求处理：想要文件<br>2.API接口的请求处理，想要数据<br>区别：第一类请求的地址中有后缀名，第二类没有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>), url = <span class="built_in">require</span>(<span class="string">'url'</span>), mime = <span class="built_in">require</span>(<span class="string">'mime'</span>), qs = <span class="built_in">require</span>(<span class="string">'qs'</span>),</span><br><span class="line">    &#123; readFile, writeFile &#125; = <span class="built_in">require</span>(<span class="string">'./utils/fsPromise'</span>)</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line"><span class="comment">// 公共方法</span></span><br><span class="line"><span class="keyword">let</span> responseResult = <span class="function"><span class="keyword">function</span> <span class="title">responseResult</span>(<span class="params">res, returnVal</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json;charset=utf-8;'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(returnVal));</span><br><span class="line">&#125;</span><br><span class="line">    ; <span class="keyword">let</span> readUser = <span class="function"><span class="keyword">function</span> <span class="title">readUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readFile(<span class="string">'./json/USER.JSON'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    ; <span class="keyword">let</span> readVote = <span class="function"><span class="keyword">function</span> <span class="title">readVote</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readFile(<span class="string">'./json/VOTE.JSON'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">let</span> handle = <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; pathname, query &#125; = url.parse(req.url, <span class="literal">true</span>),</span><br><span class="line">        pathREG = <span class="regexp">/\.([a-zA-Z0-9]+)$/i</span>; <span class="comment">//捕获后缀名的正则</span></span><br><span class="line">    <span class="keyword">if</span> (pathREG.test(pathname)) &#123;</span><br><span class="line">        <span class="comment">//静态资源处理</span></span><br><span class="line">        readFile(<span class="string">`./static<span class="subst">$&#123;pathname&#125;</span>`</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//根据请求资源的文件类型，设置相应内容的MIME(多用途互联网扩展类型)</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">let</span> suffix = pathREG.exec(pathname)[<span class="number">1</span>];</span><br><span class="line">            res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">                <span class="string">'content-type'</span>: <span class="string">`<span class="subst">$&#123;mime.getType(suffix)&#125;</span>;charset=utf-8`</span></span><br><span class="line">            &#125;);</span><br><span class="line">            res.end(result);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            res.writeHead(<span class="number">404</span>, &#123;</span><br><span class="line">                <span class="string">'content-type'</span>: <span class="string">`text/plain;charset=utf-8`</span></span><br><span class="line">            &#125;);</span><br><span class="line">            res.end(<span class="string">'NOT FOUND'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// API接口请求处理</span></span><br><span class="line">    <span class="comment">//GET-USER:根据传递的ID获取指定的用户信息</span></span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">'/getUser'</span> &amp;&amp; req.method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">        <span class="comment">//传递的信息都在QUERY中存储着</span></span><br><span class="line">        <span class="keyword">let</span> &#123; userId = <span class="number">0</span> &#125; = query,</span><br><span class="line">            returnVal = &#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">message</span>: <span class="string">'no match any data'</span>, <span class="attr">data</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">        readUser().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> data = result.find(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">parseFloat</span>(item[<span class="string">'id'</span>]) === <span class="built_in">parseFloat</span>(userId));</span><br><span class="line">            <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                returnVal = &#123; <span class="attr">code</span>: <span class="number">0</span>, <span class="attr">message</span>: <span class="string">'ok'</span>, data &#125;;</span><br><span class="line">                responseResult(res, returnVal);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">''</span>); <span class="comment">//没有数据的时候，让其执行CATCH中的操作，这样我们只需要让THEN中的方法中有异常信息即可</span></span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> responseResult(res, returnVal));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注册数据</span></span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">'/register'</span> &amp;&amp; req.method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">        <span class="comment">//接收客户端请求主体传递的内容, ondata:正在接收请求主题内容，可能会被触发执行很多次</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> pass = <span class="string">``</span>;</span><br><span class="line">        req.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">            <span class="comment">//chunk获取的都是本次接收的BUFFER格式的数据 ‘’+chunk会转化成字符串</span></span><br><span class="line">            pass += chunk;            </span><br><span class="line">        &#125;);</span><br><span class="line">        req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="comment">//请求主体内容已经接收完了,pass是一个urlencoded的字符串，我们需要把它解析为对象            </span></span><br><span class="line">            pass = qs.parse(pass);            </span><br><span class="line">            readUser().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// FORMAT-PASS 格式化pass数据</span></span><br><span class="line">                <span class="keyword">let</span> maxId = result.length &lt;= <span class="number">0</span> ? <span class="number">0</span> : <span class="built_in">parseFloat</span>(result.length<span class="number">-1</span>); </span><br><span class="line">                pass.password = pass.password.substr(<span class="number">4</span>, <span class="number">24</span>).split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">                <span class="keyword">let</span> newData = &#123;</span><br><span class="line">                    id: maxId++,</span><br><span class="line">                    name: <span class="string">''</span>,</span><br><span class="line">                    picture: <span class="string">`img/<span class="subst">$&#123;pass.sex == <span class="number">0</span> ? <span class="string">`man`</span> : <span class="string">`woman`</span>&#125;</span>.png`</span>,</span><br><span class="line">                    phone: <span class="string">""</span>,</span><br><span class="line">                    sex: <span class="number">0</span>,</span><br><span class="line">                    password: <span class="string">""</span>,</span><br><span class="line">                    bio: <span class="string">""</span>,</span><br><span class="line">                    time: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">                    isMatch: <span class="number">0</span>,</span><br><span class="line">                    matchId: <span class="string">"000"</span>,</span><br><span class="line">                    slogan: <span class="string">""</span>,</span><br><span class="line">                    voteNum: <span class="number">0</span>,</span><br><span class="line">                    ...pass <span class="comment">//展开运算符覆盖原有的项</span></span><br><span class="line">                &#125;;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//把NEWDATA追加到RESULT末尾</span></span><br><span class="line">                result.push(newData);</span><br><span class="line">                <span class="keyword">return</span> writeFile(<span class="string">'./json/USER.JSON'</span>, result);</span><br><span class="line">            &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                responseResult(res,</span><br><span class="line">                    &#123; <span class="attr">code</span>: <span class="number">0</span>, <span class="attr">message</span>: <span class="string">'ok'</span> &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125;)</span><br><span class="line">                .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(error); <span class="comment">//展示错误信息</span></span><br><span class="line">                    responseResult(res, &#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">message</span>: <span class="string">'no'</span> &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求的都不是以上接口</span></span><br><span class="line">    res.writeHead(<span class="number">404</span>);</span><br><span class="line">    res.end(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">http.createServer(handle).listen(<span class="number">8989</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server is successful"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="JS中的同步异步编程"><a href="#JS中的同步异步编程" class="headerlink" title="JS中的同步异步编程"></a>JS中的同步异步编程</h2><blockquote><p>浏览器是多线程的，JS是单线程的，(因为浏览器只分配一个线程来执行JS).<br>进程大线程小，一个进程中包含多个线程，例如在浏览器中打开一个HTML页面，就占用了一个进程。加载页面的时候浏览器分配一个线程去计算DOM结构，分配其他的线程去加载对应的资源文件，。。。再分配一个线程去自上而下执行JS</p></blockquote><p>同步：在一个线程上(主栈|主任务队列)，同一个时间只能做一件事情，当前事情完成才能进行下一个事情(先把一个任务进栈执行，执行完出栈，再把下一个任务进栈……)</p><p>异步：在主栈中执行一个任务，但是发现这个任务是一个异步的操作,我们会把它移出主栈，放到等待任务队列中(此时浏览器会分配其他线程监听异步任务是否到达指定的执行时间)。如果主栈执行完，监听者会把到达时间的异步任务重新放到主栈中执行……</p><ul><li>定时器</li><li>事件绑定</li><li>AJAX</li><li>回调函数</li><li>progress.nextTick</li><li>Promise(async/await)</li><li>node中fs可以进行异步的I/O操作</li></ul><p>所以JS中的异步编程仅仅是根据某些机制来管控任务的执行顺序，不存在同时执行两个任务这一说法。<br><img src="/2020/04/26/NODE/同步异步.png" alt="同步异步图示"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// new Promise的时候会立即把Excutor函数(也就是传递的回调函数)执行，所以Promise本身可以认为是同步的</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    resolve(); <span class="comment">//执行resolve, 会把之前基于THEN存放的方法执行</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//执行完成Excutor，紧接着执行then，执行then的时候会把传递的回调函数放到指定的容器中等待触发自行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 1 ，2 ，4 ，3</span></span><br></pre></td></tr></table></figure><p>Promise并不是完全同步的，挡在Excutor中执行resolve或者reject的时候，此时是异步操作，会先执行then/catch等，当主栈完成后，才会再去掉用resolve/reject，把存放的方法执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES7中新增加对PROMISE操作的新语法： async/await(使用await必须保证当前方法是基于async修饰的)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">Math</span>.random() &lt; <span class="number">0.5</span> ? reject(<span class="number">100</span>) : resolve(<span class="number">200</span>);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>); </span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> AA(); <span class="comment">//先把AA执行，等待AA中的PROMISE完成(无论成功失败)，把最后的处理结果获取到，赋值给res,拿到后再执行后面的代码，(有人说await是把异步的操作同步化？)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);  </span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2, 1, 4,3 await并不是同步，</span></span><br><span class="line"><span class="comment">// 1,先把AA执行，返回一个PROMISE</span></span><br><span class="line"><span class="comment">// 2, 它会暂时跳出正在执行的函数，也就是await后面的代码暂时先不执行(把后面的代码从主栈中移除，放到等待区域中)</span></span><br><span class="line"><span class="comment">// 3， 主栈空闲，执行后面的任务</span></span><br><span class="line"><span class="comment">// 4， 当主栈中的其他任务执行完成，主栈空闲，并且AA中的PROMISE也已经计算完成最后的结果，再把之前第二步移到等待区域的内容，重新拿回到主栈中去执行</span></span><br></pre></td></tr></table></figure></p><h3 id="宏任务-macro-task-amp-微任务-micro-task"><a href="#宏任务-macro-task-amp-微任务-micro-task" class="headerlink" title="宏任务(macro task) &amp; 微任务(micro task)"></a>宏任务(macro task) &amp; 微任务(micro task)</h3><p>宏任务(macro task)</p><ul><li>定时器</li><li>事件绑定</li><li>AJAX</li><li>回调函数</li><li>node中fs可以进行异步的I/O操作</li></ul><p>微任务(micro task)</p><ul><li>progress.nextTick</li><li>Promise(async/await)</li></ul><p>执行顺序<br>SYNC =&gt; MICRO =&gt; MACRO<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>);</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>); <span class="comment">// 等待队列2，</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async2'</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);  <span class="comment">// 等待队列 1，</span></span><br><span class="line">    </span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>); <span class="comment">// 等待队列3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * script start </span></span><br><span class="line"><span class="comment"> * async1 start</span></span><br><span class="line"><span class="comment"> * async2</span></span><br><span class="line"><span class="comment"> * promise1</span></span><br><span class="line"><span class="comment"> * script end</span></span><br><span class="line"><span class="comment"> * promise2 | async1 end 它们的顺序根据不同的V8版本，顺序是不一样的</span></span><br><span class="line"><span class="comment"> * setTimeout</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><h3 id="node中独有的异步操作API"><a href="#node中独有的异步操作API" class="headerlink" title="node中独有的异步操作API"></a>node中独有的异步操作API</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(()=&gt;&#123;</span><br><span class="line">    //也是定时器，但是不设置时间，也是异步编程(宏任务),它会在其他定时器之前执行(现在又改了，)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">    console.log(1);</span><br><span class="line">    </span><br><span class="line">&#125;,0);</span><br><span class="line">setImmediate(()=&gt;&#123;</span><br><span class="line">    console.log(2);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line">// 2，1 现在跟其他定时器一样了，相当于后面没写0</span><br></pre></td></tr></table></figure><p>process.nextTick<br>把当前任务放到主栈的最后执行,并不是放在等待区<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;,<span class="number">10</span>);</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>); </span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3,2,1</span></span><br></pre></td></tr></table></figure></p><p>progress.env.NODE_ENV<br>全局环境变量，<br>用途：真实项目中我们基于WBEPACK打包配置的时候，往往需要区分不同环境下的不同操作，例如有开发环境，测试环境，生产环境……，而我们一般都是基于环境变量来区分打包配置的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;script&quot;:&#123;</span><br><span class="line">        &quot;dev&quot;:&quot;cross-env NODE_ENV = dev node index.js&quot;, // 兼容、设置环境变量、执行index.js</span><br><span class="line">        &quot;pro&quot;:&quot;cross-env NODE_ENV = dev node index.js&quot;,</span><br><span class="line">        &quot;test&quot;:&quot;cross-env NODE_ENV = dev node index.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">安装cross-env模块，以兼容于windows系统</span><br></pre></td></tr></table></figure></p><h2 id="Promise-A"><a href="#Promise-A" class="headerlink" title="Promise A+"></a>Promise A+</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line">    // RESOLVE &amp; REJECT 是自己任意执行的，但是大家约定成功执行RESOLVE, 失败执行REJECT</span><br><span class="line">    // EXCUTOR函数(执行函数)中，可以不管控异步操作(但是不管控异步，没有意义，一般都需要管控)</span><br><span class="line">    resolve(100);</span><br><span class="line">&#125;).then(result=&gt;&#123;</span><br><span class="line">    //RESOLVE执行的时候会触发第一个回调函数</span><br><span class="line">    console.log(1);</span><br><span class="line">    return 100;//会把这个值传递给下一个THEN,如果返回的是PROMISE，则等到PROMISE处理完成，把处理完成的结果传递给下一个THEN</span><br><span class="line">&#125;, reason=&gt;&#123;</span><br><span class="line">  //REJECT执行的时候会触发第二个回调函数  </span><br><span class="line">  console.log(2);</span><br><span class="line">  </span><br><span class="line">&#125;).then(result=&gt;&#123;</span><br><span class="line">    //需要保证执行THEN方法返回的依然是PROMISE实例，这样才可以实现链式调用</span><br><span class="line">    //上一个THEN中管控的两个方法只要任何一个不报错，都会执行这个THEN方法，如果报错，会执行此THEN中的第二个回调函数</span><br><span class="line">&#125;).catch(reason=&gt;&#123;</span><br><span class="line">    //相当于THEN中的第二个方法</span><br><span class="line">&#125;);</span><br><span class="line">console.log(3);</span><br><span class="line">Promise.all([Promise1, Promise2,...]).then(res=&gt;&#123;</span><br><span class="line">    //等待所有的PROMISE都成功，执行THEN，反之只有有一个失败就执行CATCH</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/2020/04/26/NODE/Promise A+.png" alt="promise"></p><h3 id="Promise的封装"><a href="#Promise的封装" class="headerlink" title="Promise的封装"></a>Promise的封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(excutorCallback) &#123;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'pending'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">this</span>.fulfilledAry = [];</span><br><span class="line">        <span class="keyword">this</span>.rejectedAry = [];</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        <span class="keyword">let</span> resolveFn = <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                clearTimeout(timer);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.status !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">this</span>.status = <span class="string">'fulfilled'</span>;<span class="comment">// 当前状态成功</span></span><br><span class="line">                <span class="keyword">this</span>.value = result;</span><br><span class="line">                <span class="keyword">this</span>.fulfilledAry.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    item(<span class="keyword">this</span>.value);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> rejectFn = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                clearTimeout(timer);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.status !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">this</span>.status = <span class="string">'rejected'</span>;<span class="comment">// 当前状态失败</span></span><br><span class="line">                <span class="keyword">this</span>.value = reason;</span><br><span class="line">                <span class="keyword">this</span>.rejectedAry.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    item(<span class="keyword">this</span>.value);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            excutorCallback(resolveFn, rejectFn);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="comment">//有异常信息按照REJECT状态处理</span></span><br><span class="line">            rejectFn(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//执行THEN返回一个新的PROMISE实例</span></span><br><span class="line">    then(fulfilledCallback, rejectedCallback) &#123;</span><br><span class="line">        <span class="keyword">typeof</span> fulfilledCallback !== <span class="string">'function'</span> ? fulfilledCallback = <span class="function"><span class="params">result</span> =&gt;</span> result : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">typeof</span> rejectedCallback !== <span class="string">'function'</span> ? rejectedCallback = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(reason <span class="keyword">instanceof</span> <span class="built_in">Error</span> ? reason.message: reason);</span><br><span class="line">        &#125; : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.fulfilledAry.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> x = fulfilledCallback(<span class="keyword">this</span>.value);</span><br><span class="line">                    x <span class="keyword">instanceof</span> <span class="built_in">Promise</span> ? x.then(resolve, reject) : resolve(x);</span><br><span class="line">                    resolve(x);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">this</span>.rejectedAry.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> x = rejectedCallback(<span class="keyword">this</span>.value);</span><br><span class="line">                    <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">                        x.then(resolve, reject);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    reject(x);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">catch</span>(rejectedCallback) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, rejectedCallback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Promise.all([]).then(res=&gt;&#123;所有的都成功走这里，res中存储了每一个实例返回的结果，而且和数组的顺序是一样的&#125;).catch(()=&gt;&#123;只要有一个失败就执行这个，失败后不再执行后面的操作&#125;)</span></span><br><span class="line">    <span class="keyword">static</span> all(promiseAry = []) &#123; <span class="comment">//添加私有属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//循环数组中的每一项</span></span><br><span class="line">            <span class="keyword">let</span> count = <span class="number">0</span>, result = [], step = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// count记录成功的数量，result记录成功的结果,step记录处理的个数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promiseAry.length; i++) &#123;</span><br><span class="line">                <span class="comment">// promiseAry[i], 每一个需要处理的promise实例</span></span><br><span class="line">                promiseAry[i].then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    result[i] = val; <span class="comment">//索引需要和promiseAry一一对应，保证结果的顺序</span></span><br><span class="line">                    <span class="keyword">if</span> (count === promiseAry.length) &#123;</span><br><span class="line">                        resolve(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, reason =&gt; &#123;</span><br><span class="line">                    reject(reason);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span>;</span><br></pre></td></tr></table></figure><h2 id="本地存储-amp-服务器存储"><a href="#本地存储-amp-服务器存储" class="headerlink" title="本地存储 &amp; 服务器存储"></a>本地存储 &amp; 服务器存储</h2><p>本地存储：把一些信息存储到客户端本地(主要目的有很多，其中有一个实现多页面之间的信息共享)</p><pre><code>-&gt; manifest 离线缓存 H5处理离线缓存还是不够完善，所以真实项目中一般还是传统的NATIVE APP来完成这件事-&gt; LocalStorage / SessionStorage H5中新增加的API，基于这个API可以把一些数据缓存到本地(常用)-&gt; IndexDB / webSQL: 本地数据库存储-&gt; Cookie 本地信息存储(常用)-&gt; CacheStorage / ApplicationCache  本地缓存存储...</code></pre><p>用到本地存储的地方：<br>    【页面通信】页面之间信息的通信<br>        A存信息，B页面可以获取<br>        登录<br>        记住用户名密码<br>        购物车<br>        跳转到其他页面，返回上级页面的时候停留在之前最后一次点击的位置<br>        …<br>    <img src="/2020/04/26/NODE/页面通信.png" alt="页面通信"><br>    【做一些性能优化】<br>        把一些不经常改变的数据，在第一次从服务器端获取到之后，存储到客户端本地，(记录一个存储时间，假设我们设置有效存储时间是10分钟，那么十分钟以内，我们再刷新页面就不用再向服务器发请求了，直接从本地数据中获取展示即可，超过十分钟，重新向服务器发送请求，请求回来的数据参考第一次，也一样存储到本地<br>            ，减轻服务器压力<br>            ，对于不经常更新的数据我们可以把存储周期设置的长一点，有助于页面的第二次加载的时候，渲染的速度变快(移动端经常做这些事情)<br>        )</p><h3 id="LocalStorage-amp-Cookie"><a href="#LocalStorage-amp-Cookie" class="headerlink" title="LocalStorage &amp; Cookie"></a>LocalStorage &amp; Cookie</h3><p>[cookie]<br>    1, 兼容所有浏览器<br>    2，有存储的大小限制，一般一个源(域)下，只能存储4KB内容<br>    3，cookie有过期时间，当然我们自己可以手动设置这个时间<br>    4, 杀毒软件都可能会把cookie信息强制清除掉<br>    5，在隐身模式下，是不记录cookie<br>    6，cookie不是严格的本地存储，因为要和服务器之间来回传输<br>[localstorage]<br>    1, 不兼容IE低版本(IE8及以下)<br>    2，也有存储的大小限制，一个源下最多存储5MB<br>    3，本地永久存储，只要不是手动删除，就永远存储在本地(但是我们可以基于API： removeItem/clear 手动清除一些自己想要删除的信息)<br>    4，杀毒软件暂时不会清除localstorage(新版本谷歌浏览器会清除storage)<br>    5, 在隐身模式下，是记录localstorage的<br>    6，localstorage和服务器没有关系</p><p>真实项目中使用本地存储来完成一些需求的情况不是很多，一般都是基于服务器的session或者数据库存储完成的(服务器的session和本地的cookie是有关联的)，如果不考虑兼容，想基于本地存储来完成一些事情，那么一般都是用localstorage的(尤其是移动端开发)</p><p>localStorage.setItem([key],[value]); value必须是字符串格式的(即使写的不是字符串，也会默认转换成字符串)<br>localStorage.getItem([key]); 通过属性名获取存储的信息<br>localStorage.removeItem([key]); 删除指定的存储信息<br>localStorage.clear(); 清除当前域下存储的所有信息<br>localStorage.key([index]); 基于索引获取指定的KEY名</p><p>document.cookie=’’; // 设置cookie</p><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><p>参考文档 <a href="https://www.expressjs.com.cn/4x/api.html" target="_blank" rel="noopener">https://www.expressjs.com.cn/4x/api.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本片是对node基础概念的介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://abluecup.github.io/2020/04/23/Git/"/>
    <id>https://abluecup.github.io/2020/04/23/Git/</id>
    <published>2020-04-23T09:38:11.000Z</published>
    <updated>2020-04-26T06:41:15.882Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是对Git的介绍<br><a id="more"></a></p><h2 id="Git-版本控制系统"><a href="#Git-版本控制系统" class="headerlink" title="Git 版本控制系统"></a>Git 版本控制系统</h2><p>1.版本控制系统<br>    开发中我们把每一次修改都有效的进行记录（记录成一个版本），后期如果需要回退到原有的某个版本或者是用当前的和某一个版本进行比较等，都可以有效的进行管理。<br>    常用的版本控制系统：SVN(集中式) / Git(分布式)<br>2.分布式版本管理系统的特点<br>    <img src="/2020/04/23/Git/1.jpg" alt="分布式集中式对比"><br>3.Linux团队开发的Git,所以Git中的命令大部分都是linux命令</p><h2 id="常用的Git命令"><a href="#常用的Git命令" class="headerlink" title="常用的Git命令"></a>常用的Git命令</h2><p>后期我们更多的是基于命令完成Git管理，所以我们需要学习一些常用的Linux命令。<br>    Windows操作系统：DOS窗口和DOS命令<br>    LINUX服务器操作系统：LINUX命令（MAC终端使用的也是LINUX命令）<br>常用的命令有：<br>ls -l/-a 查看当前目录结构(-a是可以看见所有的：包含隐藏的)<br>cd      切换到指定的目录中（进入的地址可以粘贴到对应的操作系统命令窗口中）<br>cd ./   当前目录<br>cd ../  上级目录<br>cd /    根目录<br>clear:  清屏<br>mkdir:  创建目录<br>touch:  创建文件<br>vi:     想文件中插入或者管理一些内容<br>    i 进入到插入模式<br>    ESC+:wq: 退出内容胡插入模式，把刚才编辑的内容进行保存<br>echo xxx &gt; xxx.txt  在指定的文件中，删除原来的内容，添加新的内容<br>ehco xxx &gt;&gt; xxx.txt 向指定的文件末尾田间新的内容<br>cp 拷贝、复制<br>rm 删除文件 -r(递归删除) -f(强制删除)，一旦删除无法还原</p><h2 id="Git的常规流程"><a href="#Git的常规流程" class="headerlink" title="Git的常规流程"></a>Git的常规流程</h2><p>1.每一个GIT仓库都有三个区<br>    工作区：写代码<br>    暂存区：临时存放每一次修改的代码，但是并没有生成历史版本<br>    历史区：存放所有历史版本的地方(提交到历史区，就会生成历史版本)<br>    <img src="/2020/04/23/Git/2.png" alt="Git的常规流程"><br>2.把暂存区胡某一个文件撤回到工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cache [file] 删除暂存区的文件</span><br><span class="line">$ git rm --cache . -r 删除暂存区中所有提交的</span><br><span class="line">    如果在撤销过程中，发现从暂存区撤销的文件，在工作区已经被修改了，只有加上-f才能强制从暂存区把内容删除</span><br><span class="line">$ git rm --cache [file] -r -f</span><br></pre></td></tr></table></figure></p><p>3.提交到暂存区一份，把工作区内容改了，但是改的东西不好，想把暂存区上次提交的内容撤回到工作区(覆盖工作区新写的内容)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout [file] 把暂存区的内容覆盖工作区的内容，暂存区的内容并没有消失，只是把工作区的最新修改的内容更改了，工作区和暂存区保持了一致。</span><br></pre></td></tr></table></figure></p><p>4<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git diff [file] 比较暂存区和工作区的差别</span><br><span class="line">$ git diff  --cached</span><br><span class="line">$ git diff master 比较工作区和历史区master的差别</span><br></pre></td></tr></table></figure></p><h2 id="一些细节问题"><a href="#一些细节问题" class="headerlink" title="一些细节问题"></a>一些细节问题</h2><p>1.如果是第一次使用git，生成历史版本的时候，需要提供身份认证<br>需要在本地GIT全局作用域下设置一些信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">'xxx'</span></span><br><span class="line">$ git config  --global user.email <span class="string">'xxx@xx.com'</span></span><br></pre></td></tr></table></figure></p><p>2.真实项目中并不是所有的文件都和项目有关系(例如.idea是WS生成的配置文件夹和项目没关系)，也不是所有的文件都提交(例如node_modules中的内容太大了，也不需要提交)</p><p>.gitignore =&gt;git提交的忽略文件</p><p>3.查看历史版本信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></p><h2 id="代码回滚操作"><a href="#代码回滚操作" class="headerlink" title="代码回滚操作"></a>代码回滚操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout . 把暂存区内容回滚到工作区(一旦回滚，工作区内容无法恢复)</span><br><span class="line">$ git reset HEAD . 把当前暂存区的内容回滚到上一个暂存区，目的是为了把上一个暂存区的内容回滚到工作区</span><br><span class="line">$ git reset --hard 版本号 在历史区中回退到某一个版本(强制把暂存区和工作区都变成回退后的版本)</span><br><span class="line">$ <span class="built_in">history</span> &gt; xx.txt 把历史操作步骤输出到xx.txt中</span><br></pre></td></tr></table></figure><h2 id="团队开发的工作流程"><a href="#团队开发的工作流程" class="headerlink" title="团队开发的工作流程"></a>团队开发的工作流程</h2><p><img src="/2020/04/23/Git/3.png" alt="团队协作流程">;</p><p>1.基础流程<br>    1) 首先创建中央仓库：可以基于github/codding来创建<br>            把开发者都列入仓库的开发群组中，这样每一个开发者用自己的github账号都有权限操作这个仓库了(不这样做也可以，所有开发者用同一个账号也可以，为了防止不知道是谁提交的，我们需要让每一个客户端在本地的GIT全局配置中，设置和GITHUB相同的用户名和邮箱)<br>    2) 创建客户端本地仓库(一个开发者就是一个单独的仓库)，还需要让本地的仓库和远程仓库保持关联，这样才可以实现后续的信息同步<br>    $ git init 创建本地仓库<br>    $ git remote add origin “远程仓库地址” 让本地仓库肯远程仓库保持连接<br>    $ git remote -v 查看链接信息(origin是连接的名称，一般都用这个名字，当然自己可以随便设置)<br>    $ git remote rm origin 移除链接<br>    $ git remote update origin  更新便捷通道<br>    有更简单的方式，只要把远程仓库克隆到本地，就相当于创建本地仓库，而且自动建立了链接，并且把远程仓库的内容衣同步到了本地<br>    $ git clone “远程仓库地址” “本地仓库目录名字（不写，默认椒仓库名）”<br>    3) 各自和中央服务器同步信息<br>    推送： $git push origin master  (每次push之前最好pull一下,如果有冲突，在本地处理冲突，然后再提交);<br>    拉取： $ git pull origin master<br>    无分支管理模式</p><pre><code>- 不是同一行代码冲突：在提示的冲突命令行中同意即可    ESC： wq(按下ENTER键即可)    然后提交- 同一行代码冲突，需要手动把代码进行合并，然后重新提交</code></pre><p><img src="/2020/04/23/Git/4.png" alt="代码冲突"><br>    单独分支管理模式(分支管控的只是历史区，我们创建分支，就是创建不同的线路来管理历史版本)<br>        1，每天第一件事就是把远程master拉取到本地的master上(提交之前也是)</p><pre><code>    - 在本地仓库创建分支 `$ git branch [分支名字]`    - git checkout dev 切换到dev分支上    - git checkout -b [分支] 创建屏切换到这个文件    - 分支创建完成，会自动把本地master分支上的内容同步到dev分支上把dev的内容合并到到master分支上，合并完成之后推送到中央服务器    - git stash 暂存文件(分支有修改，不能直接切换分支，需要把修改的内容暂存)    - 切换到master分支上    - git stash pop 还原暂时存储的内容  当工作去或暂存区还有没有提交的内容时，使用stash 或者 pop命令    - git merge dev(把dev分支合并到master分支上)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是对Git的介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Axios &amp; Fetch</title>
    <link href="https://abluecup.github.io/2020/04/20/AXIOS/"/>
    <id>https://abluecup.github.io/2020/04/20/AXIOS/</id>
    <published>2020-04-20T09:16:39.000Z</published>
    <updated>2020-04-23T05:03:14.651Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是对Axios和Fetch的介绍：<br><a id="more"></a></p><h2 id="AXIOS是基于PROMISE管理的AJAX库"><a href="#AXIOS是基于PROMISE管理的AJAX库" class="headerlink" title="AXIOS是基于PROMISE管理的AJAX库"></a>AXIOS是基于PROMISE管理的AJAX库</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * axios: 它是一个类库，基于PROMISE管理AJAX库</span></span><br><span class="line"><span class="comment">  * 1, 它提供了对应的请求方法使得方法（get/post/header/delete/put/options）</span></span><br><span class="line"><span class="comment">  *      axios.get() 向服务器发送一个请求，基于GET方式</span></span><br><span class="line"><span class="comment">  * 2, 支持的参数配置</span></span><br><span class="line"><span class="comment">  *      axios.get([URL],[OPTIONS]);</span></span><br><span class="line"><span class="comment">  * 3， 基于GET或者POST方法发送请求，返回的结果都是PROMISE实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(axios);</span><br><span class="line">axios.get(<span class="string">'temp.xml'</span>,&#123;</span><br><span class="line">    <span class="comment">//GET请求中，会把PARAMS中的键值对拼接成URLENCODED格式的字符串，然后以问号传参的方式传递给服务器，类似于JQ-AJAX中的DATA(或者自己基于URL后面拼接也可以，不用PARAMS)</span></span><br><span class="line">    params:&#123;</span><br><span class="line">        name:<span class="string">'zhufeng'</span>,</span><br><span class="line">        age:<span class="number">9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">axios.post(<span class="string">'temp.xml'</span>,&#123;</span><br><span class="line">    <span class="comment">//配置项中传递的内容都相当于基于请求主体传递给服务器，但是传递给服务器的内容格式是RAW（JSON格式字符串）,不是X-WWW-FORM-URLENCODED格式</span></span><br><span class="line">    name:<span class="string">'zhufeng'</span>,</span><br><span class="line">    age:<span class="number">9</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="comment">//获取的结果是个对象</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * data: 从服务器获取的响应头信息</span></span><br><span class="line"><span class="comment">  * headers: 从服务器获取的响应头信息</span></span><br><span class="line"><span class="comment">  * request: 创建的AJAX实例</span></span><br><span class="line"><span class="comment">  * status: 状态码</span></span><br><span class="line"><span class="comment">  * statusText: 状态码描述</span></span><br><span class="line"><span class="comment">  * config：向AXIOS发送请求的时候做的配置项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">msg</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">    <span class="comment">//请求失败的原因</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>同时处理多个请求后再执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sendAry中存放三个AJAX请求的PROMISE实例</span></span><br><span class="line"><span class="keyword">let</span> sendAry=[</span><br><span class="line">    axios.get(<span class="string">'temp.json'</span>),</span><br><span class="line">    axios.post(<span class="string">'temp.json'</span>),</span><br><span class="line">    axios.header(<span class="string">'temp.json'</span>)</span><br><span class="line">];</span><br><span class="line">axios.all(sendAry).then(<span class="function"><span class="params">result</span>=&gt;</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// 是一个数组，分别存储每一个请求的结果</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 三个请求都完成才做一些事情，可以基于ALL实现</span></span><br><span class="line">axios.all(sendAry).then(axios.spread(<span class="function">(<span class="params">resA,resB,resC</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//RESA / B /C 分别代表三次请求的结果</span></span><br><span class="line">    <span class="comment">// 原理是JS中的柯里化函数</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><p>常用的AXIOS中的配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL= <span class="string">'https://www.easy-mock.com/mock/09090/temp'</span>;</span><br><span class="line">axios.get(<span class="string">'/list'</span>).then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义成功失败规则，成功执行resolve,失败执行reject(默认规则：状态码以2开头是成功)</span></span><br><span class="line">axios.defaults.ValidateStatus = <span class="function"><span class="keyword">function</span>(<span class="params">status</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^(2|3)\d&#123;2&#125;$/</span>.test(status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.defaults.timeout = <span class="number">3000</span></span><br><span class="line">axios.defaults.headers=&#123;<span class="comment">//自定义请求头， result中的headers是响应头中的信息</span></span><br><span class="line">    name:<span class="string">'zf'</span></span><br><span class="line">&#125;</span><br><span class="line">axios.defaults.params=&#123;&#125;<span class="comment">//GET传参</span></span><br><span class="line">axios.defaults.data=&#123;&#125;<span class="comment">//POST传参 一般参数我们不写在公共配置中</span></span><br><span class="line">axios.defaults.headers[<span class="string">'Content-Type'</span>]=<span class="string">'application/x-www-form-urlencoded'</span><span class="comment">//设置POST请求下基于请求主体向服务器发送传送内容的格式，默认是RAW</span></span><br><span class="line">axios.defaults.transformRequest=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//data是请求主体中需要传递给服务器的内容（对象）</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">``</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> attr <span class="keyword">in</span> data)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data.hasOwnProperty(attr))&#123;</span><br><span class="line">            str +=<span class="string">`<span class="subst">$&#123;attr&#125;</span>=<span class="subst">$&#123;data[attr]&#125;</span>&amp;`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.substring(<span class="number">0</span>, str.length<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result.data;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//失败我们一般不做处理</span></span><br><span class="line">&#125;)<span class="comment">//设置响应头拦截器：分别在响应成功和失败的时候做一些拦截处理（在执行成功后设定的方法之前，先会执行拦截器中的方法）</span></span><br><span class="line"></span><br><span class="line">axios.post(<span class="string">'/add'</span>, &#123;</span><br><span class="line">    lx:<span class="number">12</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><p>Fetch不是AJAX，它诞生的目的是为了代替AJAX，它是JS中内置的API:基于FETCH可以实现客户端和服务器端的信息通信；<br>    1，FETCH是ES2018规范中新增的API,所以浏览器的支持度不是特别好（可以基于babel的最新语法解析包，把它解析），想要兼容性好一些，需要使用 fetch polyfill<br>    2, 使用FETCH发送请求<br>        =&gt; GET/HEADER等请求不能设置BODY, POST中body中只支持字符串，a=1&amp;b=2,不支持对象，GET中只能在URL拼接<br>        =&gt; 不管服务器返回的状态是多少，FETCH都不认为是失败（哪怕是4或者5开头的状态码），都执行的是THEN中的方法（需要我们自己进行一场抛出处理）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'temp.json'</span>, &#123;</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    headers:&#123;<span class="string">'content-type'</span>:<span class="string">'x-www-form-urlencoded'</span>&#125;,</span><br><span class="line">    credentials:<span class="string">'include'</span> <span class="comment">//不管同源还是跨域请求都带着COOKIE信息</span></span><br><span class="line">&#125;,</span><br><span class="line">).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="comment">//res本身是一个对象</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * headers:&#123;&#125; 响应头信息</span></span><br><span class="line"><span class="comment">     * status: 状态码</span></span><br><span class="line"><span class="comment">     * statusText: 状态码描述</span></span><br><span class="line"><span class="comment">     * type: 'basic' / 'cors'</span></span><br><span class="line"><span class="comment">     * url: 请求的地址</span></span><br><span class="line"><span class="comment">     * __proto__: 指向Response</span></span><br><span class="line"><span class="comment">     *      arrayBuffer:</span></span><br><span class="line"><span class="comment">     *      blob()</span></span><br><span class="line"><span class="comment">     *      json()</span></span><br><span class="line"><span class="comment">     *      text()</span></span><br><span class="line"><span class="comment">     *      ...</span></span><br><span class="line"><span class="comment">     *      基于这些方法可以快速把从服务器获取的结果找到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 不管成功还是失败都会走then，而不是catch</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">msg</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>真实项目中的写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'temp.json'</span>, &#123;</span><br><span class="line">    method: <span class="string">'get'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; status &#125; = result;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^(4|5)\d&#123;2&#125;$/</span>.test(status)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'query data is error'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.json();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">msg</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="基于PROMISE封装AJAX"><a href="#基于PROMISE封装AJAX" class="headerlink" title="基于PROMISE封装AJAX"></a>基于PROMISE封装AJAX</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">; (<span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//设置默认的参数配置项</span></span><br><span class="line">    <span class="keyword">let</span> _default = &#123;</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        url: <span class="string">''</span>,</span><br><span class="line">        baseURL: <span class="string">''</span>,</span><br><span class="line">        headers: &#123;&#125;,</span><br><span class="line">        dataType: <span class="string">'JSON'</span>,</span><br><span class="line">        data: <span class="literal">null</span>, <span class="comment">//POST系列请求基于请求主体传递给服务器的内容</span></span><br><span class="line">        params: <span class="literal">null</span>, <span class="comment">//GET请求基于问号传参传递给服务器的内容</span></span><br><span class="line">        cache: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//基于promise设置模式管理AJAX请求</span></span><br><span class="line">    <span class="keyword">let</span> ajaxPromise = <span class="function"><span class="keyword">function</span> <span class="title">ajaxPromise</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//options中融合了默认配置信息，用户基于DEFAULTS修改的信息，用户执行GET/POST方法的时候传递的配置信息，越靠后的优先级越高</span></span><br><span class="line">        <span class="keyword">let</span> &#123; url, baseURL, method, data, dataType, headers, cache, params &#125; = options;</span><br><span class="line">        <span class="comment">//把传递的参数进一步处理</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/^(GET|DELETE|HEAD|OPTIONS)$/i</span>.test(method)) &#123;</span><br><span class="line">            <span class="comment">//GET系列</span></span><br><span class="line">            <span class="keyword">if</span> (params) &#123;</span><br><span class="line">                url += <span class="string">`<span class="subst">$&#123;ajaxPromise.check(url)&#125;</span><span class="subst">$&#123;ajaxPromise.formatData(params)&#125;</span>`</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (cache === <span class="literal">false</span>) &#123;</span><br><span class="line">                url += <span class="string">`<span class="subst">$&#123;ajaxPromise.check(url)&#125;</span>_=<span class="subst">$&#123;+(<span class="keyword">new</span> <span class="built_in">Date</span>())&#125;</span>`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            data = <span class="literal">null</span>; <span class="comment">// GET系列请求主体就是什么都不放，即使写了也要改为NULL</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//POST系列</span></span><br><span class="line">            <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                data = ajaxPromise.formatData(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//基于PROMISE管理发送AJAX</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">            xhr.open(method, url);</span><br><span class="line">            <span class="comment">// 如果headers存在，我们要设置请求头</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> headers === <span class="string">'object'</span> &amp;&amp; headers !== <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> headers) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (headers.hasOwnProperty(attr)) &#123;</span><br><span class="line">                        <span class="keyword">let</span> value = headers[attr];</span><br><span class="line">                        <span class="keyword">if</span> (<span class="regexp">/[\u4e00-\u9fa5]/</span>.test(value)) &#123;</span><br><span class="line">                            <span class="comment">//value中包含中文，我们把它进行编码 encodeURIComponent / decodeURIComponent(解码)</span></span><br><span class="line">                            val = <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">                        &#125;</span><br><span class="line">                        xhr.setRequestHeader(attr, headers[attr]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="regexp">/^(2|3)\d&#123;2&#125;$/</span>.test(xhr.status)) &#123;</span><br><span class="line">                        <span class="keyword">let</span> result = xhr.responseText;</span><br><span class="line">                        dataType = dataType.toUpperCase();</span><br><span class="line">                        dataType === <span class="string">'JSON'</span> ? result = <span class="built_in">JSON</span>.parse(result) : (dataType === <span class="string">'XML'</span> ? result = xhr.responseXML : <span class="literal">null</span>);</span><br><span class="line">                        resolve(result);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    reject(xhr.status);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.send(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把默认配置暴露出去，后期用户在使用的时候可以自己设置一些基础的默认值（发送AJAX请求的时候按照配置的信息进行处理）</span></span><br><span class="line">    ajaxPromise.defaults = _default;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    [<span class="string">'get'</span>, <span class="string">'delete'</span>, <span class="string">'head'</span>, <span class="string">'options'</span>].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        ajaxPromise[item] = <span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params">url, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">            options = &#123;</span><br><span class="line">                ..._default, <span class="comment">//默认值或者基于defaults修改的值</span></span><br><span class="line">                ...options, <span class="comment">//用户调取方法传递的配置项</span></span><br><span class="line">                url: url, <span class="comment">// 请求的URL地址：默认的配置项和传递的配置项中都没有，只能这样获取</span></span><br><span class="line">                method: item.toUpperCase() <span class="comment">//以后执行肯定是ajaxPromise.head执行，不会设置METHODS这个配置项，我们自己需要配置</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> ajaxPromise(options);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    [<span class="string">'post'</span>, <span class="string">'put'</span>, <span class="string">'patch'</span>].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        ajaxPromise[item] = <span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params">url, data = &#123;&#125;, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">            options = &#123;</span><br><span class="line">                ..._default, <span class="comment">//默认值或者基于defaults修改的值</span></span><br><span class="line">                ...options, <span class="comment">//用户调取方法传递的配置项</span></span><br><span class="line">                url: url, <span class="comment">// 请求的URL地址：默认的配置项和传递的配置项中都没有，只能这样获取</span></span><br><span class="line">                method: item.toUpperCase(), <span class="comment">//以后执行肯定是ajaxPromise.head执行，不会设置METHODS这个配置项，我们自己需要配置</span></span><br><span class="line">                data: data</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> ajaxPromise(options);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把对象变成URLencoded字符串</span></span><br><span class="line">    ajaxPromise.formatData = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">``</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.hasOwnProperty(attr)) &#123;</span><br><span class="line">                str += <span class="string">`<span class="subst">$&#123;attr&#125;</span>=<span class="subst">$&#123;obj[attr]&#125;</span>&amp;`</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.substring(<span class="number">0</span>, str.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ajaxPromise.check = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url.indexOf(<span class="string">'?'</span>) &gt; <span class="number">-1</span> ? <span class="string">'&amp;'</span> : <span class="string">'?'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.ajaxPromise = ajaxPromise;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ajaxPromise.get/post</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是对Axios和Fetch的介绍：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>信息传输</title>
    <link href="https://abluecup.github.io/2020/04/08/%E4%BF%A1%E6%81%AF%E4%BC%A0%E8%BE%93/"/>
    <id>https://abluecup.github.io/2020/04/08/信息传输/</id>
    <published>2020-04-08T08:36:27.000Z</published>
    <updated>2020-04-23T05:10:10.639Z</updated>
    
    <content type="html"><![CDATA[<p>本篇内容主要讲述服务器相关内容<br><a id="more"></a></p><h2 id="客户端和服务器交互模型"><a href="#客户端和服务器交互模型" class="headerlink" title="客户端和服务器交互模型"></a>客户端和服务器交互模型</h2><p>面试必问问题：打开浏览器，在地址栏输入一个地址，按下ENTER键，到看到页面，中间都发生了什么？<br><img src="/2020/04/08/信息传输/HTTP通信图示.png" alt="HTTP通信"></p><p>【HTTP请求阶段：向服务器发送请求】<br>1, 浏览器首先向DNS域名解析服务器发出请求；<br>2，DNS反解析：根据浏览器请求中的地址，到DNS服务器中找到对应的服务器外网IP地址<br>3，通过找到的外网IP，向对应的服务器发送请求（首先访问的是服务器的WEB站点管理工具：准确来说，是我们先基于工具在服务器上创建很多服务，当有客户端访问的时候，服务器会匹配出具体是请求的哪个任务）<br>4，通过url地址中携带的端口号，找到服务器上对应的服务，以及服务所管理的项目源文件</p><p>【HTTP响应阶段：服务器把客户端需要的内容准备好，并且返回给客户端】<br>5，服务器端根据请求地址中的路径名称、问好传参或者哈希值，把客户端需要的内容进行准备和处理<br>6，把准备的内容响应给客户端（如果请求的是html或者css这样的资源文件，服务器返回的是资源文件中的源代码（不是文件本身））</p><p>【浏览器渲染阶段】<br>7，客户端浏览器接受服务器返回的源代码，基于自己内部的渲染引擎（内核）开始进行页面的渲染和绘制；<br>-&gt;首先计算DOM结构，生成DOM TREE<br>-&gt;自上而下运行代码，加载css等资源内容<br>-&gt;根据获取的css开始渲染（绘制）页面：render tree（）<br>-&gt; 开始渲染</p><p>1)我们把一次完整的 请求+响应 称之为“HTTP事务”<br>事务是一次完成的操作，请求和响应缺一不可</p><p>2)一个页面完全加载完成，需要向服务器发起很多次HTTP事务操作<br>    一般来说，首先把HTMl源代码拿回来，加载HTML的时候，遇到link/script/img[src]/iframe/video和audio[preload=’none’]。。。都会重新和服务器端建立HTTP事务交互</p><pre><code>特殊情况：如果我们做了资源缓存处理（304），而且即将加载的资源在之前已经加载过了，这样的操作和传统的http事务有所不同，它们是从服务器和浏览器的缓存中读取数据，比传统的读取快很多</code></pre><p>3）从客户端向服务器发送请求，以及服务器吧请求响应给客户端的时候，中间相互传递了很多内容（客户端把一些内容传递给服务器，服务器把一些内容传递给客户端，我们把传递的内容统称为 HTTP报文）</p><p>前端性能优化：<br>1，减少HTTP请求的次数及请求内容的大小</p><h2 id="一个完整的url的组成"><a href="#一个完整的url的组成" class="headerlink" title="一个完整的url的组成"></a>一个完整的url的组成</h2><p>1，URL/URN/URI<br>    uri = url &amp; urn<br>    URI: 统一资源标识符<br>    URL: 统一资源定位符<br>    URN: 统一资源名称<br>2，url的组成部分<br><a href="http://www.zhufengpeixun.cn:80/stu/index.html?name=xxx&amp;age=25#teacher" target="_blank" rel="noopener">http://www.zhufengpeixun.cn:80/stu/index.html?name=xxx&amp;age=25#teacher</a></p><p>【http】传输协议：用来传输客户端和服务器端交互的信息的，类似于快递小哥，常用的有<br>        http： 超文本传输协议（除了传递普通的文本，还可以传递文件流，或者进制编码等信息）是目前最常用的WEB传输协议<br>        https: 基于SSL（Secure Sockets Layer 安全套接层）加密的传输协议，比http更加安全（涉及支付的网站一般都是基于https完成的）<br>        ftp: 文件传输协议，一般用来实现资源文件在服务器上的上传下载<br>[<a href="http://www.zhufengpeixun.cn]域名" target="_blank" rel="noopener">www.zhufengpeixun.cn]域名</a> Domain Name<br>        一级域名（顶级域名）<a href="http://www.qq.com" target="_blank" rel="noopener">www.qq.com</a><br>        二级域名    sports.qq.com<br>        三级域名    kbs.sports.qq.com<br>        ..</p><pre><code>.com 供商用的国际域名.cn 供商用的中文域名.net 用于网络供应服务商（系统类的经常使用net域名）.org 用于官方组织.edu 教育机构.gov 政府机构</code></pre><p>【:80】端口号，用来区分同一台服务器上不同服务的标识（基于WEB服务管理工具创建服务的时候可以指定），不同服务之间一般是不能使用相同的端口号的<br>http  80<br>https 443<br>ftp 21<br>如果当前网站服务，采用的是协议对应的默认端口管理，那么当用户输入网址的时候可以不指定端口号，浏览器会默认把用户默认的端口传递给服务器</p><p>一台服务器上的端口号范围 0 ～ 65535之间</p><p>服务器上安装一款应用都可能会作为一个服务，占用一个端口号</p><p>[stu/index.html] 请求的路径名称<br> path<br> pathname<br>    stu/index.html 一般都是请求当前服务对应的项目目录中stu目录下的index.html。但是也有特殊情况，就是当前的url是被“伪url重写”的，我们看到的URL请求不是真实的请求（例如 <a href="https://item.jd.com/4679424.html）,这个url是被重写的，他的真实地址有可能是" target="_blank" rel="noopener">https://item.jd.com/4679424.html）,这个url是被重写的，他的真实地址有可能是</a> <a href="https://item.jd.com/details.jsp?id=4679424，其实就是跳转到详情页，通过问号传递的不同产品的编号，展示不同的产品信息，但是.jsp这种服务器渲染的动态页面不能被搜索引擎收录，不利于页面的SEO，所以我们会把动态页面静态化，这也就用到了url重写技术" target="_blank" rel="noopener">https://item.jd.com/details.jsp?id=4679424，其实就是跳转到详情页，通过问号传递的不同产品的编号，展示不同的产品信息，但是.jsp这种服务器渲染的动态页面不能被搜索引擎收录，不利于页面的SEO，所以我们会把动态页面静态化，这也就用到了url重写技术</a></p><pre><code>/stu/info 这种没有任何后缀信息，一般都不是用来请求资源文件的，而是用于ajax数据请求的接口地址，如果后缀是.json类的，也是同理，但是有一种除外 /stu/info/这种很可能不是接口地址，而是没有指定请求的资源名称，服务器会请求默认的资源文件，一般都是index.html/default.htmlDHTML: 动态页面，泛指当前页面中的内容不是写死的而是动态绑定的，例如 .jsp/.php/.aspx,...这些页面中的数据都是基于AJAX或者后台编程语言处理，由服务器渲染，最后把渲染的结果返回给客户端呈现出来</code></pre><p>[?name=xxx&amp;age=25#teacher]<br>问号传参以及哈希<br>在HTTP事务中，？传参是客户端把信息传递给服务器的一种方式（有可能是A页面渲染到B页面，也有可能是跳转到一个页面，把参数值传递给页面用来标识的）<br>哈希值一般都跟客户端服务器交互没啥关系，主要用于页面中的锚点定位和哈希路由切换</p><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><p>起始行 ：请求起始行、响应起始行<br>首部（头）：请求头、响应头、通用头<br>主体：请求主体、响应主体</p><p>General 通用头<br>Request URL: <a href="http://zhufengpeixun.com/" target="_blank" rel="noopener">http://zhufengpeixun.com/</a>  请求地址<br>Request Method: GET  请求方式 GET/POST/DELETE/PUT/HEAD/OPTION<br>Status Code: 200 OK  响应的HTTP状态吗<br>Remote Address: 123.57.243.166:80   主机地址（服务器外网IP地址）<br>Referrer Policy: no-referrer-when-downgrade </p><p>Request Headers 请求头 [客户端设置、服务器端接收]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1  起始行：（描述当前请求的一些基本信息，用的是1.1版本传输协议进行内容传输的）</span><br><span class="line">Host: zhufengpeixun.com </span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3654.0 Mobile Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7</span><br><span class="line">Cookie: pgv_pvi=3852008448; tencentSig=5939430400; _qddaz=QD.u3qz1b.ov06ek.k6g5okvq; IESESSION=alive; Hm_lvt_418b1c90fa35dc210dd5d2284d9f9f29=1586498727; pgv_si=s5373796352; __root_domain_v=.zhufengpeixun.com; _qdda=2-1.1; _qddab=2-u18pab.k8tsdoo6; _qddamta_2852156370=2-0; _qddamta_4001806960=2-0; Hm_lpvt_418b1c90fa35dc210dd5d2284d9f9f29=1586498744 cookie信息一般都是放到头文件中实现和服务器端的数据通信的</span><br><span class="line">If-None-Match: &quot;5c0cf3-fbaa-5a1a421dd2c9c&quot;  </span><br><span class="line">If-Modified-Since: Wed, 25 Mar 2020 01:53:18 GMT 服务器端上次修改时间</span><br></pre></td></tr></table></figure></p><p>Response Headers 响应头【服务器端设置、客户端获取】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK 起始行：（描述当前请求的一些基本信息，用的是1.1版本传输协议进行内容传输的）</span><br><span class="line">Date: Fri, 10 Apr 2020 06:12:53 GMT 服务器响应内容的时候的服务器时间（客户端获取这个时间的时候已经和真实时间产生误差了，因为服务器返回内容到客户端接收到也是需要时间的），而且这个时间是格林尼治时间</span><br><span class="line">Server: Apache</span><br><span class="line">Last-Modified: Wed, 25 Mar 2020 01:53:18 GMT 服务器端上次修改时间</span><br><span class="line">ETag: &quot;5c0cf3-fbaa-5a1a421dd2c9c&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Vary: Accept-Encoding,User-Agent</span><br><span class="line">Content-Length: 12936</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Via: 1.1 cn-p-sh-bldg800-01</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure></p><p>Responds<br>响应主体：服务器返回的是啥就是啥</p><p>Request Payload / Form Data [请求主体]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端发送给服务器短的内容</span><br></pre></td></tr></table></figure></p><p>了解HTTP报文以及如何查看对未来工作开发和BUG调试至关重要，以后涉及到交互功能(前端《=》后台)出现问题，都按照如下方式查找问题原因；<br>A: 打开控制台，在network中找到当前交互的请求地址，点击进去看详情<br>B: 如果是传递给服务器的参数或者方式错误【前端问题】<br>C: 如果服务器返回的信息错误或者和API规定的内容不一样【后台问题】<br>D: 如果返回数据是对的，但是展示有问题【前端问题】<br>确定是自己前端的问题后，基于断点（或者代码中的debugger）或者控制台输出等方式，开始逐步调试即可</p><p>3, 客户端和服务器端信息交互的方式<br>    [客户端传递给服务器]<br>    A: ?传参 请求的url地址末尾通过问号传参的方式，把一些信息传递给服务器</p><pre><code>B: 设置请求头    客户端把需要传递给服务器端的内容设置到请求头信息中（自定义请求头），服务器端可以通过接收请求头信息把内容得到C: 设置请求主体    xhr.send([ajax send中传递的内容就是客户端设置的请求主体内容,服务器端可以接收到这些信息的])【服务器返回给客户端】A: 设置响应头，例如把服务器时间通过响应头返回给客户端，客户端通过获取响应头信息得到这个时间（响应头返回的速度优先于响应主体）B: 设置响应主体    主要的返回信息都在响应主体当中</code></pre><h2 id="前端新能优化方案"><a href="#前端新能优化方案" class="headerlink" title="前端新能优化方案"></a>前端新能优化方案</h2><p> 减少HTTP 请求次数和请求大小<br> 代码优化：有利于SEO，有利于扩展维护，有利于减少性能消耗<br> DNS及HTTP通信方式的优化<br> 【js代码优化的108条建议】<br> [雅虎css优化的36条建议]</p><p>1，在JS中尽量减少闭包的使用（闭包会产生不销毁的栈内存），<br>    A:循环给元素做事件绑定的时候，尽可能把后期需要的信息（例如索引）存储到元素的自定义属性上，而不是创建闭包存储<br>    B:在最外层形成一个闭包，把一些后续需要的公共信息进行存储，而不是每一个方法都创建一个闭包（例如单例模式）<br>    C:尽可能手动释放，不被占用内存 null<br>    …<br>2, 尽量合并css和js文件<br>    把需要引入的css合并为一个，js也合并为一个，原理是减少http请求次数，尽可能把合并后的代码进行压缩，减少Http请求资源的大小<br>    A:WEBPACK这种自动化构建工具，可以帮我们实现代码的合并和压缩（工程化开发）<br>    B:在移动端开发（或者追求高性能的PC开发【例如百度首页】），如果css或者js不是需要很多，我们可以选择把css和js搞成内嵌式，也就是代码直接写在html里面<br>3，尽量使用字体图标或者SVG图标来代替传统的png等格式图片（因为字体图标等是矢量图，放大不会变形【基于代码编写出来的】，而且渲染速度快，相对比位图要小一些）<br>4，减少对DOM的操作，主要是减少DOM的重绘和回流（重排）<br>A：关于重排的分离读写（把设置操作写在一起）<br>B: 使用文档碎片或者字符串拼接做数据绑定（DOM的动态创建）<br>5，在JS中避免“嵌套循环”（这种会额外增加很多循环次数）和“死循环”<br>6，采用图片的“懒加载”（延迟加载）<br>    目的是为了减少页面第一次加载过程中HTTP的请求次数，让页面打开的速度变快<br>    步骤：开始加载页面的时候，所有的真实图片都不去发送HTTP请求加载，而是给一张背景图，当页面加载完成，并且图片在可视区域内，我们再去做图片的加载<br>7，基于浏览器和服务器端的缓存技术（304缓存）把一些不经常更新的静态资源文件做缓存处理，例如JS,CSS,静态图片都可以做缓存<br>    原理也是为了减少HTTP请求的大小，让获取速度更快<br>8，尽可能使用事件委托（事件代理），来处理事件绑定的操作，减少DOM的频繁操作，其中包括给每一个DOM元素做事件绑定<br>9，尽量减少CSS表达式的使用<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width: expression(document.body.clientWidth - 110 + &apos;px&apos;)</span><br></pre></td></tr></table></figure></p><p>10, css选择器解析规则是从右向左解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.container .link a&#123;</span><br><span class="line">    先找到所有的a，再筛选出在.link中的，在筛选出.container类中的，</span><br><span class="line">    先找到的是所有的a，操作起来很耗性能，我们在使用css选择器的时候尽可能减少对标签选择器的使用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>11，css雪碧图技术（css sprite / css图片精灵）<br>    把所有相对较小的资源图片汇总到一张大图上，后期我们只需要把大图加载下来，用背景定位的方式展示对应的小图即可<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.bg&#123;</span><br><span class="line">    background:url(&apos;xx.png&apos;);</span><br><span class="line">&#125;</span><br><span class="line">.box1&#123;</span><br><span class="line">    background-position:xx xx;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">    background-position:xx xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>12，减少对于cookie的使用，最主要的是减少本地cookie存储内容的大小，因为客户端操作cookie的时候，这些信息总是在客户端和服务器端传来传去 </p><p>13，页面中的数据获取采用异步编程和延迟分批加载<br>    使用异步获取数据是为了降低HTTP通道堵塞，不会因为数据没有请求回来耽误下面信息的渲染，提高页面的打开速度<br>    我们可以这样处理：需要动态绑定的区域，先隐藏，等数据返回并绑定完成后，再让其显示。<br>    延迟分批加载是为了减少第一次页面加载的时候HTTP请求次数，类似于图片懒加载</p><p>14, 页面中出现音视频标签，我们不让页面加载的时候就去加载资源，不然页面加载速度特别慢 preload=’none’等到页面加载完成音视频播放的时候，我们再去加载资源</p><p>15,在客户端和服务器端进行交互的时候，对于多项数据，我们尽可能给予JSON格式来进行传送（JSON格式的数据处理方便，资源偏小） ===&gt; 相对于xml格式的传输才会有这个优势</p><p>16，尽可能实现JS的封装，低耦合、高内聚，减少页面中的冗余代码，减少HTTP请求资源的大小<br>17，css中设置定位后，最好使用ZINDEX改变盒子层级，让所有的盒子不在相同的平面上，这样后续处理的时候，性能会有一丢丢的提高<br>18，在基于AJAX的GET请求进行数据交互的时候，根据需求可以让其产生缓存（这个缓存不是304缓存） 这样下一次从相同的地址获取的数据是上一次缓存的数据（但是很少用，项目中一般可以清除这个缓存的时候偏多）<br>19，尽量减少对于filter滤镜属性的使用（这个属性消耗性能较大一些）<br>20，在css导入的时候，尽量减少使用@import导入式，因为@import是同步操作，只有把这个对应的css导入，才会向下加载，而link是异步操作<br>21，使用window.requestAnimationFrame() 【JS中的帧动画】 代替传统的定时器动画<br>22，减少递归的使用，避免由于递归导致的内存嵌套（建议使用尾递归）<br>23，避免使用iframe，这个标签不仅不好管控样式，而且相当于在一个页面中加载了其他页面，非常消耗性能<br>24，利用H5中提供的localstorage本地存储或者manifest离线缓存，做一些信息的本地存储，下次加载页面的时候直接从本地获取，减少HTTP请求次数<br>25, 调取JS的时候，可使用defer或者async来异步加载<br>26， </p><p>重量级优化：做CDN加速（不属于前端优化），烧钱机器，非常烧钱<br>CDN是地域式分布，在热门地区设置服务器机组，附近的用户访问的都是离其最近的机组<br><img src="/2020/04/08/信息传输/CDN.png" alt="cdn图示"><br>CMS 内容分发管理系统</p><p>=========额外技巧======<br>1，我们一般都把css放在body上面，js放在body下面，让其先加载css，再加载js(保证页面渲染的过程中，元素是带着样式渲染的，而js一般都是用来操作DOM元素的，需要等待元素加载完成)<br>2，能用css搞定的绝对不用JS，能用原生JS搞定的绝对不用插件，绝对不是用FLASH（除了音视频的低版本浏览器播放）<br>    css处理动画的性能优于JS，而且css中的transform还开启了硬件加速<br>3,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(var i=0, len = array.length; i&lt;len;i++)&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>4，JS中尽量减少对eval的使用，因为JS合并压缩的时候，可能出现由于符号不完善，导致代码执行优先级错乱的问题，eval处理起来消耗的性能也偏大<br>5，使用keep-alive实现客户端和服务器端的长连接<br>6， 尽量使用设计模式管理代码<br>    发布订阅、单例、构造、Promise<br>7，开启服务器端的gzip压缩（这个压缩可以有效减少请求资源的大小），其实客户端的图片等资源也是可以压缩的（但是对于24位的位图，压缩后可能会变模糊）</p><p>8，页面中不要出现无效的链接（利于SEO优化），还有其他技巧，提高关键字曝光率、Img需要加alt、设置meta标签</p><p>9，避免使用with语句（非常耗性能）</p><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>1,async javascript and xml 异步的javascript和xml<br>在AJAX中的异步不是我们理解的同步异步编程，而是泛指“局部刷新”，但是我们在以后的AJAX请求中金肯呢个使用异步获取数据，（因为异步获取数据不会阻塞下面代码的执行）<br>XML是一种文件格式（我们可以把html理解为XML的一种），可扩展的标记语言，它的作用是用自己扩展的一些语义标签来存储一些数据和内容，这样存储的好处是可以清晰的展现数据结构<br>在很久以前，AJAX刚刚兴起的时候，客户端从服务器端获取数据，服务器为了清楚的表达数据结构，都是返回XML格式的内容，当下我们获取的数据一般都是JSON格式的内容，JSON相对于XML来说，也能清晰表达数据结构，而且访问里面数据的时候，操作起来比XML更简单<br>（但是现在某些项目中服务器返回的数据不单纯是数据，而是数据和需要展示的结构拼接好的结果，类似于我们自己做的字符串拼接，也就是说服务器端把数据和结构拼接好了返回给客户端，此时返回的数据格式一般都是XML格式的字符串）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version='1.0' encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>22<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">english</span>&gt;</span>100<span class="tag">&lt;/<span class="name">english</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2，全局刷新和局部刷新</p><p><img src="/2020/04/08/信息传输/全局刷新和局部刷新.png" alt="全局刷新和局部刷新图示"></p><p>3，ajax操作<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建AJAX实例</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">//iE6中不兼容，使用的是 new ActiveXObject来实现</span></span><br><span class="line"><span class="comment">// 打开请求：发送请求之前的配置项</span></span><br><span class="line"><span class="comment">//HTTP METHOD请求方式： get/delete/head/options/trace/connect</span></span><br><span class="line"><span class="comment">// post/put</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2,url,向服务器发送请求的API（Application Programing Interface）接口地址</span></span><br><span class="line"><span class="comment">//3,async 设置请求的同步异步，默认是异步（true）,false是同步，项目中使用异步，防止阻塞</span></span><br><span class="line"><span class="comment">// username,userpass 用户名和密码，一般不用</span></span><br><span class="line">xhr.open(&#123;</span><br><span class="line">    [HTTP METHOD],[URL],[ASYNC],[USER-NAME],[USER-PASS]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//事件监听，一般监听的都是READY-STATE-CHANGE 事件（AJAX状态改变事件），基于这个事件可以获取服务器返回的响应头响应的主体内容</span></span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status ==<span class="number">200</span>)&#123;</span><br><span class="line">        xhr.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送AJAX请求，从这步开始，当前AJAX任务开始，如果AJAX是同步的，后续代码不会执行，要等到AJAX状态成功后再执行，反之异步不会</span></span><br><span class="line">xhr.send([请求主题内容]);</span><br></pre></td></tr></table></figure></p><p>4, 关于HTTP请求方式的一点学习<br>所有的请求都可以服务器端传递内容，也都可以从服务器端获取内容<br>GET：从服务器端获取数据（给的少，拿得多）<br>POST:(推送)，向服务器端推送数据（给得多，拿的少）<br>DELETE:删除服务器端的某些内容（一般是删除一些文件）<br>PUT:向服务器上存放一些内容（一般也是一些文件）<br>HEAD:只想获取服务器返回的响应头信息，不要响应主体中的内容<br>OPTIONS:一般使用它向服务器发送一个探测性请求，如果服务器端返回了信息，说明当前客户端和服务器端建立了连接，我们可以继续执行其他请求了（TRACE是干这件事的，但是AXIOX这个AJAX类库在基于cross domain进行跨域请求的时候，就是先发送options请求探测尝试，如果能连通服务器，才会继续发送其他请求）<br>CONNECT:保留协议，暂时不用</p><p>GET VS POST<br>【传递给服务器信息的方式不一样】<br>    GET是基于URL地址 问号传参 的方式把信息传递给服务器<br>    POST是基于请求主体把信息传递给服务器<br>    (easy-mock)<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[GET]</span><br><span class="line">xhr.open(&apos;get&apos;,&apos;url?xx=xxx&amp;xx=xxx&apos;)</span><br><span class="line">[POST]</span><br><span class="line">xhr.send(&apos;xx=xxx&amp;xx=xxx&apos;);</span><br></pre></td></tr></table></figure></p><pre><code>GET一般应用于拿，给服务器的少一些，而POST给服务器的多，如果POST是基于问号传参的方式来搞，会出现一些问题，url会拼很长。浏览器对于URL的长度都有最大限度（谷歌是8KB,火狐是7kb,ie是2kb）,超过的部分浏览器就把它截下了 =&gt; 所以GET请求可以基于URL传参，而POST都是使用请求主体传递（请求主体理论上是没有限制的，但是真实项目中我们会自己做大小限制，防止上传过大信息，导致请求迟迟完不成）</code></pre><p> 【GET不安全，POST相对安全】<br>    因为GET是基于问号传参把信息传递给服务器的，容易被骇客进行URL劫持，POST是基于请求主体传递的，相对来说不好被劫持。所以登录注册等涉及安全性的交互操作，我们都应该用POST请求。<br> 【GET请求会产生不可控制的缓存，POST不会】<br>    不可控：不是想要就要，想不要就不要的，这是浏览器自主记忆的缓存，我们无法基于JS控制，真实项目中，我们都会把这个缓存干掉<br>    GET请求产生缓存是因为连续多次向相同的地址，并且连续多次传递的信息也是相同的，浏览器会把之前获取的数据从缓存中拿到返回，导致无法获取服务器最新的数据<br>    POST不会<br>    解决方案：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(&apos;get&apos;, &apos;/temp/list?id=1000&amp;lx=2000&amp;_=$(Math.random()));</span><br><span class="line">//保证每次请求的地址不完全一致：在每一次请求的末尾追加一个随机数即可（使用_作为属性名就是不想和其他的属性名冲突）</span><br></pre></td></tr></table></figure></p><p>5，ajax状态<br>    0   unsend 刚开始创建，还没有发送<br>    1   opened 已经执行了open这个操作<br>    2   headers_received 已经发送AJAX请求（AJAX任务开始），响应头信息已经被客户端接收了（响应头中包含了服务器的时间以及HTTP状态码）<br>    3   loading 响应主体内容正在返回<br>    4   done 响应主体内容已经被客户端接收</p><p>6，HTTP网络状态码（STATUS）<br>根据状态码能够清楚的反映出当前交互的结果及原因<br>    200 ok 成功（只能证明服务器成功返回信息了，凡是信息不一定是你业务需要的）<br>    301 Move Permanently 永久转移（永久重定向）<br>            域名更改：访问原始域名重定向到新的域名<br>    302 Move Temporarily临时转移（临时重定向 =&gt; 307）<br>            网站是基于https协议，如果访问的是HTTP协议，会基于307重定向到https协议上<br>            302一般用作服务器负载均衡：当一台服务器达到最大并发数的时候，会把后续访问的用户临时转移到其他的服务器机组上处理<br>                真实项目中，会把所有的图片放到单独的服务器上（图片服务器），这样减少主服务器的压力，当用户向主服务器访问图片的时候，主服务器都把它转移到图片服务器上处理<br>    304 Not Modified 设置缓存<br>            对于不经常更新的资源文件，例如css js html img等，服务器会结合客户端设置304缓存，第一次加载过这些资源就缓存到客户端了，下次再获取的时候，是从缓存中获取，如果资源更新了，服务器端会通过最后修改时间来强制让客户端从服务器重新拉取。基于CTRL+F5强制刷新页面，304缓存就没有了<br>    400 Bad Request 请求参数错误<br>    401 无权限访问<br>    404 not found 找不到资源（地址不存在）<br>    407 代理无权限<br>    413 Request Entity Too Large 和服务器交互的资源超过服务器最大的限制</p><pre><code>500 Internal Server Error 未知的服务器错误503 Service Unavailabe 服务器超负荷</code></pre><p>7, 关于XHR的属性和方法<br>xhr.reponse     响应主体内容<br>xhr.reponseText     响应主体内容是字符串（JSON或者XML格式字符串都可以）<br>xhr.reponseXML      响应主体内容是XML文档</p><p>xhr.status  返回的HTTP状态码<br>xhr.statusText  返回的状态码的描述</p><p>xhr.timeout     设置请求超时的时间 xhr.timeout = 3000 (毫秒)<br>                xhr.ontimeout = function(){“请求超时”}</p><p>xhr.withCredentials     是否允许跨域</p><p>xhr.abort()     强制中断AJAX请求<br>xhr.getAllResponseHeaders()     获取所有响应头信息<br>xhr.getResponseHeader([key])    获取Key对应的响应头信息<br>xhr.open()  打开URL请求<br>xhr.send()  发送请求<br>xhr.setRequestHeader()  设置请求头, 不能是中文<br>xhr.overrideMimeType()  重写MIME类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'temp.xml'</span>);</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="params">()</span>=&gt;</span>&#123; <span class="comment">// 监听的是AJAX状态改变事件：设置监听之前有一个状态，当后续状态和设置之前的状态不相同的时候，才会触发这个状态</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(); <span class="comment">// 发送请求，这个执行才证明AJAX任务开始</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>主线程任务执行完成，才会执行异步任务<br>输出结果是 3,1,2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'temp.xml'</span>, <span class="literal">false</span>);</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">2</span>) &#123; <span class="comment">//当状态为2的时候，触发了事件，但是主任务AJAX正在执行，无法执行该任务</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123; <span class="comment">// 状态为4的时候，主任务AJAX已经执行完成，执行此任务</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(); <span class="comment">// 当AJAX开始，由于是同步编程，主任务队列在状态没有变成4（任务结束）之前一直被这件事占用着，其他事情都做不了（当服务器把响应头返回的时候，状态为2，触发了事件，但是由于主任务队列没有完成，被占着呢，绑定的方法也无法执行。。所以只有状态为4的时候执行这个方法）</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>2,3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'temp.xml'</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">xhr.send();</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="params">()</span>=&gt;</span>&#123; <span class="comment">//readystate一直是4</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;       </span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>3</p><h2 id="基于服务器时间做倒计时"><a href="#基于服务器时间做倒计时" class="headerlink" title="基于服务器时间做倒计时"></a>基于服务器时间做倒计时</h2><p>从服务器端获取时间会存在一个问题：由于服务器端返回数据需要时间，所以客户端拿到返回的“服务器时间”的时候，已经过去一会了，导致获取的时间和真实时间是有一定误差的，这个误差越小越好，那么如何减少误差：<br>1，在AJAX为2的时候就从响应头中获取信息，而不是等到更靠后的状态4<br>2，请求方式设置为head: 只获取响应头信息即可，响应主体内容不需要</p><p>创建一个全局变量，记录第一次从后台获取的服务器时间，每一秒刷新的时候都在第一次的基础上一直累加，而不是重新从服务器获取.如果每次都从服务器获取，那么服务器的可能会因负载过重而宕机。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timebox"</span>&gt;</span>倒计时： <span class="tag">&lt;<span class="name">span</span>&gt;</span>-- : -- : --<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timebox = <span class="built_in">document</span>.querySelector(<span class="string">'.timebox'</span>),</span></span><br><span class="line"><span class="javascript">        timecout = timebox.querySelector(<span class="string">'span'</span>),</span></span><br><span class="line"><span class="javascript">        autoTimer = <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">        _serverTime = <span class="literal">null</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        ;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> queryServerTime = <span class="function"><span class="keyword">function</span> <span class="title">queryServerTime</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (_serverTime) &#123;</span></span><br><span class="line"><span class="javascript">            _serverTime = <span class="keyword">new</span> <span class="built_in">Date</span>(_serverTime.getTime() + <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> _serverTime;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">'head'</span>, <span class="string">'temp.xml'</span>);</span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (xhr.readyState === <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    _serverTime = <span class="keyword">new</span> <span class="built_in">Date</span>(xhr.getResponseHeader(<span class="string">'date'</span>));</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(_serverTime);</span></span><br><span class="line"><span class="undefined">                    </span></span><br><span class="line"><span class="undefined">                    resolve(_serverTime);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="javascript">            xhr.send(<span class="literal">null</span>);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> promise;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">serverTime</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> targetTime = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-04-17 17:44:00'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> diffTime = targetTime - serverTime;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (diffTime &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> hours = <span class="built_in">Math</span>.floor(diffTime / (<span class="number">1000</span> * <span class="number">3600</span>));</span></span><br><span class="line"><span class="undefined">            diffTime = diffTime - hours * 3600000;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> minutes = <span class="built_in">Math</span>.floor(diffTime / <span class="number">60000</span>);</span></span><br><span class="line"><span class="undefined">            diffTime = diffTime - minutes * 60000;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> seconds = <span class="built_in">Math</span>.floor(diffTime / <span class="number">1000</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            hours &lt; <span class="number">10</span> ? hours = <span class="string">'0'</span> + hours : <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            minutes &lt; <span class="number">10</span> ? minutes = <span class="string">'0'</span> + minutes : <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            seconds &lt; <span class="number">10</span> ? seconds = <span class="string">'0'</span> + seconds : <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            timecout.innerHTML = <span class="string">`<span class="subst">$&#123;hours&#125;</span> : <span class="subst">$&#123;minutes&#125;</span> : <span class="subst">$&#123;seconds&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        timebox.innerHTML = <span class="string">'结束了'</span>;</span></span><br><span class="line"><span class="undefined">        clearInterval(autoTimer);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> computedTime = <span class="function"><span class="keyword">function</span> <span class="title">computedTime</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        promise = queryServerTime();</span></span><br><span class="line"><span class="javascript">        promise <span class="keyword">instanceof</span> <span class="built_in">Promise</span> ? promise.then(fn) : fn(promise);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    autoTimer = setInterval(computedTime, 1000);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="AJAX-封装"><a href="#AJAX-封装" class="headerlink" title="AJAX 封装"></a>AJAX 封装</h2><h3 id="JQ中的ajax"><a href="#JQ中的ajax" class="headerlink" title="JQ中的ajax"></a>JQ中的ajax</h3><p>$.ajax([url],[options]) 或者 $.ajax([options])<br>$.get / $.post / $.getJSON / $.getScript 这些方法都是基于$.ajax构建出来的快捷方法，真实项目中最常用的还是$.ajax</p><p>url:请求的API地址<br>method: 请求的方式<br>data: 传递给服务器的信息，可以放到data中</p><pre><code>- 如果是get请求，是基于问号传参传递过去的- 如果是post请求，是基于请求主题传递过去的- data的值可以是对象也可以是字符串，一般常用对象，如果是对象类型，jq会把对象转化为xx=xxx&amp;xx=xxx的模式（x-www-form-urlencoded）,如果是字符串，我们写的是什么就是什么</code></pre><p>dataType：预设置获取结果的数据格式 TEXT/JSON/JSONP/HTML/SCRIPT/XML…(服务器返回给客户端的响应主体中的内容一般都是字符串，json格式居多，而设置DATA-TYPE=‘JSON’，JQ会内部把获取的字符串转化为JSON格式的对象 =&gt; 它不会影响服务器返回的结果，只是把返回的结果进行了二次处理)<br>async: 设置同步或者异步（TRUE是异步，FALSE是同步）<br>cache: 设置get请求下是否建立缓存，TRUE是建立缓存，FALSE是不建立缓存，默认是TRUE，当我们设置FALSE，并且当前请求是GET请求，JQ会在请求的URL地址末尾追加当前时间戳<br>SUCCESS: 当AJAX请求成功执行，JQ执行回调函数的时候会从响应主体中获取的结果（可能二次处理了）当作参数传递给回调函数<br>error: 请求失败后执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">''</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    data:<span class="literal">null</span>,</span><br><span class="line">    dataType:<span class="string">'JSON'</span>,</span><br><span class="line">    <span class="keyword">async</span>:<span class="literal">true</span>,</span><br><span class="line">    cache:<span class="literal">true</span>,</span><br><span class="line">    success: <span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//result 从服务器获取的结果</span></span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$.ajax(<span class="string">'temp.xml'</span>,&#123;</span><br><span class="line">    success:<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="ajax简单封装"><a href="#ajax简单封装" class="headerlink" title="ajax简单封装"></a>ajax简单封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">; (<span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">AJAX</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AJAX.prototype.init(options);</span><br><span class="line">    &#125;</span><br><span class="line">    AJAX.prototype = &#123;</span><br><span class="line">        <span class="keyword">constructor</span>: AJAX,</span><br><span class="line">        init: function init(options) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;</span><br><span class="line">                url,</span><br><span class="line">                method = <span class="string">'GET'</span>,</span><br><span class="line">                data = <span class="literal">null</span>,</span><br><span class="line">                dataType = <span class="string">'JSON'</span>,</span><br><span class="line">                <span class="keyword">async</span> = <span class="literal">true</span>,</span><br><span class="line">                cache = <span class="literal">true</span>,</span><br><span class="line">                success,</span><br><span class="line">                error</span><br><span class="line">            &#125; = options;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//MOUNT 挂载，把这些配置项挂载在实例上</span></span><br><span class="line">            [<span class="string">'url'</span>, <span class="string">'method'</span>, <span class="string">'data'</span>, <span class="string">'dataType'</span>, <span class="string">'async'</span>, <span class="string">'cache'</span>, <span class="string">'success'</span>, <span class="string">'error'</span>].forEach(<span class="function"><span class="params">itme</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>[item] = item;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">this</span>.sendAjax();</span><br><span class="line">        &#125;,</span><br><span class="line">        sendAjax() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.handleCache();</span><br><span class="line">            <span class="keyword">let</span> &#123; method, url, <span class="keyword">async</span>, dataType &#125; = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(method, url, <span class="keyword">async</span>);</span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="regexp">/^(2|3)\d&#123;2&#125;$/</span>.test(xhr.status)) &#123;</span><br><span class="line">                    error &amp;&amp; error(xhr.statusText, xhr);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="comment">//处理DATA-TYPE</span></span><br><span class="line">                    <span class="keyword">let</span> result = <span class="keyword">this</span>.handleDataType(xhr);</span><br><span class="line">                    success &amp;&amp; success(result, xhr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        handleDataType(xhr) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123; dataType &#125; = <span class="keyword">this</span>;</span><br><span class="line">            dataType = dataType.toUpperCase();</span><br><span class="line">            <span class="keyword">let</span> result = xhr.responseText;</span><br><span class="line">            <span class="keyword">switch</span> (dataType) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'TEXT'</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'JSON'</span>:</span><br><span class="line">                    result = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'XML'</span>:</span><br><span class="line">                    result = xhr.responseXML;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;,</span><br><span class="line">        handleData() &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123; data, method &#125; = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span> (!data) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">'object'</span>) &#123;</span><br><span class="line">                <span class="comment">//如果是个object对象，我们把它转化为x-www-form-urlencoded这种模式，方便后期传递给服务器</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class="line">                        <span class="keyword">let</span> element = data[key];</span><br><span class="line">                        str += <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;data[key]&#125;</span>&amp;`</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                str.length &gt; <span class="number">0</span> ? str = str.substring(<span class="number">0</span>, str.length - <span class="number">1</span>) : <span class="literal">null</span>;</span><br><span class="line">                data = str;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">//根据请求方式不一样，传递给服务器的方式也不一样</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/^(GET|DETELE|HEAD|TRACE|OPTIONS)$/i</span>.test(method)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.url += <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.url.indexOf(<span class="string">'?'</span>)&gt;<span class="number">-1</span>?data:<span class="literal">null</span>&#125;</span>`</span>;<span class="comment">//通过url传递</span></span><br><span class="line">                <span class="keyword">this</span>.data=<span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.data = data; <span class="comment">//post系列，通过请求主体传递</span></span><br><span class="line">        &#125;,</span><br><span class="line">        handleCache() &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123; url, method, cache &#125; = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/^GET$/i</span>.test(method) &amp;&amp; cache === <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (url.indexOf(<span class="string">"?"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                    url += <span class="string">`&amp;_=<span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                url += <span class="string">`?_=<span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span>; <span class="comment">//URL时间末尾追加时间戳</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//检测URL中是否有问号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//...........</span></span><br><span class="line">    &#125;</span><br><span class="line">    AJAX.prototype.init.prototype = AJAX.prototype;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="built_in">window</span>.ajax = AJAX;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line">ajax();</span><br><span class="line"><span class="comment">// 返回的是AJAX原型上init方法的实例，但是init.prototype = AJAX.prototype，所以上面的方法都可以使用</span></span><br></pre></td></tr></table></figure><h2 id="基于PROMISE解决回调地狱问题"><a href="#基于PROMISE解决回调地狱问题" class="headerlink" title="基于PROMISE解决回调地狱问题"></a>基于PROMISE解决回调地狱问题</h2><p>回调地狱：ajax循环嵌套<br>Promise是ES6中新增加的内置类，目的是为了管理异步操作的<br><img src="/2020/04/08/信息传输/promise.png" alt="promise图示"><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise是ES6中新增加的内置类，目的是为了管理异步操作的</span></span><br><span class="line"><span class="comment"> *      1，new Promise(); 是创建类的实例，每一个实例都可以管理一个异步操作</span></span><br><span class="line"><span class="comment"> *          -&gt;必须要传递一个回调函数进去（回调函数中管理你的异步操作）</span></span><br><span class="line"><span class="comment"> *          -&gt;回调函数中有两个参数：</span></span><br><span class="line"><span class="comment"> *              resolve:异步操作成功做的事情(代指成功后的事件队列 -&gt; 成功后要做的所有的事情都存放在这个事件队列中)</span></span><br><span class="line"><span class="comment"> *              reject: 异步操作失败做的事情（代指失败后的事件队列）</span></span><br><span class="line"><span class="comment"> *          -&gt;new Promise的时候立即把回调函数执行了（Promise是同步的）</span></span><br><span class="line"><span class="comment"> *      </span></span><br><span class="line"><span class="comment"> *      2, 基于Promise.prototype.then方法（还有catch / finally两个方法）向成功或失败队列中一次加入需要处理的事情</span></span><br><span class="line"><span class="comment"> *      </span></span><br><span class="line"><span class="comment"> *      3,如果是多个THEN调用，不是像我们想象的依次把增加的方法执行</span></span><br><span class="line"><span class="comment"> *          异步操作成功或者失败，先把第一个THEN中的方法执行，每执行一个THEN，会返回一个新的PROMISE实例，这个实例管控的是上一个THEN中的方法执行的成功还是失败的结果</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">'temp.xml'</span>,</span><br><span class="line">                dataType: <span class="string">'JSON'</span>,</span><br><span class="line">                success(result) &#123;</span><br><span class="line">                    resolve(result);</span><br><span class="line">                &#125;,</span><br><span class="line">                error(msg) &#123;</span><br><span class="line">                    reject(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        promise1.then(</span><br><span class="line">            result =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"THEN1 OK"</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            msg =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"THEN1 NO"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(</span><br><span class="line">                result =&gt; &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"THEN2 OK"</span>, result);</span><br><span class="line">                &#125;,</span><br><span class="line">                msg =&gt; &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"THEN2 NO"</span>, result);</span><br><span class="line">                &#125;); </span><br><span class="line"><span class="comment">// 建议不要使用THEN中的第二个参数（这样很乱），而是建议使用Promise.prototype.catch来管理失败的情况</span></span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'temp.xml'</span>,</span><br><span class="line">        dataType: <span class="string">'JSON'</span>,</span><br><span class="line">        success(result) &#123;</span><br><span class="line">            resolve(result);</span><br><span class="line">        &#125;,</span><br><span class="line">        error(msg) &#123;</span><br><span class="line">            reject(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">promise1.then(</span><br><span class="line">    result =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"THEN1 OK"</span>);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//第一个catch</span></span><br><span class="line">        <span class="comment">//1,异步请求失败会执行它</span></span><br><span class="line">        <span class="comment">//2，第一个THEN方法执行失败也会执行它</span></span><br><span class="line">        <span class="built_in">console</span>.log(msg);</span><br><span class="line"></span><br><span class="line">    &#125;).then(</span><br><span class="line">        result =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"THEN2 OK"</span>);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;).finally(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'aa'</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JS中的异常捕获(目的：把抛出的一场错误捕获到，不让其阻断浏览器的执行)</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//正常执行的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="comment">//TRY中的代码报错了会执行</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//不管TRY中的代码执行成功还是失败都会执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决回调地狱的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> queryA = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'temp.xml'</span>,</span><br><span class="line">        success(result) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> queryB = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'temp.xml'</span>,</span><br><span class="line">        success(result) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> queryC = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'temp.xml'</span>,</span><br><span class="line">        success(result) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> promise1 = queryA();</span><br><span class="line">promise1.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'A OK'</span>);</span><br><span class="line">    <span class="keyword">return</span> queryB();<span class="comment">//上一个THEN中函数手动返回一个新的Promise实例（管控了一个异步操作），下一个THEN会等上一个THEN中的异步成功后再执行</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'B ok'</span>);</span><br><span class="line">    <span class="keyword">return</span> queryC();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">reuslt</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>如果方法中返回一个具体值，而且执行中没有错误异常，会立即执行下一个THEN中的方法（不写RETURN也是返回了具体值，undefined）,但是如果返回的是一个PROMISE实例（并且管控了一个异步操作），只能等PROMISE完成，把成功后的结果当作具体的值返回，才能进入下一个函数执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> A = <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">         setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">             resolve();</span><br><span class="line">         &#125;,<span class="number">1000</span>);</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> B = <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">         setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">             resolve();</span><br><span class="line">         &#125;,<span class="number">1000</span>);</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> promise = A();</span><br><span class="line"> promise.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> B();</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></p><p>补充 visibility:hidden; display:none<br>同样是内容消失不见<br>visibility:hidden，依然占据位置<br>display:none 不会占据位置</p><p>new Date() 获取当前客户端的时间，是标准的时间格式数据=&gt;对象<br>new Date(时间字符串) 把指定的时间字符串格式化为标准的当地时间（不再是字符串了）,时间字符串支持很多格式，例如“xxxx-xx-xx xx:xx:xx”<br>原型上的方法只能通过实例调取使用，js禁止直接用 fn.prototype.fn1()来使用，在jquery源码中，选择设置了一个全局变量init=jQuery.prototype.init 来调取使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇内容主要讲述服务器相关内容&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动端开发</title>
    <link href="https://abluecup.github.io/2019/11/26/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>https://abluecup.github.io/2019/11/26/移动端开发/</id>
    <published>2019-11-26T08:23:55.000Z</published>
    <updated>2020-04-10T09:52:46.202Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要是移动端的相关知识，包括h5标签，css3，响应式布局等<br><a id="more"></a><br>需要的基础知识：</p><h2 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h2><p>1、新增加（修改/删除）的语义化标签<br>header<br>footer<br>main<br>section 区域<br>article 文章区域<br>aside   与内容无关的部分（例如广告）<br>nav     导航<br>figure  配图</p><h2 id="figcaption-配图说明"><a href="#figcaption-配图说明" class="headerlink" title="figcaption  配图说明"></a>figcaption  配图说明</h2><p>mark    标记<br>time    时间标记<br>progress    进度条</p><p>2，关于表单元素的新改革</p><p>[传统表单元素]<br>input:text/password/radio/checkbox/file/hidden/button/submit/reset…<br>select<br>textarea<br>button<br>form<br>label</p><p>[新增一些表单元素或者表单类型]<br>input:search/email/tel/number/range/color/date/time/url…</p><p>表单元素中新增加的类型作用：<br>1，功能强大了，很多东西不需要导入JS插件了，例如日历<br>2，在移动端根据设置的类型不一样，用户输入过程中调取出来的虚拟键盘也不一样（例如number类型调用出来的是数字键盘）<br>3, 新增加的类型提供了css/js验证，可以验证用户输入的内容是否符合格式（之前我们都是用正则自己解决，现在h5中的新类型自带验证机制）</p><p>h5中给表单元素设置了一个新的属性：placeholder 用来做文本框的默认提示<br>4,音视频标签<br> audio<br> video<br> =&gt; 让我们告别了flash</p><p> 5, canvas 图形绘制<br> 6， 提供了一些新的API，<br>    有本地存储: localStorage/sessionStorage<br>    获取地理位置： navigator.geolocation.getCurrentPosition<br>    调取手机内部的GPS定位系统获取当前手机所在地的经纬度以及精确度等<br>    还提供了一些API，让我们可以通过浏览器调取手机内部的软件或者硬件（但是性能都不咋高，而且兼容性也不很好）<br> 7，websocket : socket.io  客户端和服务端新的传输方式（即时通讯IM系统基本上很多是基于它完成的）<br> …</p><p>自己扩展：<br>1）使用JS实现一套和placeholder一模一样的效果<br>2）省市县三级联动<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- &lt;style&gt;</span></span><br><span class="line"><span class="comment">        *&#123;</span></span><br><span class="line"><span class="comment">            margin:0;</span></span><br><span class="line"><span class="comment">            border:0;</span></span><br><span class="line"><span class="comment">            padding:0;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        body&#123;</span></span><br><span class="line"><span class="comment">            padding:60px;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    #userEmail&#123;</span></span><br><span class="line"><span class="comment">        border:1px solid #ddd;</span></span><br><span class="line"><span class="comment">        outline: none;/*当文本框获取焦点后取出浏览器默认的边框选中颜色*/</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    #userEmail:valid&#123;</span></span><br><span class="line"><span class="comment">        /* 不输入或输入格式正确 */</span></span><br><span class="line"><span class="comment">        border-color:green;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    #userEmail:invalid&#123;</span></span><br><span class="line"><span class="comment">         /*没通过验证*/</span></span><br><span class="line"><span class="comment">        border-color:red;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    #userEmail:valid + span::after&#123;</span></span><br><span class="line"><span class="comment">        content: '邮箱格式正确';</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    #userEmail:invalid + span:after&#123;</span></span><br><span class="line"><span class="comment">        content:'邮箱不符合格式'</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    &lt;/style&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span>  <span class="attr">id</span>=<span class="string">"userEmail"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"spanEmail"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        userEmail.onblur=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// checkValidity:h5新提供的表单内容格式验证方法（新表单类型中有内置验证机制的，都可以基于这个方法验证）</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// if (this.checkValidity) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     spanEmail.innerHTML='OK';</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;else&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     spanEmail.innerHTML='NO';</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> val = <span class="keyword">this</span>.value.trim();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (val.length === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                spanEmail.innerHTML = <span class="string">'必填'</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> reg = <span class="regexp">/^\w+((-\w+)|(\.\w+))*@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!reg.test(val)) &#123;</span></span><br><span class="line"><span class="javascript">                spanEmail.innerHTML= <span class="string">'no'</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            spanEmail.innerHTML = <span class="string">'ok'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="css3"><a href="#css3" class="headerlink" title="css3"></a>css3</h2><p>学习一些样式属性和选择器就差不多了</p><h3 id="常用的选择器"><a href="#常用的选择器" class="headerlink" title="常用的选择器"></a>常用的选择器</h3><p>#id<br>.class<br>tag<br>selector1,selector2… 群组选择器<br>a b 后代选择<br>a&gt;b 子代<br>a+b 下一个兄弟<br>a~b  兄弟<br>a.b  同级筛选， 标签a中class为b的<br>a[name=’xx’] 属性选择器 name !=’’ name ^= ‘’ name $=’’ name *=’’(包含)<br>a:hover,a:active, a:visited, a:after, a:before, a:nth-child, a:nth-of-type(), a:nth-last-of-type(),a:not,a:first-child, a:last-child</p><h3 id="样式属性"><a href="#样式属性" class="headerlink" title="样式属性"></a>样式属性</h3><p>1,基本常用的<br>border-radius<br>border-shadow<br>text-shadow</p><p>2, 背景的<br>background-color/image/position/repeat/attachment/</p><p>新增的<br>background-size:<br>    100px 100px 宽高具体值<br>    100% 100% 百分比，相对于所在的容器<br>    cover 以合适的比例把图片进行缩放（图片不会变形），用来覆盖整个容器<br>    contain 背景图包含在容器中，如果一边碰到容器边缘，另一边则不会覆盖<br>    …<br>background-clip:背景图片裁切<br>        border-box<br>        padding-box<br>        content-box</p><p>background-origin 设置背景图片的起始点<br>        border-box<br>        padding-box<br>        content-box</p><p>fiter</p><p>3 css3动画和变形（2D/3D）<br>transform: 变形  （变形不是动画）<br>        translate(x|y|z)    偏移<br>        scale   缩放<br>        rotate  旋转<br>        skew    倾斜<br>        matrix  矩阵（按照自己设定的矩阵公式实现变形）</p><pre><code>transform-style:preserve-3d 实现3d变形transform-origin 变形的起点</code></pre><p>3.1 过渡动画<br>transition:<br>            transition-proprty:all/width…哪些属性样式发生改变执行过渡动画效果，默认是all<br>            transition-duration: 过渡动画的时间<br>            transition-timing-function 动画运动的方式 linear(默认) ease ease-in ease-out ease-in-out cubic-bezier(执行自己设定的贝塞尔曲线)<br>            transition-delay 设置延迟的时间，默认是0<br>3.2 帧动画<br>animation:<br>            animation-name 运动轨迹的名称<br>            animation-duration: 运动时长<br>            animation-timing-function 运动方式，默认是ease<br>            animation-delay 延迟时间<br>            animation-iteration-count 运动次数 infinite无限次运动<br>            animation-fill-mode 运动完成后的状态（帧动画完成后，元素会默认回到起始位置，如果想让其停留在最后一帧的位置，设置为forwards, 还有其他值如backwards是当前动画如果有延迟时间，在等待时间内，元素处于帧动画的第一帧的位置；both是让帧动画同时具备forwards和backwards）</p><pre><code>@keyframes [轨迹名]{    设置运动轨迹    from{        //开始的样式    }    to{        //结束的样式    }    用百分比也行}</code></pre><p>4 css3中的新盒子模型</p><p>border-sizing:border-box|padding-box|content-box(default) 改变的就是css中设置的width和height到底代表的什么，一般都用border-box</p><p>columns: 多列布局</p><p>flex 弹性盒子模型</p><p>5， 一些其他的css3属性<br>perspective:视距，实现3d动画必用的属性<br>@media 媒体查询 实现响应式布局的一种方案<br>@font-face 导入字体图标</p><p>三、响应式布局开发<br>在不同尺寸的设备上都能良好的展示</p><p>公司中的产品形态：<br>    PC端<br>    PC+移动端 用同一套项目 简单的页面，例如产品介绍，公司展示类的官网等<br>    移动端（移动端设备差异较大，需要做响应式布局）<br>        公众号<br>        小程序<br>        嵌入到APP中的H5<br>        微信中分享的H5<br>        靠浏览器访问的H5<br>    RN(React Native)/ionic/cordova… JS开发app的框架，使用JS代码开发APP，最后框架会把代码转化为安卓和IOS需要的代码</p><pre><code>如何实现响应式开发    最常用的方案：REM等比例缩放响应式布局    做移动端H5开发，首先加meta标签    `&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;`    rem和px一样，都是单位，px是固定单位，rem是相对单位（相对于当前页面的根元素html的字体设定的单位）    html{        font-size:14px;/fontSize设置为多少，相当于一个rem相当于多少像素，所以做好设置为100px，之所以设置为100像素，就是为了方便计算rem和px的转换比例/    }    思路：我们开始给html的字体大小设置为100px,接下来我们写样式的时候，把所有的尺寸都用rem计算设定（测量出来的px值除以100就是应该设定的rem值），如果html的font-size不变，用rem和px一样，但是如果字体大小改变，也就是改变了rem和px之间的换算比例，那么之前所有用rem做单位的样式都会自动按照最新的比例进行缩放（实现了改动html的font-size,整个页面中的元素尺寸都跟着缩放了，牵一发而动全身）    真实项目中，设计师会给我们一套设计稿，（常用的尺寸： 640×1136，750*1334, 640*960...）,拿到设计稿后，我们严格按照设计稿中的尺寸去编写样式        html{            font-size:100px        }        接下来写样式，把测量出来的px都除以100变为rem,所有的单位基于rem来搞        =&gt;假设设计稿是750的，也就相当于750的设备下，1rem=100px        我们的页面运行在320的设备上，我们需要修改html的字体大小，以实现页面跟着整体样式缩放：320/750 ×100 =&gt;当前设备上html字体的大小</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在Chrome中页面首次加载的时候有事会出现以上报错：</span><br><span class="line"></span><br><span class="line">Uncaught（in promise）DOMException：play（）</span><br><span class="line"></span><br><span class="line">处理方法</span><br><span class="line"></span><br><span class="line">Open chrome://flags/#autoplay-policy</span><br><span class="line">Setting No user gesture is required</span><br><span class="line">Relaunch Chrome</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「super_XYQ」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https://blog.csdn.net/super_XYQ/article/details/83026792</span><br></pre></td></tr></table></figure><p>关于audio常用属性<br>duration 播放时间 单位s<br>currentTime 当前已经播放的时间 单位s<br>ended 是否已经播放完成<br>controls<br>autoplay是否自动播放<br>volume: 控制音量<br>paused 当前是否为暂停状态</p><p>方法<br>pause() 暂停<br>play() 播放</p><p>事件<br>canplay: 可以正常播放（播放过程中可能出现卡顿）<br>canplaythrough: 资源加载完毕，可以顺畅的播放<br>onended 已经播放完成<br>onloadedmetadata: 资源的基本信息已经加载完成<br>loadeddata 整个资源都已经加载完成<br>onpause 触发了暂停<br>onplay 触发了播放<br>onplaying 正在播放中</p><p>移动端使用click会有三百毫秒的延迟</p><p>3.1 viewport 视口<br>在PC端，我们开发的html页面运行在浏览器当中，浏览器有多宽（一般代表设备的宽度），html就有多宽，也就是在浏览器宽度的视口中渲染和呈现我们的页面。<br>移动端和PC端是有区别的，不管移动端设备（代指打开的浏览器）的宽度是多少，html页面的宽度是980（或者1024）=》导致的问题：如果在设备窗口中想把整个页面完全呈现出来（小窗口展示大页面），我们只能把大页面进行缩放，HTML页面缩放了，那么页面中所有内容都缩放了<br>【解决方案】</p><h2 id="只要让H5页面和手机的设备的宽度保持一致即可，就不会出现手机首先渲染页面的时候把页面缩放的事情了"><a href="#只要让H5页面和手机的设备的宽度保持一致即可，就不会出现手机首先渲染页面的时候把页面缩放的事情了" class="headerlink" title="只要让H5页面和手机的设备的宽度保持一致即可，就不会出现手机首先渲染页面的时候把页面缩放的事情了"></a>只要让H5页面和手机的设备的宽度保持一致即可，就不会出现手机首先渲染页面的时候把页面缩放的事情了</h2><h2 id="举个例子，页面中有一个宽度为600px的div-如果我们不添加这段代码，div会进行缩放，让整个内容显示在手机中，添加代码后，将不再进行缩放，以此来保证页面的可读性"><a href="#举个例子，页面中有一个宽度为600px的div-如果我们不添加这段代码，div会进行缩放，让整个内容显示在手机中，添加代码后，将不再进行缩放，以此来保证页面的可读性" class="headerlink" title="举个例子，页面中有一个宽度为600px的div,如果我们不添加这段代码，div会进行缩放，让整个内容显示在手机中，添加代码后，将不再进行缩放，以此来保证页面的可读性"></a>举个例子，页面中有一个宽度为600px的div,如果我们不添加这段代码，div会进行缩放，让整个内容显示在手机中，添加代码后，将不再进行缩放，以此来保证页面的可读性</h2><p>（当内容的宽度 超过 html的宽度时，会出现滚动条）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width initial-scale=1.0"</span>&gt;</span></span><br><span class="line">此meta标签就是在设置VP规则</span><br><span class="line">    width=device-width: 让html页面的宽度等于设备的宽度</span><br><span class="line">    initial-scale=1.0 初始缩放比例1：1（不让页面缩放）</span><br><span class="line">    user-scaleable=no 禁止用户手动缩放</span><br><span class="line">    maximum-scale=1.0 最大缩放比例</span><br><span class="line">    minimum-scale=1.0 最小缩放比例 =&gt; 部分安卓机上只设置user-scaleable是不起作用的，需要同这两个一起使用</span><br><span class="line">    height 设置页面高度，一般不用</span><br><span class="line">    。。。</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JS中动态设置VIEW PORT</span></span><br><span class="line"><span class="keyword">let</span> metav = <span class="built_in">document</span>.createElement(<span class="string">'meta'</span>);</span><br><span class="line">metaV.name=<span class="string">'viewport'</span>;</span><br><span class="line">metaV.content=<span class="string">'width=device-width, initial-scale=1.0'</span>;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(metaV);</span><br></pre></td></tr></table></figure><p>LayoutViewport: 布局视口，和开发css等相关<br>visual viewport: 手机视口<br>ideal viewport: 理想视口</p><p>HTML的宽度&gt;手机宽度: 页面整体缩放<br>页面内容宽度&gt;html页面的宽度：出现滚动条</p><p>真实项目开发中，一般是不允许出现滚动条的，想让他不出现滚动条，就要保证内容的宽度不会超过html页面的宽度<br>移动端开发手机设备宽度不一定，html页面的宽度不一定，所以内容的宽度一般也是不固定的（也就是百分比宽度），<br>移动端开发：外层盒子的宽度一般都是百分比设定的，很少有些固定值的（里面具体的小元素宽度可以固定），这就是流式响应式布局方案</p><p>3.2 平时处理的移动端项目<br>    1）PC端和移动端共用一套项目的（结构相对简单的：一般都是展示类的企业站）<br>        设计师一般只会给一套设计稿<br>        A: 先做PC端（设计师给的设计稿一般都是给PC端的）<br>        一般宽度都不是写死的，都是自适应的(具体情况有所不同)<br>        B：切换到手机端，使用@media(媒体查询) 把不同设备上不合适的样式进行修改<br>        <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    我们可以把@media理解为JS中的条件判断，在不同条件中使用不同的css样式进行渲染</span></span><br><span class="line"><span class="comment">    @media [媒体设备]  and (媒体条件) and (媒体条件) ...&#123;&#125;</span></span><br><span class="line"><span class="comment">            all 所有设备</span></span><br><span class="line"><span class="comment">            screen 所有屏幕设备</span></span><br><span class="line"><span class="comment">            print 打印机设备</span></span><br><span class="line"><span class="comment">            。。。</span></span><br><span class="line"><span class="comment">    手机上常用的设备尺寸</span></span><br><span class="line"><span class="comment">        苹果： 320、    375 、  414</span></span><br><span class="line"><span class="comment">        安卓： 320、    360、   480、   540、   640、  （ 760 ...）</span></span><br><span class="line"><span class="comment">        pad:   768*1024     1024*1366</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    @<span class="keyword">media</span> screen and (max-width:<span class="number">480px</span>)&#123;</span><br><span class="line">        //当前页面宽度小于等于480像素</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">media</span> screen and(orientation: portrait|landscape)&#123;</span><br><span class="line">        //portrait 竖屏</span><br><span class="line">        //landscape 横屏</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><pre><code>2）PC端和移动端是分开的两套不同项目        PC端单独做（做它的时候不需要考虑响应式）            =&gt;固定布局        移动端单独做（只需要考虑移动端的响应式适配即可）            =&gt;响应式布局                a: 依然可以基于@media来做，就是麻烦一些                b: 固定布局(viewport width=320px):按照设计稿把320尺寸的写好即可（所有的尺寸都是固定的，而且都是设计稿的一般【因为设计稿是大一倍的】），在其他的设备上，让320的页面居中展示即可                c: scale等比缩放布局（严格按照设计稿的尺寸来写样式，没有自适应的宽度，都是固定写死的，在其他设备上，首先获取设备的宽度，让其除以设计稿的宽度，然后让原始写好的页面按照这个比例整体缩小即可）                设计师给的移动端设计稿一般都是： 640*1136(980或者不定高度)、750*1334...                    ？为啥我们的设计稿都比参照手机大一倍：                    目的是保证我们切下来的素材资源图片是大图                    ？为啥要保证是大图                    因为很多手机都是二倍及三倍屏幕密度像素比（DPR）的                    scale缩放会导致的问题：比如字体变得模糊                d: rem 等比缩放，它是参考scale，只是用的rem单位来实现的整体缩放（严格按照设计稿的尺寸编写，但是一般宽度都让它自适应，其余的值可以写成固定值 -&gt; 在编写css样式的时候，我们把所有的px单位都换算成rem单位 -&gt; 当加载页面的时候根据当前屏幕的设备的尺寸/设计稿，根据比例动态调整rem和px的换算比例）                    rem是相对单位，是相对于根元素（html元素）的字体大小设定的单位                    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">10px</span>; <span class="comment">/*1rem = 10px, 浏览器都有自己默认的最小字体，例如谷歌是12px，所以准确来说，此处这样写相当于1rem=12p*/</span></span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="comment">/*换算比例过于麻烦*/</span></span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">100px</span>;<span class="comment">/*方便换算1rem=100px*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>                    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> HTML=<span class="built_in">document</span>.getElement,</span><br><span class="line">winW = HTML.clientWidth;</span><br><span class="line">HTML.style.fontSize = <span class="string">`<span class="subst">$&#123;winW<span class="regexp">/750 *100&#125;px`;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">/</span><span class="regexp">/重新调整html字体大小（重新调整rem的转换比例，这样以前所有以rem为单位的样式值都会按照最新的比例重新布局）</span></span></span></span><br></pre></td></tr></table></figure>                    e: css3中提供了flex-box伸缩盒子模型，基于这个属性，可以让某些效果处理起来更加的方便                    A &amp;&amp; D 是目前最常用的最长的响应式布局方案，以rem为主，以@media为辅，以flex为页面中某些部分的开发方式        设计师会给两套设计稿，PC端和移动端</code></pre><p>布局宽度：我们在CSS中写的宽度&lt;=&gt;屏幕大小关联的（和屏幕分辨率没有必然关系）</p><p>iphone4中布局宽度： 1px <em> 1px (盒子大小=&gt;我们看见的大小)，手机渲染的时候是按照2px </em> 2px的分辨率渲染的<br>DPR:屏幕像素密度比2.0(2倍屏幕或者高清屏幕)<br>如果1<em>1展示的是图片，手机是按照2</em>2大小的图片展示的（但是看到的大小还是1<em>1）,如果真实素材图片就是1</em>1的大小，图片在渲染的时候就会被拉伸，从而变得模糊，所以我们准备的图片都需要比实际看到的宽高大一倍（3倍屏幕需要大两倍）<br>即使给的是二倍的设计稿，但是部分手机的设备尺寸要大于设计稿的一半，有的手机是三倍DPR，这样就导致一个问题，部分图片还是会变得模糊一些，此时我们找设计师，单独把一张模糊的图片要一张大图即可。</p><p><strong>3d动画概念</strong><br>视距<br>perspective 尽量大<br>transform-style: perspective-3d;// 操作的元素设置3d属性<br>围绕着X Y  Z 轴顺时针旋转为正</p><p>四、微信二次开发（小程序） =&gt; Hybrid混合APP开发</p><p>五、移动端事件</p><p>六、移动端常用的插件、类库、框架</p><p>tips:<br>1,background-size: contain/cover/值<br>在设置背景的大小时，contain表示的意思是图片完全包含在元素内，如果图片的宽度或者高度超过了元素的宽度或者高度，则先超过的一方与元素的值相同，另一方自适应;<br>cover的意思是图片要完全覆盖元素，图片的宽高按比例缩放，直到一方超出，另一方完全覆盖<br>值，值为具体的值时，按具体值的大小计算图片的宽高，为百分比时，按照元素的宽高乘以百分比计算图片的宽高</p><p>手指事件对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*         box.ontouchstart = function (ev) &#123;</span></span><br><span class="line"><span class="comment">            //console.log(ev);</span></span><br><span class="line"><span class="comment">            //TouchEvent手指事件对象</span></span><br><span class="line"><span class="comment">            // changedTouches</span></span><br><span class="line"><span class="comment">            //touches</span></span><br><span class="line"><span class="comment">            //手指操作集合，集合中记录了每一个操作的手指的相关信息（包含触发点的坐标位置）</span></span><br><span class="line"><span class="comment">            //touches记录的信息只有手指在屏幕上才有，也就是手指离开屏幕的时候，信息就消失了，</span></span><br><span class="line"><span class="comment">            //changedTouches本意上记录的是改变的值，即使手指离开，信息值也在</span></span><br><span class="line"><span class="comment">            //按下的时候记录手指的起始位置</span></span><br><span class="line"><span class="comment">            let point = ev.changedTouches[0];</span></span><br><span class="line"><span class="comment">            this.strX = point.clientX;</span></span><br><span class="line"><span class="comment">            this.strY = point.clientY;</span></span><br><span class="line"><span class="comment">            this.isMove = false;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        box.ontouchmove = function (ev) &#123;</span></span><br><span class="line"><span class="comment">            let point = ev.changedTouches[0];</span></span><br><span class="line"><span class="comment">            this.changeX = point.clientX - this.strX;</span></span><br><span class="line"><span class="comment">            this.changeY = point.clientY - this.strY;</span></span><br><span class="line"><span class="comment">            if (Math.abs(this.changeX) &gt; 10 || Math.abs(this.changeY) &gt; 10) &#123;</span></span><br><span class="line"><span class="comment">                this.isMove = true;</span></span><br><span class="line"><span class="comment">                </span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        box.ontouchend = function (ev) &#123;</span></span><br><span class="line"><span class="comment">            if (this.isMove) &#123;</span></span><br><span class="line"><span class="comment">                //滑动</span></span><br><span class="line"><span class="comment">                return;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            //点击</span></span><br><span class="line"><span class="comment">            console.log('我是点击操作');</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br></pre></td></tr></table></figure></p><p>swiper插件</p><p>Hybrid混合APP开发</p><p>1，前端做的都是H5页面 WebApp<br>-&gt;运行在浏览器中<br>-&gt;移动端不仅可以运行在浏览器中，还可以运行在AP中（例如：微信、自己公司的APP中）</p><p>【优点】<br>及时更新（不需要用户选择，我们只需要把服务器上的源文件更新，用户访问的永远是最新的）<br>跨平台<br>【弊端】<br>不是直接运行在操作系统中的，是运行在浏览器或者APP中的，所以不能直接操作手机上的软硬件<br>运行模式 ：H5通知浏览器或者APP我们想做什么 -&gt; 浏览器调取手机的软硬件 -&gt; 浏览器把信息返回给H5<br>性能没有APP高<br>..<br>2，APP不是H5，它是原生的应用 NativeAPP<br>-&gt; IOS；object-c/swift<br>-&gt; 安卓： java-native</p><p>【优势】<br>    用户把安装包下载到手机上进行安装，后期程序是直接运行在手机操作系统当中的<br>        A：性能高<br>        B: 可以调取手机内置的软件或者硬件，例如调取摄像头、重力感应器、通讯录等【前提是需要用户同意】</p><p>【弊端】<br>    不能跨平台，一款产品需要两个团队开发两套不同的安装包<br>        A 成本大<br>        B 版本不统一<br>    不能及时更新<br>    苹果商店上传一款APP需要七天审核周期</p><p>3，Hybrid混合开发模式<br>把传统的IOS和安卓开发与H5开发结合在一起来做（微信公众号开发：把我们做的H5运行在微信APP中）</p><p>NativeApp提供一个供H5运行的环境 ‘web view’ （webkit内核）</p><p>H5和APP的通信 =&gt; jsBridge模式<br>微信APP把所有H5可以调取的方法和功能都注入到WEB VIEW的全局对象中<br>    webView有一个全局对象wx={},</p><p>h5运行在webview中，所以在js中可以使用wx.xx()完成方法的调用</p><p>4， ReactNative ionic 微信小程序 …</p><p>补充：<br>1，SEO 网络运营推广（搜索引擎的优化推广）<br>    目标：尽可能在搜索引擎中提升产品的权重（alex排名）</p><p>百度是一个搜索引擎，它养了个宠物“爬虫/蜘蛛”，他会让爬虫有规律得去你的网站进行内容的收录（收集到自己的词库中），当用户在引擎中输入关键词进行查询，引擎会到自己的词库中进行匹配，把匹配到的站点推荐展示</p><p>如果我们想做SEO优化，应该尽可能让引擎多收录一些关键词和内容<br>-&gt; 给当前的页面设置meta标签/title<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>news<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"news"</span>&gt;</span> <span class="comment">&lt;!-- 关键词 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'description'</span> <span class="attr">content</span>=<span class="string">"news"</span>&gt;</span> <span class="comment">&lt;!-- 网页描述 --&gt;</span></span><br></pre></td></tr></table></figure></p><p>-&gt; 网页中H1-H6这些标签的权重较高，尤其是h1, 我们尽可能把重要的关键词放到h1中 （语义化标签合理使用）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">''</span> <span class="attr">alt</span>=<span class="string">''</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">h1中的文字不需要展示给用户，但是我们还会写一些文字，主要是给爬虫看的（样式中让font-size等于0即可） img是不被收录的，但是alt中编写的可以被收录，所以img的alt属性一定要加，最好写一些关键词……</span><br></pre></td></tr></table></figure><p>-&gt; 前后端分离项目（数据有客户端JS获取和渲染）是不利于SEO优化的<br>使用JS做数据绑定，页面的源代码中是没有动态绑定的数据的，（但是用户在页面中可以看见内容），而搜索引擎的爬虫就是从源代码中进行抓取收录的（VUE和REACT都是JS做数据绑定的）<br>目前市场上大部分都是前后端分离的项目，也就是JS做数据绑定，由客户端渲染，但是还有一部分项目依然是传统的服务器端数据处理（非完全前后端分离项目）</p><p>2， SEM 百度竞价推广（千万不能信）</p><p>fontCreate 9.1</p><p>阿里云字体图标库</p><p>3,audio 知识<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">    AUDIO:音频标签</span><br><span class="line">    <span class="number">1</span>，h5中支持的音乐播放格式</span><br><span class="line">        MP3</span><br><span class="line">        ogg</span><br><span class="line">        wav</span><br><span class="line">    有的项目中，以上三种都不支持，会继续使用FLASH完成音频的播放&lt;object&gt;<span class="xml"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        m3u8 直播流</span><br><span class="line">    </span><br><span class="line">    <span class="number">2</span>, 常用属性</span><br><span class="line">        controls： 设置这个属性，使用浏览器默认的播放器播放 项目中一般都自己做播放器</span><br><span class="line">        autoplay: 自动播放</span><br><span class="line">        loop : 播放完成之后是否允许循环播放</span><br><span class="line">        preload: 资源预加载模式  </span><br><span class="line">            none(开始之后什么都不加载，播放的时候才加载)[常用]</span><br><span class="line">            metadata（加载一些基础信息）</span><br><span class="line">            auto加载页面开始就加载资源</span><br><span class="line"></span><br><span class="line">    video里面有一个属性poster,用来设置视频的封面</span><br><span class="line">        </span><br><span class="line"> --&gt;</span><br><span class="line">&lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">audio</span>&gt;</span></span></span><br><span class="line">    &lt;source src="xxx.mp3" type="audio/mpeg"&gt;</span><br><span class="line">    &lt;source src="xxx.ogg" type="audio/mpeg"&gt;</span><br><span class="line">    &lt;source src="xxx.wav" type="audio/mpeg"&gt;</span><br><span class="line">        当前浏览器版本过低，不支持AUDIO播放</span><br><span class="line">&lt;/audio&gt; --&gt;</span><br><span class="line">&lt;audio src="img/myDream.m4a" controls autoplay&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure></p><p>4，图片的模糊度<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:blur(2px)</span>;</span><br></pre></td></tr></table></figure></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>1，less文件引入代码正确，但是 doesn’t work<br>Reason: 浏览器使用时是用ajax来拉取less,因此直接在本机文件系统中（file://…开头）或者跨域的情况下会拉取不到less文件<br>Resolve: 安装一个本地web服务器即可，选择有多种，比如appach服务器，nodejs web服务器, vscode本身有模块可以调用，安装打开即可，所以，我自己选择的这个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//在全局中安装 </span><br><span class="line">npm install -g live-server</span><br><span class="line"></span><br><span class="line">// 在工作的项目中启动</span><br><span class="line">live-server</span><br></pre></td></tr></table></figure></p><p>也可以搜索vscode的扩展资源中搜索liveserver来安装使用，安装好后直接右键文件打开即可</p><p>2, 关于padding 和 position的关系<br>盒子A和B，B是A的子元素，A的positiion:relative，B的position:absolute的时候，是相对于A的左上角定位，是盒子的左上角，而不是内容的左上角。<br>比如: A {<br>    position:relative;<br>    padding:10px;<br>    width:40px;<br>    height:60px;<br>}<br>我们想让B在A的中间位置，定位就应该是<br>B{<br>    position:absolute;<br>    width:10px;<br>    height:12px;<br>    top:(60+10<em>2)/2-12/2=34px;<br>    left: (40+10</em>2)/2-10/2==25px;<br>}</p><p>3, animation: name duration 参数duration必须要加单位s</p><p>4, darken(green， 20%) 深绿， lighten(green， 20%)浅绿<br>基于这两个less函数，我们可以给按钮设置按下时的状态</p><p>5, 父级元素的高度不定义的时候，它呈现出来的高度是子集元素中relative的元素的高度的累加之和，而不包括他们相对定位的高度<br>eg<br>A中有元素B、C、D<br>B{<br>    position:absolute;<br>    top:2px;<br>    left:3px;<br>    width:10px;<br>    height:20px;<br>}<br>C{<br>    position:relative;<br>    top:3px;<br>    left:7px;<br>    width:10px;<br>    height:7px;<br>}<br>D{<br>    position:relative;<br>    top:9px;<br>    left:7px;<br>    width:20px;<br>    height:17px;<br>}<br>A的高度是7+17=24px;</p><p>当有padding和margin值的时候，padding会被计算在内，margin值的最上和最下有一特殊情况，就是当A元素没有border，padding等值的时候，最上和最下的margin是不计算在内的。如果有border,padding,则计算在内。<br>·</p><p>6, 情景再现：当页面改变尺寸的时候，小于640的时候能获取到html的fontSize,大于640的时候获取不到。</p><p>A: 我们在定义Html的fontSize的时候如果写在css文件里，而不是写在行内，则js通过style.fontSize的时候获取不到，只能通过其他方式获得。所以我们在写js计算屏幕宽度来定义根元素的fontSize时，一定要把所有的情况，都加上document.documentElement.style.fontSize=xxx,而不是直接return;</p><p>7,String.prototype.replace的运行机制<br>String.prototype.replace(pattern, function(match, $1, …, $n, offset, string){});<br>str1、str2是两个字符串，str1表示被替换的内容，str2表示替换的内容<br>str1也可以使用正则表达式，并把匹配的内容作为参数传递给后面的函数，函数最终要返回一个字符串，当作替换内容，去替换str1</p><p>8, filter, find 在javascript和jQuery中的用途是不同的<br>在javascript中，<br>    find是返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined<br>    filter是返回数组中所有满足条件的元素组成的新数组，否则返回空数组<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">6</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr,newArr); <span class="comment">// [7,8,9]</span></span><br><span class="line"><span class="keyword">let</span> num = arr.find(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">6</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//7</span></span><br></pre></td></tr></table></figure></p><p>在jQuery中，<br>    find是找到所有后代中符合条件的DOM元素，返回jQuery对象 find(selector);<br>    filter是筛选所有jQ对象中，返回符合条件的jq对象 filter(selector);</p><p>9, _.intersection(arr1,arr2)返回一个新的数组，内容是arr1和arr2的交集</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要是移动端的相关知识，包括h5标签，css3，响应式布局等&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>发布订阅</title>
    <link href="https://abluecup.github.io/2019/11/19/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    <id>https://abluecup.github.io/2019/11/19/发布订阅/</id>
    <published>2019-11-19T07:23:43.000Z</published>
    <updated>2020-04-23T05:06:52.335Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是对发布订阅设计模式JQ中发布订阅的介绍<br><a id="more"></a></p><h2 id="发布订阅设计模式（观察者模式）"><a href="#发布订阅设计模式（观察者模式）" class="headerlink" title="发布订阅设计模式（观察者模式）"></a>发布订阅设计模式（观察者模式）</h2><p>Publish and subscribe<br>思想：准备一个容器，把到达指定时候要处理的事情事先一一增加到容器中当中（我们把这个叫做发布计划，并且向计划表总订阅方法），当到达指定时间点，通知容器中的方法依次执行即可</p><h3 id="jQ中的发布订阅"><a href="#jQ中的发布订阅" class="headerlink" title="jQ中的发布订阅"></a>jQ中的发布订阅</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> $plan = $.Callbacks();<span class="comment">//=&gt;创建一个空的计划表：空容器 =&gt; $plan</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $plan.fire(<span class="number">10</span>,<span class="number">20</span>); <span class="comment">// fire：通知容器中的方法按照顺序依次执行</span></span><br><span class="line">    <span class="comment">// 10,20表示执行容器中的方法时，每一个方法都传递给两个参数10和20</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">$plan.add(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//向容器中添加方法</span></span><br><span class="line">&#125;);</span><br><span class="line">$plan.remove(</span><br><span class="line">    fn <span class="comment">// 向容器中移除方法 </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">~<span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Subscribe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="comment">//创建一个容器（每一个实例都有一个自己独有的容器，管理自己需要执行的方法即可）</span></span><br><span class="line">      <span class="keyword">this</span>.pond = [];<span class="comment">//给实例挂载一个属性，里面盛放着需要执行的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 向计划表中增加方法：去重</span></span><br><span class="line">    add(fn) &#123;</span><br><span class="line">      <span class="comment">//fn : 我们需要增加的方法</span></span><br><span class="line">      <span class="keyword">let</span> pond = <span class="keyword">this</span>.pond;</span><br><span class="line">      <span class="keyword">let</span> isExist = <span class="literal">false</span>;</span><br><span class="line">      pond.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        item === fn ? isExist = <span class="literal">true</span> : <span class="literal">null</span>;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      !isExist ? pond.push(fn) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(fn) &#123;</span><br><span class="line">      <span class="comment">//从计划表中移除方法</span></span><br><span class="line">      <span class="keyword">let</span> pond = <span class="keyword">this</span>.pond;</span><br><span class="line">      pond.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item === fn) &#123;</span><br><span class="line">          pond.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知计划表中的方法依次执行</span></span><br><span class="line">    <span class="comment">// 如果传递参数信息了，把这些参数一次赋值给执行的每一个方法</span></span><br><span class="line">    fire(...arg)&#123;</span><br><span class="line">        <span class="keyword">let</span> pond = <span class="keyword">this</span>.pond;</span><br><span class="line">        pond.forEach(<span class="function">(<span class="params">item, index</span>)=&gt;</span>&#123;</span><br><span class="line">            item(...arg);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">window</span>.Subscribe = Subscribe;</span><br><span class="line">&#125;(<span class="built_in">window</span>);</span><br><span class="line"><span class="keyword">let</span> subscribe = <span class="keyword">new</span> Subscribe();</span><br><span class="line">subscribe.add();</span><br><span class="line">subscribe.remove();</span><br><span class="line">subscribe.fire();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是对发布订阅设计模式JQ中发布订阅的介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>拖拽</title>
    <link href="https://abluecup.github.io/2019/10/30/%E6%8B%96%E6%8B%BD/"/>
    <id>https://abluecup.github.io/2019/10/30/拖拽/</id>
    <published>2019-10-30T06:04:32.000Z</published>
    <updated>2020-04-23T05:08:46.384Z</updated>
    
    <content type="html"><![CDATA[<p>本篇准备收录但是还没收录拖拽的代码<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇准备收录但是还没收录拖拽的代码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>事件委托</title>
    <link href="https://abluecup.github.io/2019/09/29/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    <id>https://abluecup.github.io/2019/09/29/事件委托/</id>
    <published>2019-09-29T06:14:30.000Z</published>
    <updated>2020-04-23T05:05:45.336Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍了事件委托机制，并收录了无限菜单代码。<br><a id="more"></a></p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>也叫事件代理：利用事件的冒泡传播机制，如果一个容器的后代元素当中，很多元素的点击或其他行为都要做一些处理,此时我们不需要一个个获取绑定了，我们只需要给容器的click绑定方法，这样不管点击的是哪一个后代元素，都会把容器的click行为触发，并把对应的方法执行，根据事件源，我们可以知道点击的是谁，从而做不同的事情。</p><p>一个个获取元素，然后绑定事件的方式，不仅麻烦，而且性能消耗比较大。当我们给容器绑定事件的时候，不管点击的是后代中的水，绑定的方法都会执行，而且ev事件对象中记录了事件源<br><code>let target = ev.target || ev.srcElement</code><br>事件委托这种处理方式，比一个个的事件绑定，性能上提高50%左右，而且需要操作的元素越多，性能提高越大</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Event Delegate Navigation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/reset.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        html body&#123;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:lightseagreen</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.menuBox</span> &#123;</span></span><br><span class="line"><span class="undefined">            margin: 20px auto;</span></span><br><span class="line"><span class="undefined">            width: 700px;</span></span><br><span class="line"><span class="undefined">            height: 500px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menuBox</span> <span class="selector-class">.navBox</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menuBox</span> <span class="selector-class">.navBox</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 50px;</span></span><br><span class="line"><span class="undefined">            line-height: 50px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menuBox</span> <span class="selector-class">.navBox</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="undefined">            padding: 0 10px;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            font-size: 16px;</span></span><br><span class="line"><span class="undefined">            text-decoration: none;</span></span><br><span class="line"><span class="undefined">            background: lightgray;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="comment">/* .menuBox .navBox ul li a:hover &#123;</span></span></span><br><span class="line"><span class="undefined">            background: burlywood;</span></span><br><span class="line"><span class="undefined">        &#125; */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.detailsBox</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            background: rgb(218, 242, 243);</span></span><br><span class="line"><span class="undefined">            width: 500px;</span></span><br><span class="line"><span class="undefined">            height: 500px;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menuBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navBox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航6<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航7<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航8<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航9<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航10<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detailsBox"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../jq/node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//基于事件委托给最外层盒子的mouseover方法，这样不管操作后代元素中的谁，方法都会执行</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> $detailsBox = $(<span class="string">'.detailsBox'</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'body'</span>).on(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> target = ev.target,</span></span><br><span class="line"><span class="undefined">                tag = target.tagName,</span></span><br><span class="line"><span class="javascript">                $target = $(target),</span></span><br><span class="line"><span class="undefined">                $pars = $target.parents();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 如果事件源是navBox下的a或者li,让detailsBox显示</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">// $target.css('background','orange');</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> flag = $pars.filter(<span class="string">'.navBox'</span>).length &gt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> ((tag===<span class="string">'A'</span> || tag ===<span class="string">'LI'</span>) &amp;&amp; flag) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> val = $target.text().match(<span class="regexp">/\d+/</span>);</span></span><br><span class="line"><span class="javascript">                $target.css(<span class="string">'background'</span>,<span class="string">'orange'</span>);</span></span><br><span class="line"><span class="javascript">                $detailsBox.show().html(<span class="string">`导航<span class="subst">$&#123;val&#125;</span>对应的内容`</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//如果事件源是detailsBox或者使它的后代元素，不做处理</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// if ($target.hasClass('detailsBox') || $pars.filter('detailsBox').length &gt; 0) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     return;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="undefined">            $detailsBox.hide();</span></span><br><span class="line"><span class="javascript">           <span class="comment">// $target.css('background','orange');</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        $detailsBox.on(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">            ev.stopPropagation();</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">".navBox li a"</span>).on(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="keyword">this</span>).css(<span class="string">'background'</span>,<span class="string">'lightgray'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="处理情况"><a href="#处理情况" class="headerlink" title="处理情况"></a>处理情况</h2><p>一个容器中，很多后代元素的点击行为都要处理一些事情，之前的思路是把需要操作的元素一一获取，然后再一一做事件绑定，在不同的方法中完成不同的需求：现在不用了，基于事件的冒泡传播，我们可以只给容器的CLICK事件绑定一个方法，这样不管以后点击的是容器中的哪一个后代元素，都会通过事件的冒泡传播机制，把容器的click行为触发，把绑定的方法执行，我们在方法执行的时候，根据时间对应项中的事件源（ev.target）来做不同的业务处理即可，这种机制即是事件委托机制。</p><p>1， 容器中很多后代元素的某个行为要进行操作，委托给容器处理是不错的选择<br>2， 元素是动态绑定的<br>3， 需求是除了某某某，剩下的操作都是做同样的事情（此时把点击行为的操作委托给body,事件源是某某某做什么，不是统一做什么）</p><h2 id="无限层级菜单"><a href="#无限层级菜单" class="headerlink" title="无限层级菜单"></a>无限层级菜单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menuBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- plus: +, minus:- --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>产品技术部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level2"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>产品小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>UI小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level3"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>UI设计师<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>UE体验师<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>开发小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level3"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level4"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>PC设备开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>移动设备开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>VR/AI设备开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>native-app开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>node开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>后台开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>服务器开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>公共技术研发团队<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>测试小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>运维小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- plus: +, minus:- --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>运维技术部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level2"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>产品小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>UI小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level3"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>UI设计师<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>UE体验师<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>开发小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level3"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level4"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>PC设备开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>移动设备开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>VR/AI设备开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>native-app开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>node开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>后台开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>服务器开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>公共技术研发团队<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>测试小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>运维小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../jq/node_modules/jquery/dist/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/tabox.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height  </span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin  </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border  </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> &#123;</span><br><span class="line">    <span class="attribute">width     </span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height    </span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow  </span>: auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom right, lightblue, lightgray)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">position  </span>: relative;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size  </span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="attribute">position  </span>: absolute;</span><br><span class="line">    <span class="attribute">left      </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top       </span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">width     </span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height    </span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../img/icon.png) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span><span class="selector-class">.plus</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">59px</span> -<span class="number">28px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span><span class="selector-class">.minus</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">42px</span> -<span class="number">29px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> <span class="selector-tag">ul</span><span class="selector-pseudo">:not(.level1)</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> $meunBox = $(<span class="string">'.menuBox'</span>);</span><br><span class="line">    $meunBox.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> target = ev.target,</span><br><span class="line">        $target = $(target),</span><br><span class="line">        tarTag = target.tagName;</span><br><span class="line">        <span class="comment">// 合并事件源：点击的是EM，我们让TARGET也等于它的弟弟SPAN，此时TARGET只有SPAN我们才处理，统一基于SPAN位置参照即可</span></span><br><span class="line">        <span class="keyword">if</span> (tarTag === <span class="string">'EM'</span>) &#123;</span><br><span class="line">            $target = $target.next();</span><br><span class="line">            target = $target[<span class="number">0</span>];</span><br><span class="line">            tarTag = target.tagName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只有tarTag是span，我们才会处理</span></span><br><span class="line">        <span class="keyword">if</span> (tarTag === <span class="string">'SPAN'</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> $ul = $target.next(<span class="string">'ul'</span>),</span><br><span class="line">            $em = $target.prev(<span class="string">'em'</span>);</span><br><span class="line">            <span class="comment">//基于jQ获取的结果一般都是jq对象，即使没有获取到元素也是一个length为零的空对象，</span></span><br><span class="line">            <span class="comment">//而不是null，所以 if($ul)&#123;&#125;,这样算存在不行</span></span><br><span class="line">            <span class="keyword">if</span>($ul.length === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">// 没有下一级结构什么都不做，有下一级结构控制显示和隐藏</span></span><br><span class="line">            <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>&#123;</span><br><span class="line">                $ul.stop().slideToggle(<span class="number">300</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    resolve();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// EM的样式类名如果是plus,说明当前是折叠的，我们应当让其展开，反之，让其折叠起来</span></span><br><span class="line">            <span class="keyword">if</span>($em.hasClass(<span class="string">'plus'</span>))&#123;</span><br><span class="line">                $em.addClass(<span class="string">'minus'</span>).removeClass(<span class="string">'plus'</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $em.addClass(<span class="string">'plus'</span>).removeClass(<span class="string">'minus'</span>);</span><br><span class="line">                <span class="comment">// 外层收起里面的小层级也都收起</span></span><br><span class="line">                promise.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    $ul.find(<span class="string">'ul'</span>).css(<span class="string">'display'</span>,<span class="string">'none'</span>);</span><br><span class="line">                    $ul.find(<span class="string">'em'</span>).removeClass(<span class="string">'minus'</span>).addClass(<span class="string">'plus'</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍了事件委托机制，并收录了无限菜单代码。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图片跟随</title>
    <link href="https://abluecup.github.io/2019/09/29/%E5%9B%BE%E7%89%87%E8%B7%9F%E9%9A%8F/"/>
    <id>https://abluecup.github.io/2019/09/29/图片跟随/</id>
    <published>2019-09-29T05:26:45.000Z</published>
    <updated>2019-09-29T06:57:30.974Z</updated>
    
    <content type="html"><![CDATA[<p>本片收录了图片跟随的代码<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/reset.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/magnifier.css"</span>&gt;</span></span><br><span class="line">    .container&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin:20px auto;</span><br><span class="line">    width: 462px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.container .imgBox li&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 75px;</span><br><span class="line">    border:1px solid #eee;</span><br><span class="line">    margin-right: 18px;</span><br><span class="line">    cursor: move;</span><br><span class="line">&#125;</span><br><span class="line">.container .imgBox li:nth-last-child(1)&#123;</span><br><span class="line">    margin-right: 0;</span><br><span class="line">&#125;</span><br><span class="line">.container .mark&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br><span class="line">.container .mark img&#123;</span><br><span class="line">    display:block;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &lt;!-- </span></span><br><span class="line"><span class="undefined">    方案一：</span></span><br><span class="line"><span class="undefined">        每一个li中都有一个大盒子，大盒子中存放的是大图，开始是隐藏的，</span></span><br><span class="line"><span class="undefined">        鼠标进入到li中，让其显示，并且让他的位置跟随鼠标的位置改变即可</span></span><br><span class="line"><span class="undefined">        ，鼠标离开Li，让自己的大盒子小时即可（类似于放大镜中small-box中出现mark）</span></span><br><span class="line"><span class="undefined">    方案二：</span></span><br><span class="line"><span class="undefined">        只有一个大盒子（可以在JS中动态创建，也可以事先写好，控制显示隐藏），鼠标进入任意一个li,</span></span><br><span class="line"><span class="undefined">        都让大盒子出来并且大盒子中存放的图片根据当前进入的Li动态改变，</span></span><br><span class="line"><span class="undefined">        同样实现鼠标移动，大盒子也跟着移动</span></span><br><span class="line"><span class="undefined"> --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"imgBox clearfix"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple_1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple_2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple_4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &lt;!-- </span></span><br><span class="line"><span class="undefined">            在Js中根据需求动态创建</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple_1_bigger.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">            如果小图和大图在名字上没有固定的规则，我们把大图地址都已自定义属性的方法存储起来</span></span><br><span class="line"><span class="undefined">            ，后期需要展示大图的时候，从自定义属性获取即可</span></span><br><span class="line"><span class="undefined">            有固定的规则，我们完全可以不采用自定义属性的方式，而是基于规则自己处理和匹配即可</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple_1.jpg"</span> <span class="attr">data-big</span>=<span class="string">"img/apple_1_bigger.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="undefined">         --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery-1.11.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="undefined">        (function($)&#123;</span></span><br><span class="line"><span class="undefined">            let</span></span><br><span class="line"><span class="undefined">            $container = $('.container'),</span></span><br><span class="line"><span class="undefined">            $imgList = $(".container&gt;.imgBox&gt;li"),</span></span><br><span class="line"><span class="undefined">            $mark = null;</span></span><br><span class="line"><span class="undefined">            $imgList.on('mouseenter', function(ev)&#123;</span></span><br><span class="line"><span class="undefined">                //创建mark，根据经过的Li中的小图片，动态管控mark中的大图片</span></span><br><span class="line"><span class="undefined">                let $src = $(this).children('img').attr('src');</span></span><br><span class="line"><span class="undefined">                $src = $src.replace(/_(\d+)/g,'_$1_bigger');</span></span><br><span class="line"><span class="undefined">                if (!$mark) &#123;</span></span><br><span class="line"><span class="xml">                    $mark = $(` <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;$src&#125;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`);</span></span><br><span class="line"><span class="undefined">                    $container.append($mark);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;).on('mouseleave',function(ev)&#123;</span></span><br><span class="line"><span class="undefined">                if ($mark) &#123;</span></span><br><span class="line"><span class="undefined">                    $mark.remove();</span></span><br><span class="line"><span class="undefined">                   $mark = null;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;).on('mousemove', function(ev)&#123;</span></span><br><span class="line"><span class="undefined">                // 根据鼠标的位置计算出mark的位置</span></span><br><span class="line"><span class="undefined">                let &#123;top:conTop, left:conLeft&#125;=$container.offset(),</span></span><br><span class="line"><span class="undefined">                curL = ev.pageX - conLeft + 20,</span></span><br><span class="line"><span class="undefined">                curT = ev.pageY - conTop + 20;</span></span><br><span class="line"><span class="undefined">                $mark.css(&#123;</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">top</span><span class="selector-pseudo">:curT</span>,</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">left</span><span class="selector-pseudo">:curL</span></span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;)(jQuery);</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本片收录了图片跟随的代码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>放大镜效果</title>
    <link href="https://abluecup.github.io/2019/09/26/%E6%94%BE%E5%A4%A7%E9%95%9C%E6%95%88%E6%9E%9C/"/>
    <id>https://abluecup.github.io/2019/09/26/放大镜效果/</id>
    <published>2019-09-26T02:26:32.000Z</published>
    <updated>2019-09-30T07:15:58.502Z</updated>
    
    <content type="html"><![CDATA[<p>本篇收录了放大镜功能的原理和代码<br><a id="more"></a><br><img src="/2019/09/26/放大镜效果/放大镜.png" alt="原理图示"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/reset.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/magnifier.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"magnifierBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"smallBox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bigBox"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"magnifier-Box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"smallBox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bigBox"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery-1.11.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/magnifier.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">                 <span class="keyword">var</span> $magniferBox = $(<span class="string">'.magnifierBox'</span>),</span></span><br><span class="line"><span class="javascript">                    $smallBox = $magniferBox.find(<span class="string">'.smallBox'</span>),</span></span><br><span class="line"><span class="javascript">                    $mark = $smallBox.find(<span class="string">'.mark'</span>),</span></span><br><span class="line"><span class="javascript">                    $bigBox = $magniferBox.find(<span class="string">'.bigBox'</span>),</span></span><br><span class="line"><span class="javascript">                    $bigImg = $bigBox.find(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="undefined">                Magnifier($smallBox, $mark, $bigBox, $bigImg, 3);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// Magnifier(smallBox, mark, bigBox, bigImg, proportion)</span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> $magniferBox1 = $(<span class="string">'.magnifier-Box'</span>),</span></span><br><span class="line"><span class="javascript">                    $smallBox1 = $magniferBox1.find(<span class="string">'.smallBox'</span>),</span></span><br><span class="line"><span class="javascript">                    $mark1 = $smallBox1.find(<span class="string">'.mark'</span>),</span></span><br><span class="line"><span class="javascript">                    $bigBox1 = $magniferBox1.find(<span class="string">'.bigBox'</span>),</span></span><br><span class="line"><span class="javascript">                    $bigImg1 = $bigBox1.find(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="undefined">                Magnifier($smallBox1, $mark1, $bigBox1, $bigImg1, 3);  </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.magnifierBox</span>,<span class="selector-class">.magnifier-Box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.magnifierBox</span> <span class="selector-class">.smallBox</span>, <span class="selector-class">.magnifierBox</span> <span class="selector-class">.bigBox</span>,<span class="selector-class">.magnifier-Box</span> <span class="selector-class">.smallBox</span>, <span class="selector-class">.magnifier-Box</span> <span class="selector-class">.bigBox</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.magnifierBox</span> <span class="selector-class">.smallBox</span> <span class="selector-tag">img</span>,<span class="selector-class">.magnifier-Box</span> <span class="selector-class">.smallBox</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.magnifierBox</span> <span class="selector-class">.smallBox</span> <span class="selector-class">.mark</span>,<span class="selector-class">.magnifier-Box</span> <span class="selector-class">.smallBox</span> <span class="selector-class">.mark</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>:<span class="number">10</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e01d20</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity=30);</span><br><span class="line">    <span class="attribute">cursor</span>: move;    </span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.magnifierBox</span> <span class="selector-class">.bigBox</span> <span class="selector-tag">img</span>,<span class="selector-class">.magnifier-Box</span> <span class="selector-class">.bigBox</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1 鼠标进入和离开 small-box, 控制mark以及bigbox的显示和隐藏</span></span><br><span class="line"><span class="comment"> * 2 控制mark在small box中的移动，但是不能超过边界；</span></span><br><span class="line"><span class="comment"> * 3 当Mark在smallbox中移动的时候，根据MARK移动的距离，计算出BIG-IMG在BIGBOX中移动的距离（反向三倍，x/y轴都是三倍整体9倍）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* $(function () &#123;</span></span><br><span class="line"><span class="comment">    var $magniferBox = $('.magnifierBox'),</span></span><br><span class="line"><span class="comment">        $smallBox = $magniferBox.find('.smallBox'),</span></span><br><span class="line"><span class="comment">        $mark = $smallBox.find('.mark'),</span></span><br><span class="line"><span class="comment">        $bigBox = $magniferBox.find('.bigBox'),</span></span><br><span class="line"><span class="comment">        $bigImg = $bigBox.find('img');</span></span><br><span class="line"><span class="comment">    // 鼠标进入和离开 small-box, 控制mark以及bigbox的显示和隐藏</span></span><br><span class="line"><span class="comment">    $smallBox.on('mouseenter', function (ev) &#123;</span></span><br><span class="line"><span class="comment">        $mark.add($bigImg).show();</span></span><br><span class="line"><span class="comment">        computedMark(ev);// 刚进入的时候计算mark的位置</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">        .on('mouseleave', function () &#123; $mark.add($bigImg).hide(); &#125;)</span></span><br><span class="line"><span class="comment">        .on('mousemove', function (ev) &#123;</span></span><br><span class="line"><span class="comment">            //jquery中的EV已经是兼容所有浏览器了（JQ内部处理了），我们只需要按照标准浏览器的属性使用即可</span></span><br><span class="line"><span class="comment">            computedMark(ev);// 鼠标在盒子中，随时计算mark的位置</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">    console.log($mark);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 鼠标在SMALL-BOX </span></span><br><span class="line"><span class="comment">    function computedMark(ev) &#123;</span></span><br><span class="line"><span class="comment">        var offsetObj = $smallBox.offset(),</span></span><br><span class="line"><span class="comment">            curL = ev.pageX - offsetObj.left - $mark.outerWidth() / 2,</span></span><br><span class="line"><span class="comment">            curT = ev.pageY - offsetObj.top - $mark.outerHeight() / 2;</span></span><br><span class="line"><span class="comment">        var minL = 0,</span></span><br><span class="line"><span class="comment">            minT = 0,</span></span><br><span class="line"><span class="comment">            maxL = $smallBox.outerWidth() - $mark.outerWidth(),</span></span><br><span class="line"><span class="comment">            maxT = $smallBox.outerHeight() - $mark.outerHeight();</span></span><br><span class="line"><span class="comment">        curL = curL &lt; minL ? minL : (curL &gt; maxL ? maxL : curL);</span></span><br><span class="line"><span class="comment">        curT = curT &lt; minT ? minT : (curT &gt; maxT ? maxT : curT);</span></span><br><span class="line"><span class="comment">        $mark.css(&#123;</span></span><br><span class="line"><span class="comment">            top: curT,</span></span><br><span class="line"><span class="comment">            left: curL</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        $bigImg.css(&#123;</span></span><br><span class="line"><span class="comment">            top: -3 * curT,</span></span><br><span class="line"><span class="comment">            left: -3 * curL</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">&#125;); */</span></span><br><span class="line"></span><br><span class="line">~<span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> utils = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">computedMark</span>(<span class="params">smallBox, mark, bigBox, bigImg, proX,proY,ev</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> offsetObj = smallBox.offset(),</span><br><span class="line">                curL = ev.pageX - offsetObj.left - mark.outerWidth() / <span class="number">2</span>,</span><br><span class="line">                curT = ev.pageY - offsetObj.top - mark.outerHeight() / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">var</span> minL = <span class="number">0</span>,</span><br><span class="line">                minT = <span class="number">0</span>,</span><br><span class="line">                maxL = smallBox.outerWidth() - mark.outerWidth(),</span><br><span class="line">                maxT = smallBox.outerHeight() - mark.outerHeight();</span><br><span class="line">            curL = curL &lt; minL ? minL : (curL &gt; maxL ? maxL : curL);</span><br><span class="line">            curT = curT &lt; minT ? minT : (curT &gt; maxT ? maxT : curT);</span><br><span class="line">            mark.css(&#123;</span><br><span class="line">                top: curT,</span><br><span class="line">                left: curL</span><br><span class="line">            &#125;);</span><br><span class="line">            bigImg.css(&#123;</span><br><span class="line">                top: -proX * curT,</span><br><span class="line">                left: -proY * curL</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">computedMark</span>:computedMark&#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Magnifier</span>(<span class="params">smallBox, mark, bigBox, bigImg, proX, proY</span>)</span>&#123;</span><br><span class="line">        smallBox.on(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">            mark.add(bigImg).show();</span><br><span class="line">            utils.computedMark(smallBox, mark, bigBox, bigImg, proX, proY, ev);</span><br><span class="line">        &#125;).on(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            mark.add(bigImg).hide();</span><br><span class="line">        &#125;).on(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">            utils.computedMark(smallBox, mark, bigBox, bigImg, proX, proY, ev);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="built_in">window</span>.Magnifier = Magnifier;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>在大盒子嵌套小盒子的操作中，我们不建议使用mouseover的，因为一方面存在冒泡传播机制，另一方面，从大盒子进入到小盒子，它是按照离开大盒子算的</p><p><img src="/2019/09/26/放大镜效果/aa.png" alt="enter和over的区别"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇收录了放大镜功能的原理和代码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>事件</title>
    <link href="https://abluecup.github.io/2019/09/20/%E4%BA%8B%E4%BB%B6/"/>
    <id>https://abluecup.github.io/2019/09/20/事件/</id>
    <published>2019-09-20T09:29:58.000Z</published>
    <updated>2020-04-23T05:04:38.947Z</updated>
    
    <content type="html"><![CDATA[<p>事件是一件事情或者一个行为（对于元素来说，它的很多事件都是天生自带的），只要我们去操作这个元素，就会触发这些行为<br>“事件是天生自带的行为，我们操作元素，就会触发相关行为”<br><a id="more"></a></p><h2 id="什么是事件？"><a href="#什么是事件？" class="headerlink" title="什么是事件？"></a>什么是事件？</h2><p>事件就是一件事情或者一个行为（对于元素来说，它的很多事件都是天生自带的），只要我们去操作这个元素，就会触发这些行为<br>“事件是天生自带的行为，我们操作元素，就会触发相关行为”</p><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>给元素天生自带的事件行为绑定方法，当事件触发，会把相应的行为执行。<br>    1, DOM 0级事件绑定： [element].onxxx=function(){};<br>    2, DOM 2级事件绑定： [element].addEventListener(‘xxx’, function(){});<br>                        [element].attachEvent(‘onxxx’,function(){}); [IE6-8]<br>            attachEvent只能存在于IE5-10中， addEventListener存在于IE9及以上</p><pre><code>目的：给当前元素的某个事件绑定方法（不管是基于DOM0还是DOM2）,都是为了触发元素的相关行为的时候，能做点事情（也就是把绑定的方法执行），不仅把方法执行了，而且浏览器还给方法穿了一个实参信息===&gt; 这个值就是事件对象</code></pre><h2 id="元素天生自带的事件"><a href="#元素天生自带的事件" class="headerlink" title="元素天生自带的事件"></a>元素天生自带的事件</h2><h3 id="常用的元素天生自带的事件"><a href="#常用的元素天生自带的事件" class="headerlink" title="常用的元素天生自带的事件"></a>常用的元素天生自带的事件</h3><p>【鼠标事件】<br>        click : 点击（PC端是点击，移动端代表单击[移动端使用click会有300毫秒延迟]）<br>        dblclick: 双击<br>        mouseover: 鼠标经过<br>        mouseout:   鼠标移出<br>        mouseenter:  鼠标进入<br>        mouseleave:  鼠标离开<br>        mousemove: 鼠标移动<br>        mousedown:  鼠标按下（左右键都起作用，它是按下即触发，<br>                        click是按下抬起才触发，先触发down和up,然后才触发click）<br>        mouseup: 鼠标抬起<br>        mousewheel:鼠标滚轮滚动</p><p>【键盘事件】<br>        keydown 键盘按下<br>        keyup   键盘抬起<br>        keypress 和keydown类似，keydown返回的是键盘码，keypress返回的是ASCII码值，一般不用<br>        input:由于PC端有物理键盘，可以监听到键盘的按下和抬起，但是移动端是虚拟的键盘，所以Keydown和keyup在大部分手机上都没有，我们使用input事件统一代替他们</p><p>【表单元素事件】<br>        focus:获取焦点<br>        blur: 失去焦点<br>        change: 内容改变</p><p>【其他常用事件】<br>        load:加载完成<br>        unload: 页面关闭<br>        beforeunload: 关闭之前<br>        scroll:滚动条滚动事件<br>        resize:大小改变事件 window.onresize=function(){};浏览器窗口大小改变，会触发这个事件</p><p>【移动端手指事件】<br>        touchstart: 手指按下<br>        touchmove: 手指移动<br>        touchend: 手指移开<br>        touchcancel: 因为意外事故导致手指操作失误<br>        [gesture] 指的是多手指操作<br>        gesturestart: 多手指按下<br>        gesturechange: 手指改变<br>        gestureend:手指离开</p><p>[H5中的audio/video音视频事件]<br>        canplay:可以播放（播放过程中可能出现由于资源没有加载完成，导致的卡顿）<br>        canplaythrough: 资源加载完成，可以正常无障碍播放<br>        …</p><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>给当前元素的某个事件绑定方法（不管是基于DOM0还是DOM2）,都是为了触发元素的相关行为的时候，能做点事情（也就是把绑定的方法执行），不仅把方法执行了，而且浏览器还给方法穿了一个实参信息===&gt; 这个值就是事件对象；根据操作的不同，事件对象又分为： MouseEvent KeyBoardEvent touchEvent 普通event对象<br>    事件对象中记录了很多属性名和属性值，这些信息中包含了当前操作的基础信息，例如：鼠标点击位置的X/Y坐标，鼠标点击的是谁（事件源）等信息<br>    1 鼠标事件对象的信息<br>    ev.target =&gt; 事件源（操作的是哪个元素）<br>    ev.clientX/ ev.clientY =&gt; 当前鼠标触发点距离当前窗口左上角（不是当前元素左上角）的横纵坐标值<br>    ev.pageX/ev.pageY =&gt; 当前鼠标触发点距离body左上角的横纵坐标值<br>    ev.preventDefault(): 阻止默认行为<br>    ev.stopPropagation(): 阻止事件的冒泡传播<br>    ev.type: 当前事件的类型 ‘click’<br>    2 键盘对象keyBoardEvent<br>    ev.code: 当前按键’KeyE’<br>    ev.key: 当前按键 ‘e’<br>    ev.which/ev.keyCode: 当前按键的键盘码 69 兼容问题</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code = ev.which || ev.keyCode;</span><br></pre></td></tr></table></figure></code></pre><p>2.1 常用键盘码<br>    左-上-右-下： 37-38-39-40<br>    Backspace:8<br>    Enter:13<br>    Space: 32<br>    Delete: 46<br>    Shift: 16<br>    Alt: 18<br>    Ctrl: 17<br>    ESC:27<br>    Tab:9<br>    a-z: 65-90<br>    A-Z:<br>    :;;;;;;;;;;;;;;;;<br>    F1~F12:  112~123<br>    0-9: 48-57<br><img src="/2019/09/20/事件/event.jpg" alt="键盘键值表"></p><p>在IE低版本浏览器中，浏览器执行绑定的方法，并没有把事件对象传递进来，此时ev===undefined,需要基于window.event来获取，由于是全局属性，鼠标每次操作，都会把上一次操作的值替换掉<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!ev)&#123;</span><br><span class="line">    <span class="comment">//低版本中没有的属性，我们手动设置一下，按照自己有的先获取到值</span></span><br><span class="line">    <span class="comment">//然后赋值给标准对应的新属性（经过判断处理后，低版本中也有TARGET/PAGE-X/PAGE-Y这些属性了）</span></span><br><span class="line">    <span class="comment">//直接按照高版本的规则来使用即可</span></span><br><span class="line">    ev=<span class="built_in">window</span>.event;</span><br><span class="line">    <span class="comment">//ev.srcElement; // 获取事件源，标准中使用的是ev.target</span></span><br><span class="line">    ev.target = ev.srcElement;</span><br><span class="line">    <span class="comment">//低版本浏览器中的事件对象当中不存在pageX和pageY</span></span><br><span class="line">    ev.pageX=event.clientX+(<span class="built_in">document</span>.documentElement.scrollLeft||<span class="built_in">document</span>.body.scrollLeft);</span><br><span class="line">    ev.pageY=ev.clientY+(<span class="built_in">document</span>.documentElement.scrollTop||<span class="built_in">document</span>.body.scrollTop);</span><br><span class="line">    ev.which=ev.keyCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// preventDefault &amp; stopPropagation 在低版本下也没有</span></span><br><span class="line">    ev.preventDefault = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ev.returnValue=<span class="literal">false</span>; <span class="comment">// 低版本阻止默认行为</span></span><br><span class="line">    &#125;</span><br><span class="line">    ev.stopPropagation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ev.cancelBubble = <span class="literal">true</span>; <span class="comment">// 低版本阻止冒泡传播</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>第二种兼容方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> target = ev.target || ev.srcElement;</span><br><span class="line">    <span class="comment">// ... 用到谁就写谁</span></span><br><span class="line">    ev.preventDefault ? ev.preventDefault():ev.returnValue=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="事件的默认行为"><a href="#事件的默认行为" class="headerlink" title="事件的默认行为"></a>事件的默认行为</h2><p>事件本身就是天生的，某些事件触发，即使你没有绑定方法，也会存在一些效果，这些默认的效果就是事件的默认行为。<br>  1，a标签的点击操作就存在默认行为<br>        1.1 页面跳转<br>        1.2 锚点定位（HASH定位）哈希定位<br>                基于HASH值，我们可以实现SPA单页面应用<br>  2， INPUT标签的默认行为<br>        2.1 输入内容可以呈现到文本当中；<br>        2.2 输入内容的时候会把之前输入的一些信息呈现出来（并不是所有浏览器和所有情况下都有）<br>  3， SUBMIT按钮也存在默认行为<br>        3.1 点击按钮页面会刷新 （在FORM中设置ACTION,点击SUBMIT,会默认按照ACTION指定的地址进行页面面跳转，并把表单中的信息传递过去【非前后端分离项目中，由服务器进行页面渲染，由其他语言实现数据交互，一般都是这么处理】）<br>  。。。</p><h3 id="如何阻止默认行为"><a href="#如何阻止默认行为" class="headerlink" title="如何阻止默认行为"></a>如何阻止默认行为</h3><ol><li>阻止A标签的默认行为：很多时候我们使用A标签仅仅是想当作一个普通按钮，不想跳转，也不想锚点定位<br>  在结构中阻止<pre><code>1.1 href=&quot;javascript:;&quot;1.2 href=&quot;javascript:false/void 0/null/undefined..;&quot;</code></pre>  在JS中阻止:给click绑定方法，当我们点击a标签的时候，先触发click事件，其次才会执行自己的默认行为<pre><code>link.onclick=function(ev){    ev = ev || window.ev;    return false;     // 或者 ev.preventDefault?ev.preventDefault():ev.returnValue = false;}</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tempInp.onkeydown =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> val = <span class="keyword">this</span>.value.trim(),<span class="comment">//trim不兼容 this.value.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/,'')</span></span><br><span class="line">    len = val.length;</span><br><span class="line">    <span class="keyword">if</span> (len&gt;<span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = val.substr(<span class="number">0</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> code = ev.which || ev.keyCode;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="regexp">/(37|8)/</span>.test(code))&#123;</span><br><span class="line">        ev.preventDefault? ev.preventDefault():ev.returnValue=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="事件的传播机制"><a href="#事件的传播机制" class="headerlink" title="事件的传播机制"></a>事件的传播机制</h2><p>冒泡传播： 触发当前元素的某一个事件行为，不仅当前元素行为触发，而且其祖先元素的相关事件行为也会依次被触发，这种机制就是“事件的冒泡传播机制”<br><img src="/2019/09/20/事件/maopao.png" alt="冒泡阶段图示">)<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">document</span>.documentElement.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">document</span>.body.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">document</span>.outer.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">document</span>.inner.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>xxx.onclick=function(){} DOM0级事件绑定，给元素的事件行为绑定方法，这些方法都是在当前元素的冒泡传播阶段（或者目标阶段）执行的</p><p>xxx.addEventListener(‘xxx’,function(){},false) 第三个参数也是控制绑定的方法在事件传播的冒泡阶段（或者目标阶段）执行，只有第三个参数为true才代表让当前方法在事件的传播阶段触发执行（这种捕获阶段执行没啥意义，项目中不用）</p><p>不同浏览器对于最外层祖先元素的定义是不一样的<br>谷歌： window-&gt;document-&gt;html-&gt;body..<br>IE高： window-&gt;html-&gt;body…<br>IE低： html-&gt;body..</p><h2 id="关于事件对象的一些理解"><a href="#关于事件对象的一些理解" class="headerlink" title="关于事件对象的一些理解"></a>关于事件对象的一些理解</h2><ol><li>事件对象是用来存储当前本次操作的相关信息，和操作有关，和元素无必然关系；<br>2，当我们基于鼠标或者键盘灯操作的时候，浏览器会把本次操作的信息存储起来（标准浏览器存储到默认的内存中【自己找不到】，IE低版本存储到window.event中了），存储的值是一个对象（堆内存），操作肯定会触发元素的某个行为，也就会把绑定的方法执行，此时标准浏览器会把之前存储的对象（准确来说堆内存地址）当作一个实参传递给每一个执行的方法，所以操作一次，即使再多方法中都有EV,但是存储的值都是一个（本次操作信息的对象而已）</li></ol><h2 id="mouseover-mouseout-mouseenter-mouseleave"><a href="#mouseover-mouseout-mouseenter-mouseleave" class="headerlink" title="mouseover mouseout mouseenter mouseleave"></a>mouseover mouseout mouseenter mouseleave</h2><p>enter 和leave 会阻止冒泡传播<br>1，over 属于经过、滑过，覆盖xx,从父元素进入子元素，属于离开了父元素，会触发父元素的out,触发子元素的over<br>        enter属于进入，从父元素进入子元素，并不离开父元素，会触发父元素的leave,触发子元素的enter<br>2, enter和leave组织了事件的冒泡传播，而over和out还存在冒泡传播<br>所以对于父元素嵌套子元素这种情况，使用OVER会发生很多不愿意操作的事情，此时我们使用ENTER会更加简单，操作方便，所以真是项目中ENTER的使用比over多</p><h2 id="事件池机制"><a href="#事件池机制" class="headerlink" title="事件池机制"></a>事件池机制</h2><h3 id="事件绑定-1"><a href="#事件绑定-1" class="headerlink" title="事件绑定"></a>事件绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DOM0</span><br><span class="line">    box.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">    <span class="comment">//每一个元素对象都是对应类的实例，浏览器天生为其设置了很多私有属性和公有属性方法，而onclick就是其中的一个私有属性（事件类私有属性，还有很多其他的私有属性，默认值是Null）</span></span><br><span class="line">    <span class="comment">// dom0事件绑定的原理就是给每一个事件的私有属性赋值（浏览器会建立监听机制，当我们触发元素的某个行为，浏览器会自己把属性中的赋值去执行）</span></span><br><span class="line">    <span class="comment">//dom0事件绑定只允许给某个时间行为绑定一个方法，多次绑定，后面绑定的内容会替换前面绑定的，一最后一次绑定的方法为主</span></span><br><span class="line">DOM2</span><br><span class="line">    box.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="literal">false</span>); removeEventListener</span><br><span class="line">    <span class="comment">//使用的方法都是EventTarget.prototype上定义的</span></span><br><span class="line">    <span class="comment">//在IE低版本浏览器中使用的是attachEvent来处理：box.attachEvent('onclick', function()&#123;&#125;);移除使用的是dettachEvent</span></span><br><span class="line">    <span class="comment">//dom2事件绑定可以给当前元素的某一个事件绑定多个不同的方法，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//DOM1并没有对事件绑定做升级改版</span></span><br></pre></td></tr></table></figure><h3 id="事件池"><a href="#事件池" class="headerlink" title="事件池"></a>事件池</h3><p><img src="/2019/09/20/事件/事件池.bmp" alt="事件池图示"></p><h3 id="DOM2事件绑定的兼容性问题"><a href="#DOM2事件绑定的兼容性问题" class="headerlink" title="DOM2事件绑定的兼容性问题"></a>DOM2事件绑定的兼容性问题</h3><p>[谷歌 vs IE高版本]<br>在移除事件绑定的时候，如果移除操作发生在正要执行的方法之前（例如：点击的时候，正要执行FN8,但是在执行FN4的时候，我们把FN8从事件池中移除了），谷歌下是立即生效，第一次也不再执行FN8了，而IE是当前本次不生效，下一次点击才生效，第一次点击还是要执行FN8</p><p>[谷歌 vs IE低版本]<br>    标准： addEventListener(‘click’,fn) / removeEventListener<br>    IE:   attachEvent(‘onclick’, fn) / detachEvent</p><p>1，this问题<br>        标准下，方法执行，方法中的this是当前元素本身，Ie低版本中this指向了window<br>2, 重复问题<br>        标准浏览器中的事件池是默认去重的，同一个元素的同一个事件行为不能出现相同的绑定方法，但是IE低版本的事件池机制没有这么完善，不能默认去重，也就是可以给同个元素的同个事件绑定相同的方法<br>3，顺序问题<br>        标准浏览器是按照向事件池中存放的顺序依次执行的，而IE低版本是乱序执行的，没有规律</p><p>IE低版本浏览器出现的所有问题都是由于本身自带的事件池机制不完整导致的</p><p>IE低版本浏览器跟标准浏览器的区别：<br>事件对象<br>DOM2事件绑定<br>事件传播的路径不一样</p><h3 id="DOM0和DOM2事件绑定的区别"><a href="#DOM0和DOM2事件绑定的区别" class="headerlink" title="DOM0和DOM2事件绑定的区别"></a>DOM0和DOM2事件绑定的区别</h3><p>1）机制不一样<br>DOM0是给事件的私有属性赋值，所以只能绑定一个方法；DOM2采用的是事件池机制，所以可以绑定多个不同的方法<br>2）移除的操作<br>box.onclick = null;重新赋值即可移除绑定方法<br>DOM2移除的时候，必须清楚要移除哪一个方法，才能呢个在事件池当中移除掉。所以基于DOM2做事件绑定，我们要有瞻前顾后的思路，也就是绑定的时候考虑如何移除（技巧：不要绑定匿名函数，都绑定实名函数）<br>3）DOM2事件绑定增加了一些DOM0无法操作的事件行为，例如：DOMContentLoaded事件（当页面中的HTML结构加载完成就会触发执行）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">box.addEventListener(<span class="string">'DOMContentLoaded'</span>,fn);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//当页面中的资源都加载完成（包含HTML结构加载完，CSS和JS等资源加载完成等），才会触发</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);<span class="comment">// 这样也可以执行多次</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//当页面中的HTML结构加载完成就会执行</span></span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// 就是 $(document).ready(function()&#123;&#125;);的简写 原理基于DOMContentLoaded完成的</span></span><br><span class="line"><span class="comment">// 在document.readyState === 'complete'时候执行函数</span></span><br><span class="line"><span class="comment">//基于DOM2事件绑定的，所以在同一个页面总可以执行多次（绑定多个不同的方法），当结构加载完成，会依次执行方法</span></span><br></pre></td></tr></table></figure></p><p>DOM0和DOM2两套机制可以共存，执行顺序和编写顺序有关</p><h3 id="JQ中的事件绑定方法"><a href="#JQ中的事件绑定方法" class="headerlink" title="JQ中的事件绑定方法"></a>JQ中的事件绑定方法</h3><p>JQ中的事件绑定方法有很多，最常用的是<br>on / off 添加 / 移除<br>one : 只绑定一次，第一次执行完成后，就移除掉该方法<br>click / mouseover / mouseout / …这些方法最后都是基于 on / off 完成的，one也是基于 on / off 完成的<br>delegate: 事件委托方法，在1.7版本以前用的是live方法<br>基于DOM2事件绑定实现事件的绑定和移除（兼容了所有的浏览器）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#box'</span>).on();</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).delegate(<span class="string">'#box'</span>,<span class="string">'click'</span>,fn);</span><br><span class="line"><span class="comment">// 在document上绑定fn点击行为，并把它委托给#box,通常#box是一个未来元素</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事件是一件事情或者一个行为（对于元素来说，它的很多事件都是天生自带的），只要我们去操作这个元素，就会触发这些行为&lt;br&gt;“事件是天生自带的行为，我们操作元素，就会触发相关行为”&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>选项卡封装</title>
    <link href="https://abluecup.github.io/2019/09/06/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5/"/>
    <id>https://abluecup.github.io/2019/09/06/常用代码段/</id>
    <published>2019-09-06T06:10:06.000Z</published>
    <updated>2020-04-28T05:33:37.895Z</updated>
    
    <content type="html"><![CDATA[<p>本篇收录了一些练习题：<br><a id="more"></a></p><p>##　选项卡封装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=&gt; 参数初始化（初始化配置项），设置参数的默认值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载：把每一项当作实例的私有属性设置一下即可，我们通常说是把属性挂载到实例上</span></span><br><span class="line"><span class="comment">//获取需要挂载的元素，把获取的元素也挂载到实例上</span></span><br><span class="line"><span class="comment">// this.container = container;</span></span><br><span class="line"></span><br><span class="line">~<span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hasClass = <span class="function">(<span class="params">ele, str</span>) =&gt;</span> ele.className.trim().split(<span class="regexp">/ +/</span>).indexOf(str) &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> addClass = <span class="function">(<span class="params">ele, str</span>) =&gt;</span> &#123;</span><br><span class="line">        !hasClass(ele, str) &amp;&amp; (ele.className += <span class="string">` <span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> removeClass = <span class="function">(<span class="params">ele, str</span>) =&gt;</span> &#123;</span><br><span class="line">        hasClass(ele, str) &amp;&amp; (ele.className = ele.className.trim().split(<span class="regexp">/ +/</span>).filter(<span class="function"><span class="params">item</span> =&gt;</span> item !== str).join(<span class="string">' '</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Tabox</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(container, options) &#123;</span><br><span class="line">            <span class="keyword">let</span> _default = &#123;</span><br><span class="line">                lastIndex: <span class="number">0</span>,</span><br><span class="line">                eventType: <span class="string">'mouseover'</span>,</span><br><span class="line">                customPageClass: <span class="string">'options'</span>,</span><br><span class="line">                customContentClass: <span class="string">'con'</span>,</span><br><span class="line">                changeEnd: <span class="literal">null</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 把参数挂载到实例上</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> options) &#123;</span><br><span class="line">                <span class="keyword">if</span> (options.hasOwnProperty(attr)) &#123;</span><br><span class="line">                    _default[attr] = options[attr];</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> _default) &#123;</span><br><span class="line">                <span class="keyword">if</span> (_default.hasOwnProperty(attr)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>[attr] = _default[attr];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取操作元素，把需要操作的元素也挂载在实例上</span></span><br><span class="line">            <span class="keyword">this</span>.container = <span class="built_in">document</span>.getElementById(container);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.container.children);</span><br><span class="line">            <span class="keyword">this</span>._childNodes = [].slice.call(<span class="keyword">this</span>.container.children);</span><br><span class="line">            <span class="keyword">this</span>.option =<span class="keyword">this</span>. _childNodes.find(<span class="function"><span class="params">item</span> =&gt;</span> hasClass(item, <span class="keyword">this</span>.customPageClass));</span><br><span class="line">            <span class="keyword">this</span>.tabList = [].slice.call(<span class="keyword">this</span>.option.children);</span><br><span class="line">            <span class="keyword">this</span>.conList = <span class="keyword">this</span>._childNodes.filter(<span class="function"><span class="params">item</span> =&gt;</span> hasClass(item, <span class="keyword">this</span>.customContentClass));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行方法</span></span><br><span class="line">            <span class="keyword">this</span>.changeTab();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写在class里面的都是实例上的方法</span></span><br><span class="line">        changeTab() &#123;</span><br><span class="line">            <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">this</span>.tabList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">                item[<span class="string">`on<span class="subst">$&#123;<span class="keyword">this</span>.eventType&#125;</span>`</span>] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (index === _this.lastIndex) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    addClass(<span class="keyword">this</span>, <span class="string">'active'</span>);</span><br><span class="line">                    removeClass(_this.tabList[_this.lastIndex], <span class="string">'active'</span>);</span><br><span class="line">                    addClass(_this.conList[index], <span class="string">'active'</span>);</span><br><span class="line">                    removeClass(_this.conList[_this.lastIndex], <span class="string">'active'</span>);</span><br><span class="line">                    _this.lastIndex = index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">window</span>.Tabox = Tabox;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p><h2 id="rest运算符"><a href="#rest运算符" class="headerlink" title="rest运算符"></a>rest运算符</h2><p>题目来自freecodecamp<br>1.使用解构赋值以及rest操作符来进行一个Array.prototype.slice相同的操作。使得arr是原数组source除开前两个元素的子数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeFirstTwo</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="comment">// 在这行以下修改代码</span></span><br><span class="line">  <span class="keyword">const</span> [,,...arr]=list;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// change this</span></span><br><span class="line">  <span class="comment">// 在这行以上修改代码</span></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = removeFirstTwo(source);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// 应该为 [3,4,5,6,7,8,9,10]</span></span><br><span class="line"><span class="built_in">console</span>.log(source); <span class="comment">// 应该为 [1,2,3,4,5,6,7,8,9,10];</span></span><br></pre></td></tr></table></figure></p><p>2.对half的参数进行解构赋值，使得仅仅将max与min的值传进函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stats = &#123;</span><br><span class="line">  max: <span class="number">56.78</span>,</span><br><span class="line">  standard_deviation: <span class="number">4.34</span>,</span><br><span class="line">  median: <span class="number">34.54</span>,</span><br><span class="line">  mode: <span class="number">23.87</span>,</span><br><span class="line">  min: <span class="number">-0.75</span>,</span><br><span class="line">  average: <span class="number">35.85</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> half = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>; <span class="comment">// 不要改变这行</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这行以下修改代码</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">half</span>(<span class="params">&#123;max,min&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 请在函数参数中使用解构赋值</span></span><br><span class="line">    <span class="keyword">return</span> (max + min) / <span class="number">2.0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 在这行以上修改代码</span></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(stats); <span class="comment">// 应该为 object</span></span><br><span class="line"><span class="built_in">console</span>.log(half(stats)); <span class="comment">// 应该为 28.015</span></span><br></pre></td></tr></table></figure></p><h2 id="css3属性"><a href="#css3属性" class="headerlink" title="css3属性"></a>css3属性</h2><p>box-shadow: <offset-x> <offset-y><blur-radius><spread-radius><color><br>1.写一个一圈都是阴影的<br>box-shadow: 0 0 0 4px gray;<br>2.画个月亮<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">          position: relative;</span><br><span class="line">          width: 100px;</span><br><span class="line">          height: 100px;</span><br><span class="line">          background:transparent;</span><br><span class="line">          border-radius: 50%;</span><br><span class="line">          box-shadow: 20px 10px 0 0 yellow;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></color></spread-radius></blur-radius></offset-y></offset-x></p><p>background: linear-gradient(gradient_direction, 颜色 1, 颜色 2, 颜色 3, …);</p><p>3.background-size，linear-gradient配合写出条形滚动条纹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        #progress &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border: 1px solid gray;</span><br><span class="line">        &#125;</span><br><span class="line">        #cur &#123;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            width: 0;</span><br><span class="line">            height: 100%;</span><br><span class="line">            background: linear-gradient(to top right, #FF007D 0, #FF007D 25%, #00FFD7 25%, #00FFD7 50%,#FF007D 50%, #FF007D 75%,#00FFD7 75%, #00FFD7 100%) ;/*这种分法让背景图重复的时候看起来是连贯的，有助于图片动画时的连续性*/</span><br><span class="line">            transition: all 1s linear;</span><br><span class="line">            background-size: 40px 40px; /*背景图的大小是一个正方形*/</span><br><span class="line">            /* background-repeat: no-repeat;  默认值是repeat,所以当上一个背景图上移的时候，下面的背景就会上来，以覆盖全部的元素大小，同理，当长度变长的时候，也会出现新的重复的背景图*/ </span><br><span class="line">            animation: loadingMove 2s linear 0s infinite both ;</span><br><span class="line">        &#125;</span><br><span class="line">        @keyframes loadingMove &#123;</span><br><span class="line">            0% &#123;</span><br><span class="line">                background-position: 0 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            100% &#123;</span><br><span class="line">                background-position: 0 -40px;/*移动一个完整的图片距离*/</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;div id=&quot;progress&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;cur&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">let autoTimer = setInterval(function () &#123;</span><br><span class="line">            let curW = cur.offsetWidth;</span><br><span class="line">            curW += 80;</span><br><span class="line">            if (curW &gt; 400) &#123;</span><br><span class="line">                clearInterval(autoTimer);</span><br><span class="line">                curW = 400;</span><br><span class="line">            &#125;</span><br><span class="line">            cur.style.width = curW + &apos;px&apos;;</span><br><span class="line">        &#125;, 1000); </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>background-clip  设置元素的背景（背景图片或颜色）是否延伸到边框、内边距盒子、内容盒子下面。<br>border-box|padding-box|content-box|text</p><p>4.画个心<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.heart &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  margin: auto;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  background-color: pink;</span><br><span class="line">  height: 50px;</span><br><span class="line">  width: 50px;</span><br><span class="line">  transform: rotate(-45deg);</span><br><span class="line">&#125;</span><br><span class="line">.heart:after &#123;</span><br><span class="line">  background-color: pink;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  position: absolute;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  top: 0px;</span><br><span class="line">  left: 25px;</span><br><span class="line">&#125;</span><br><span class="line">.heart:before &#123;</span><br><span class="line">  content: &apos;&apos;;</span><br><span class="line">  background-color: pink;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  position: absolute;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  top: -25px;</span><br><span class="line">  left: 0px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class = &quot;heart&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇收录了一些练习题：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>同步、异步编程</title>
    <link href="https://abluecup.github.io/2019/07/26/%E5%90%8C%E6%AD%A5%E3%80%81%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>https://abluecup.github.io/2019/07/26/同步、异步编程/</id>
    <published>2019-07-26T06:29:02.000Z</published>
    <updated>2020-04-23T05:07:47.949Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是对JS同步、异步编程的介绍，以及定时器原理的解析：<br><a id="more"></a></p><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>定时器；设定一个定时器，并且设定了等待的时间，当到达设定的时间时，浏览器会执行对应的方法</p><p>【常用的定时器】<br>setTimeout([function],[interval])<br>setInterval([function],[interval])<br>[function],到达时间后执行的方法（设定时方法没有执行，到时间浏览器会帮我们执行）<br>[interval],时间因子（需要等待的时间），单位：毫秒</p><p>setTimeout是执行一次定时器，setInterval是可以多次执行的(轮循定时器)</p><p>清除定时器：<br>clearTimeout([序号]) / clearInterval([序号]) 这两种方法中的任何一个都可以清除用任何方法创建的定时器</p><p>设置定时器会有一个返回值，这个值是一个数字，属于定时器的编号，代表当前是第几个定时器（不管是基于setTimeout还是setInterval创建定时器，这个编号会累加）</p><h2 id="Js中的同步编程和异步编程"><a href="#Js中的同步编程和异步编程" class="headerlink" title="Js中的同步编程和异步编程"></a>Js中的同步编程和异步编程</h2><p>1，同步编程：任务是按照顺序依次处理，当前这件事没有彻底做完，下一件事是执行不了的；<br>2，异步编程：当前这件事没有彻底做完，需要等待一段时间才能继续处理，此时我们不等，继续执行下面的任务，当下面的任务完成后，再去把没有彻底完成的事彻底完成</p><h3 id="JS中的异步编程："><a href="#JS中的异步编程：" class="headerlink" title="JS中的异步编程："></a>JS中的异步编程：</h3><pre><code>1，所有的事件绑定都是异步编程；2，所有的定时器都是异步编程；3，ajax中一般都使用异步编程处理；4，回调函数也算是异步编程</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n=<span class="number">0</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(++n);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定时器设定一个时间，到时间后也不一定执行，如果当前还有其他的同步任务正在处理，那么到时间了也等着；</span></span><br></pre></td></tr></table></figure><h3 id="浏览器是如何规划同步异步机制的"><a href="#浏览器是如何规划同步异步机制的" class="headerlink" title="浏览器是如何规划同步异步机制的"></a>浏览器是如何规划同步异步机制的</h3><p>1，浏览器是多进程的，JS是单线程的（浏览器只给JS执行分配一个线程）<br>每一个应用程序都可以理解为一个进程，浏览器打开一个页面，就相当于开辟一个进程，在一个程序中（进程中），我们经常会同时做很多事情，此时我们可以分配多个线程去同时完成多项任务<br>2, js在单线程当中实现异步的机制，主要依赖于浏览器的任务队列完成的，浏览器中有两个任务队列，（主任务队列和等待任务队列）<br>    2.1 在主任务队列自上而下执行的时候，如果遇到一个异步操作任务，没有立即执行，而是把它放到等待任务队列中排队<br>    2.2 当主无人队列完成后才会到等待任务队列中进行查找（主任务队列完不成，不管等待任务队列中是否有到达时间的，都不处理，继续等待主任务队列完成，因为js是单线程的，一次只能处理一件事情）<br>3， 等待任务队列当中，谁达到条件了（如果有很多都达到条件了，谁先达到的，就先处理谁），就把这个任务重新放到主任务队列当中去执行，把这个任务执行完，再去等待队列中找……<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="number">10</span>);</span><br><span class="line"> setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'aa'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">90000000</span>; i++) &#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'aa'</span>);</span><br></pre></td></tr></table></figure></p><p><img src="/2019/07/26/同步、异步编程/aa.png" alt="上一个例子的图示"></p><h2 id="初始Promise"><a href="#初始Promise" class="headerlink" title="初始Promise"></a>初始Promise</h2><p>Promise：它是ES6中新增加的类 （new Promise）,目的是为了管理JS中的异步编程的，所以我们也把它称为Promise设计模式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三个状态：pending(准备状态：（初始化成功）开始执行异步任务)/fulfilled(成功)/rejected(失败)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, rejected</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//resolve, 当异步操作执行成功，我们执行resolve方法</span></span><br><span class="line">  <span class="comment">//rejected, 当异步操作执行失败，执行rejected方法</span></span><br><span class="line">  <span class="comment">//执行一个异步的任务, new Promise的时候，创建Promise的一个实例，立即会把当前函数体中的异步操作执行</span></span><br><span class="line">  <span class="comment">//Promise本身是同步编程，它可以管理异步操作</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;).then(</span><br><span class="line">  <span class="comment">// 第一个传进来的函数是resolve,第二个是rejected</span></span><br><span class="line">  (res)=&gt;&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ok"</span>,res);</span><br><span class="line">&#125;,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"no"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">     xhr.open(<span class="string">'get'</span>, <span class="string">'js/1.js'</span>, <span class="literal">false</span>);</span><br><span class="line">     xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">         val = xhr.responseText;</span><br><span class="line">         resolve(val);</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="keyword">if</span>(xhr.readyState !== <span class="number">200</span>)&#123;</span><br><span class="line">           rejected(val);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     xhr.send(<span class="literal">null</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">   pro.then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="comment">// 数据绑定……</span></span><br><span class="line">   &#125;,(res)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"no"</span>);</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="comment">// 当一个then中的函数执行完成，会执行第二个，依次类推</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="comment">// 第二个执行完成，就会执行第三个</span></span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="comment">//所有的设计模式都是一种编程思想，便于管理代码，管理业务逻辑</span></span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>实现方式：</p><pre><code>1. css3动画 (transition（过度动画）/animation（真动画）  transform是变形，不是动画)</code></pre><p>经常依托某一种动画让元素在一定时间内实现变形效果 （能用css3解决的，不用js，因为css3的动画性能高）</p><pre><code>2. js动画    定时器     requestAnimationFrame(js中的帧动画)    canvas动画就是js基于定时器完成的（canvas是一个html标签，可以理解为是一个画布，我们可以基于JS在画布上绘制图像和效果）3.flash动画</code></pre><h2 id="简单动画"><a href="#简单动画" class="headerlink" title="简单动画"></a>简单动画</h2><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>把一个函数A当作实参传递给另外一个函数B，在B方法中执行的时候，把A执行了，我们把这种机制叫做“回调函数机制”<br>      1, 根据需求回调函数可以被执行N多次；<br>      2，不仅可以把回调函数执行，还可以给传递的回调函数传递实参，这样在回调函数中设置形参（或者arg）接收即可；<br>      3，还可以改变回调函数中的this指向<br>      4, 可以在宿主函数（它在哪执行的，它的宿主函数就是谁）中接收回掉函数执行的返回结果<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn=<span class="function">(<span class="params">callback</span>)=&gt;</span>&#123;</span><br><span class="line">  callback &amp;&amp; cackback();</span><br><span class="line">&#125;;</span><br><span class="line">fn(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>:<span class="built_in">window</span> 回调函数中一般<span class="keyword">this</span>都是<span class="built_in">window</span>,除非宿主函数执行回调函数的时候把<span class="keyword">this</span>特殊指向了（箭头函数除外，箭头函数中的<span class="keyword">this</span>是它上下文的）</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="jquery中的动画和动画库"><a href="#jquery中的动画和动画库" class="headerlink" title="jquery中的动画和动画库"></a>jquery中的动画和动画库</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* let $box=$("#box");</span></span><br><span class="line"><span class="comment">console.log($box);</span></span><br><span class="line"><span class="comment">// stop()结束正在运行的动画，继续执行下一个新的动画，在哪停的就从哪开始</span></span><br><span class="line"><span class="comment">// finish()同stop一样，也是结束正在执行的动画(结束动画后，让元素立即运动到目标位置，从上一个动画的目标位置作为下一个动画的起始位置)</span></span><br><span class="line"><span class="comment">$box.stop().animate(&#123;</span></span><br><span class="line"><span class="comment">    top:300,</span></span><br><span class="line"><span class="comment">    left:500</span></span><br><span class="line"><span class="comment">&#125;,2000,'linear',()=&gt;&#123;</span></span><br><span class="line"><span class="comment">    $box.css(&#123;</span></span><br><span class="line"><span class="comment">        'border-radius':'50%',</span></span><br><span class="line"><span class="comment">        'background-color':'red'</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">&#125;); */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 快捷动画</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1，show,hide,toggle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2,fadeIn|fadeOut|fadeToggle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3, slideDown|slideUp|slideToggle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以制定具体的运动时间，也可以指定'slow','fast'</span></span><br><span class="line">$(<span class="string">'#box'</span>).slideUp(<span class="string">'slow'</span>);</span><br></pre></td></tr></table></figure><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><p>1，container是轮播图容器，溢出的内容需要隐藏<br>2，wrapper存放所有图片（所有图片同行排列），wrapper相对于container定位，后期让来轮播图切换其实就是改变wrapper的left值</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是对JS同步、异步编程的介绍，以及定时器原理的解析：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>快捷键</title>
    <link href="https://abluecup.github.io/2019/06/13/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://abluecup.github.io/2019/06/13/快捷键/</id>
    <published>2019-06-13T01:55:51.000Z</published>
    <updated>2019-07-04T09:28:38.699Z</updated>
    
    <content type="html"><![CDATA[<p>文件主要记录了常用的快捷键<br><a id="more"></a></p><h2 id="vscode-中的快捷键"><a href="#vscode-中的快捷键" class="headerlink" title="vscode 中的快捷键"></a>vscode 中的快捷键</h2><ol><li><p>插入注释<br>ctrl + alt + i 在文件头部添加注释<br>ctrl + alt + t 在光标处添加注释</p></li><li><p>打开控制台<br>ctrl + ` </p></li><li><p>JS多行注释<br>alt + shift + A</p></li><li><p>代码格式化<br>alt + shift + F</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件主要记录了常用的快捷键&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="https://abluecup.github.io/2019/06/12/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://abluecup.github.io/2019/06/12/面试题/</id>
    <published>2019-06-12T07:54:28.000Z</published>
    <updated>2019-07-15T01:00:02.343Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是对前面课程的总结归纳<br><a id="more"></a></p><h3 id="1-ES6相比ES5有哪些新语法"><a href="#1-ES6相比ES5有哪些新语法" class="headerlink" title="1. ES6相比ES5有哪些新语法"></a>1. ES6相比ES5有哪些新语法</h3><ul><li>let/const<blockquote><p>和ES5有哪些区别<br>1) let不存在变量提升机制（变量不允许在声明之前使用）<br>2) 不允许重复声明<br>3) 在全局作用域中声明的变量不是window的一个属性，和他没有关系<br>4) typeof 未被声明的变量 =&gt;不是undefined而是报错（暂时性死区）<br>5) let会形成私有作用域（类似于私有作用域，大部分大括号都会形成块级作用域）</p></blockquote></li><li>解构赋值</li><li>“…” 拓展、剩余、展开运算符</li><li><p>箭头函数</p><blockquote><p>和普通函数的区别<br>1) 没有arguments,但是可以基于…arg获取实参集合（结果是一个数组）<br>2) 没有自己的this,箭头函数中的this是上下文中的this</p></blockquote></li><li><p>模板字符串</p></li><li>Promise(async/await)</li><li>Class(ES6中创建类的)</li><li>interator(for of 循环)</li><li>Map / set</li><li>…</li></ul><h3 id="2-请说出你对“重排（回流）、-重绘、-读写分离”的理解"><a href="#2-请说出你对“重排（回流）、-重绘、-读写分离”的理解" class="headerlink" title="2.请说出你对“重排（回流）、 重绘、 读写分离”的理解"></a>2.请说出你对“重排（回流）、 重绘、 读写分离”的理解</h3><ul><li>思路：<blockquote><p>1.首先说出什么是重排和重绘<br>2.突出他们耗性能<br>3.突出自己写项目的时候重点注意了这些事情，以及自己的解决方案（说一下解决原理）</p></blockquote></li></ul><p>浏览器渲染一个页面的时候是按照“先创建DOM树，再加载CSS，生成渲染树RENDER TREE, 把渲染树交给浏览器（GPU）进行绘制”，如果后期我们修改了元素的样式（但是没有改变大小和位置），浏览器会把当前元素重新生成渲染树，然后重新渲染，这个机制是重绘，但是一旦元素的大小或者位置发生改变，浏览器就要从DOM树重新计算渲染，这个机制是重排（回流）。无论是重排还是重绘都非常的消耗性能。<br>在我以前的项目中，我特意的重视了这个问题，尽量减少DOM操作引发的回流和重绘问题，常用的解决方案：<br>1，需要动态向页面追加元素的时候，基于文档碎片或者先把需要增加的所有元素拼接成字符串，最后统一进行增加<br>2，读写分离： 把统一修改样式都放到一起执行，新版浏览器都有一个自己检测的机制，如果发现下面紧挨着的操作也是修改元素的样式，会把所有修改的事先存起来，知道遇到非修改样式的操作，会把之前存储的统一执行，引发一次回流和重绘</p><p>当让还有一些其他的办法，这些是最常注意的，我认为减少DOM回流重绘是非常重要的性能优化手段之一</p><h3 id="3-js中的this总结"><a href="#3-js中的this总结" class="headerlink" title="3.js中的this总结"></a>3.js中的this总结</h3><p>this : 当前方法的执行主体（谁执行的方法，this就是谁，this和当前方法在哪创建的或者在哪执行的都没有必然关系）<br>1.给当前元素的某个元素绑定事件，方法中的this都是当前操作的元素本身；<br>2.函数执行，看函数前面是否有点，有的话，点前面是谁，this就是谁，没有点，this是window(严格模式下，没有点this是undefined)<br>3.构造函数执行，方法中的this一般都是当前类的实例<br>4.箭头函数中没有自己的this,this是上下文中的this<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">            fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//this: obj</span></span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="comment">//this:obj</span></span><br><span class="line">                &#125;,<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>5.在小括号表达式当中，会影响this的指向<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fn(); <span class="comment">// obj</span></span><br><span class="line">(<span class="number">12</span>, obj.fn)(); <span class="comment">// window 以最后一项为主，但是函数指向window</span></span><br></pre></td></tr></table></figure></p><p>6.使用call/apply/bind可以改变this的指向<br>fn.call(obj); 第一个参数不写或者写none,undefined,this指向window;严格模式下，指向undefined</p><h3 id="谈一下你对作用域链和原型链的理解"><a href="#谈一下你对作用域链和原型链的理解" class="headerlink" title="谈一下你对作用域链和原型链的理解"></a>谈一下你对作用域链和原型链的理解</h3><p>1.作用域链：函数执行会形成一个私有的作用域，形参和在当前私有作用域中声明的变量都是私有变量，当前的私有作用域有自我保护机制，私有变量和外界是没有关系的，但是如果私有作用域中遇到一个非私有变量，则向它的上级作用域查找，如果上级作用域还没有，则继续查找，一直找到window为止，这种变量一层层向上查找的机制就是“作用域链机制“<br>2.原型链：也是一种查找机制，实例首先在自己的私有属性中进行查找，如果不是私有属性，基于<em>proto</em>向所属类的原型上查找，如果再找不到，则继续基于<em>proto</em>向上查找，一直找到Object.prototype为止<br>obj.hasOwnProperty(),这里调取的hasOwnProperty这个属性就是找到Object.prototype上才找到</p><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组去重不改变原有数组</span></span><br><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.myUniqueAry = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this:我们需要操作的数组，如果不想改变原有的数组，我们需要把要操作的数组克隆一份出来，处理的都是克隆的数组；</span></span><br><span class="line">    <span class="keyword">let</span> _this = [...this], obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _this.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = _this[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[item] !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            <span class="comment">// 当前对象在数组中已经存在，需要删除</span></span><br><span class="line">            _this[i] = _this[_this.length - <span class="number">1</span>];</span><br><span class="line">            _this.length--;</span><br><span class="line">            i--;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[item] = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> _this;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">let</span> uniqueAry = ary.myUniqueAry();</span><br><span class="line"><span class="built_in">console</span>.log(uniqueAry);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.myDelete=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 这种情况只能用于不改变原有数组，如果需要改变原有数组的话，</span></span><br><span class="line">    <span class="keyword">let</span> _this=[];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (_this.indexOf(<span class="keyword">this</span>[i])===<span class="number">-1</span>) &#123;</span><br><span class="line">           _this[_this.length]=<span class="keyword">this</span>[i];</span><br><span class="line">       &#125;             </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _this;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> aa = ary.myDelete();</span><br><span class="line"><span class="built_in">console</span>.log(aa,ary);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">Array</span>.prototype.myDelete=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _this=[];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (_this.indexOf(<span class="keyword">this</span>[i])===<span class="number">-1</span>) &#123;</span><br><span class="line">           _this[_this.length]=<span class="keyword">this</span>[i];</span><br><span class="line">       &#125;             </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改原有数组</span></span><br><span class="line">    <span class="keyword">this</span>.length=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _this.length; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="keyword">this</span>.length]=_this[i];   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="说出你所掌握的算法"><a href="#说出你所掌握的算法" class="headerlink" title="说出你所掌握的算法"></a>说出你所掌握的算法</h3><p>1.递归算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 常用算法</span><br><span class="line"> * 递归</span><br><span class="line"> * 去重</span><br><span class="line"> * 冒泡排序</span><br><span class="line"> * 插入排序</span><br><span class="line"> * 快速排序</span><br><span class="line"> * 时间复杂度</span><br><span class="line"> * 空间复杂度</span><br><span class="line"> * KMP</span><br><span class="line"> * ...</span><br><span class="line"> */</span><br><span class="line">// 递归：函数自己调用自己执行就是递归</span><br><span class="line">// (递归是基于条件判断的，因为我们不能形成死递归，在某个条件下，我们需要结束递归操作)</span><br><span class="line">// 数组扁平化</span><br><span class="line">        let ary = [1, [2, [3, [4, 5]]], 6];</span><br><span class="line"></span><br><span class="line">        let result = [],</span><br><span class="line">            fn = function (ary) &#123;</span><br><span class="line">                for (let i = 0; i &lt; ary.length; i++) &#123;</span><br><span class="line">                    let item = ary[i];</span><br><span class="line">                    if (Object.prototype.toString.call(item) === &apos;[object Array]&apos;) &#123;</span><br><span class="line">                        fn(item);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        result.push(item);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        fn(ary);</span><br><span class="line">        console.log(result);</span><br></pre></td></tr></table></figure></p><h3 id="写出你掌握的JS继承方式，项目中什么时候你用到了继承"><a href="#写出你掌握的JS继承方式，项目中什么时候你用到了继承" class="headerlink" title="写出你掌握的JS继承方式，项目中什么时候你用到了继承"></a>写出你掌握的JS继承方式，项目中什么时候你用到了继承</h3><p>面向对象：类的继承、封装、多态</p><ol><li><p>封装：把实现一个功能JS代码进行封装，主要目的：“低耦合、高内聚”；</p></li><li><p>多态<br> 2.1 重载：方法名相同，参数的个数或者类型不同，此时名字相同的方法叫做方法的重载（后台语言中的重载），JS中不存在重载的  （后面的方法会把前面的方法覆盖掉，不管传递多少实参，传递的都是后面的方法） （有人说JS中的重载是指，同一个方法根据传参的不一样，实现不同的功能，但是有点扯）服务器端的重载是为了减轻服务器端的压力，客户端不需要抗压<br> 2.2 重写：子类重写父类</p></li><li><p>继承<br> 子类继承父类的属性和方法</p><pre><code>3.1 原型继承3.2 call继承3.3 寄生组合寄生3.4 ES6中class类实现继承。。。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x=<span class="number">100</span>;</span><br><span class="line">&#125;;</span><br><span class="line">A.prototype=&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:A,</span><br><span class="line">    getX:function()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.y=<span class="number">200</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> f=<span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型继承: 让子类的原型指向父类的一个实例</span></span><br><span class="line">B.prototype=<span class="keyword">new</span> A();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1, b.prototype = new A(); A的实例本身具备父类A的私有属性和公有方法，子类B的原型指向它，那么子类B的实例就可以找到这些属性和方法了</span></span><br><span class="line"><span class="comment"> * 2, 和传统后台语言的继承不一样，子类继承父类，并不是把父类复制一份副本给子类（这样处理，子类和父类就没有直接关系了），JS中的原型继承是让子类和父类建立原型链的机制，子类的实例调取父类的属性和方法都是基于原型链来完成的。</span></span><br><span class="line"><span class="comment"> *      存在的问题：子类可以重写父类原型上的方法（重写），子类和父类还有关系的。</span></span><br><span class="line"><span class="comment"> *                  父类实例私有的属性和公有属性都变为子类实例的公有属性</span></span><br><span class="line"><span class="comment"> *                  如果子类B的原型上之前有属性方法，重新执行A的实例后，之前的方法都没用了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// call继承：把父类A作为普通函数执行，让A中的this变为B的实例，相当于给B的实例增加了一些属性和方法</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     A.call(<span class="keyword">this</span>);</span><br><span class="line">     <span class="keyword">this</span>.y=<span class="number">200</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//弊端：把父类A当作普通函数执行，和原型没有关系了，仅仅是把A中的私有属性变为子类B实例的私有属性，A原型上的公有属性和方法跟B没有关系</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//寄生组合式继承 A的私有变为B的私有，A的公有变为B的公有</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x=<span class="number">100</span>;</span><br><span class="line">&#125;;</span><br><span class="line">A.prototype=&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:A,</span><br><span class="line">    getX:function()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    A.call(<span class="keyword">this</span>); <span class="comment">// 基于call继承把A的私有变为B的私有</span></span><br><span class="line">    <span class="keyword">this</span>.y=<span class="number">200</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// B.prototype=A.prototype  一般不这么处理，会让修改父类A原型上的东西更方便，这样会导致A的其他实例也受到影响</span></span><br><span class="line">B.prototype=<span class="built_in">Object</span>.create(A.prototype); <span class="comment">// B.prototype = &#123;&#125; (obj._proto_ = A.prototype)</span></span><br><span class="line"><span class="keyword">let</span> f=<span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create(); 内置Object类天生自带的方法</span></span><br><span class="line"><span class="comment">// 1.创建一个空对象</span></span><br><span class="line"><span class="comment">// 2.让新创建的空对象的_proto_指向第一个传递进来的对象（把obj作为新创建空对象的原型）</span></span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    name:<span class="string">'haha'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.create(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种方式和原型继承的区别： B.prototype = new A() 创建A的实例指向A的原型，但是实例中不是空的，存放了A的私有属性，这些属性变为B的公有属性</span></span><br><span class="line"><span class="comment">// B.prototype=Object.create(A.prototype)的好处是创建了一个没有任何私有属性的空对象，指向A的原型，这样B的公有中就不会存在A的私有属性了。</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6中的类和继承</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES6中创建类是有自己标准语法的</span></span><br><span class="line"><span class="comment"> * 这种语法创建出来的类只能new执行，不能当作普通函数执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fn</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Fn是类名，没有小括号</span></span><br><span class="line">    <span class="keyword">constructor</span>(n, m) &#123;</span><br><span class="line">        <span class="comment">//等价于传统ES5类的构造体</span></span><br><span class="line">        <span class="keyword">this</span>.x = n;</span><br><span class="line">        <span class="keyword">this</span>.y = m;</span><br><span class="line">    &#125;</span><br><span class="line">    getX()&#123;</span><br><span class="line">        <span class="comment">// 相当于给Fn的原型上设置方法 Fn.prototype.getX=function()&#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给Fn的原型上设置方法（只能设置方法，不能设置属性），可以写外边</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">static</span> AA()&#123;</span><br><span class="line">        <span class="comment">//把Fn当作一个普通对象，设置私有的方法，同样也只能设置方法，不能设置属性，只能在外边设置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.BB=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn(<span class="number">20</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.x=<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getX()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;<span class="comment">//extends类似于形成了原型继承</span></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">//类似于call继承，相当于把A的constructor给执行了，并且让方法中的this是B的实例，super中传递的参数都是给A的constructor传递的</span></span><br><span class="line">        <span class="keyword">this</span>.y=<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getY()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="英文字母汉字组成的字符串，用正则给英文单词前后加空格"><a href="#英文字母汉字组成的字符串，用正则给英文单词前后加空格" class="headerlink" title="英文字母汉字组成的字符串，用正则给英文单词前后加空格"></a>英文字母汉字组成的字符串，用正则给英文单词前后加空格</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把一个英文段落中的每一个的单词首字母大写</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">"he is a good man-boy!"</span></span><br><span class="line"><span class="comment">//let reg = /\b([a-zA-Z]+)\b/g;</span></span><br><span class="line"><span class="comment">// \b会把-左右两边算作边界，the-man会被当作两个单词</span></span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/(^| )([^\s]+)( |$)/g</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/ /g</span>, <span class="string">'  '</span>).replace(reg, (...arg) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> val=arg[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> val.substr(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+val.substr(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是对前面课程的总结归纳&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>瀑布流</title>
    <link href="https://abluecup.github.io/2019/06/11/%E7%80%91%E5%B8%83%E6%B5%81/"/>
    <id>https://abluecup.github.io/2019/06/11/瀑布流/</id>
    <published>2019-06-11T07:18:49.000Z</published>
    <updated>2019-06-27T09:29:14.489Z</updated>
    
    <content type="html"><![CDATA[<p>瀑布流是当前流行的一种图片排列方式，本篇做了一些基本的介绍；<br><a id="more"></a></p><h2 id="瀑布流专题"><a href="#瀑布流专题" class="headerlink" title="瀑布流专题"></a>瀑布流专题</h2><p>瀑布流：<br>    效果：多列的不规则排列，每一列中有很多内容，每一项内容的高度不定，最后我们按照规则排列，散列之间不能相差太多高度<br>    实现：首先获取需要展示的数据（假设有50条，共3列），把50条数据中的前三条依次插入到三列中（目前有的列高，有的列低），接下来，再拿三条数据，但是本次插入不是依次插入，而是需要先把当前三列按照高矮进行排序，哪个最矮，就先给哪个插入内容，然后依次类推，把50条数据都插入即可。</p><p>tips:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用 Windows 快捷方式。</span><br><span class="line">Windows 右击 Chrome 的快捷方式 属性 - 快捷方式 - 目标。</span><br><span class="line">将目标内容后添加--allow-file-access-<span class="keyword">from</span>-files。</span><br><span class="line">注意添加的内容和原有内容要用空格分割。例如：</span><br><span class="line"><span class="string">"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"</span> --allow-file-access-<span class="keyword">from</span>-files。</span><br><span class="line">点击确定后，关闭所有 Chrome 窗口，使用快捷方式打开的 Chrome 窗口进行访问。</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;瀑布流是当前流行的一种图片排列方式，本篇做了一些基本的介绍；&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>盒子模型</title>
    <link href="https://abluecup.github.io/2019/05/15/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>https://abluecup.github.io/2019/05/15/盒子模型/</id>
    <published>2019-05-15T08:43:09.000Z</published>
    <updated>2019-09-18T08:48:03.964Z</updated>
    
    <content type="html"><![CDATA[<p>本篇的主要内容是盒子模型和jQuery的介绍<br><a id="more"></a></p><h2 id="JS中的盒子模型属性"><a href="#JS中的盒子模型属性" class="headerlink" title="JS中的盒子模型属性"></a>JS中的盒子模型属性</h2><p>在JS中通过相关的属性可以获取（设置—）元素的样式信息，这些属性就是盒子模型属性（基本上都是有关于样式的），共有13个属性，client/offset/scroll[Top/Left/Width/Height], offsetparent.</p><h3 id="clientWidth-amp-clientHeight"><a href="#clientWidth-amp-clientHeight" class="headerlink" title="clientWidth &amp; clientHeight"></a>clientWidth &amp; clientHeight</h3><p>获取当前元素可视区域的宽高：内容的宽高+padding;<br>和内容是否有溢出无关（和设置了overflow:hidden也无关）,就是我们自己设定的内容的宽高+padding<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前页面一屏幕（可视区域）的宽高</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;</span><br></pre></td></tr></table></figure></p><h3 id="clientTop-amp-clientLeft"><a href="#clientTop-amp-clientLeft" class="headerlink" title="clientTop &amp; clientLeft"></a>clientTop &amp; clientLeft</h3><p>内容的左上角相对于盒子的左上角的偏移距离</p><h3 id="offsetWidth-amp-offsetHeight"><a href="#offsetWidth-amp-offsetHeight" class="headerlink" title="offsetWidth &amp; offsetHeight"></a>offsetWidth &amp; offsetHeight</h3><p>在client的基础上加上border(和内容是否溢出也没有关系)</p><h3 id="offsetLeft-amp-offsetTop"><a href="#offsetLeft-amp-offsetTop" class="headerlink" title="offsetLeft &amp; offsetTop"></a>offsetLeft &amp; offsetTop</h3><p>元素距离其父级元素左边和上边的偏移距离</p><h3 id="scrollWidth-amp-scrollHeight"><a href="#scrollWidth-amp-scrollHeight" class="headerlink" title="scrollWidth &amp; scrollHeight"></a>scrollWidth &amp; scrollHeight</h3><p>真实内容的宽高（，不一定是自己设置的值，因为可能会存在内容溢出，有内容溢出的情况下，需要把溢出的内容也算上）+ 左/上padding,而且是一个约等于值（在不同浏览器下，或者是否设置了Overflow:hidder都会对最后的结果产生影响，所以这个值仅仅做参考，属于约等于的值）<br>没有内容溢出的情况下和client值相同<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  当前页面内容的真实宽高</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrolltWidth || <span class="built_in">document</span>.body.scrollWidth;</span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollHeight || <span class="built_in">document</span>.body.scrollHeight;</span><br></pre></td></tr></table></figure></p><h2 id="通过JS盒子模型属性获取值的特点"><a href="#通过JS盒子模型属性获取值的特点" class="headerlink" title="通过JS盒子模型属性获取值的特点"></a>通过JS盒子模型属性获取值的特点</h2><p>1 获取的都是数字，不带单位<br>2 获取的都是整数，不会出现小数(一般都会四舍五入，尤其是获取的偏移量)<br>3 获取的结果都是一个复合样式值（好几个元素样式组合在一起的值），如果只想获取单一样式值（这个不能说明没有用，真实项目中，有时候我们就是需要获取组合的值来完成一些操作）</p><h2 id="获取元素的具体的某个样式值"><a href="#获取元素的具体的某个样式值" class="headerlink" title="获取元素的具体的某个样式值"></a>获取元素的具体的某个样式值</h2><ol><li>[元素].style.xxx 操作<br>只能获取所有卸载元素行内上的样式（不写在行内上，不管你写没写都获取不到，真实项目中，我们很少会把样式卸载行内上）</li><li>window.getComputedStyle<br>获取当前元素所有经过浏览器计算的样式（只要当前元素可以在页面中呈现或者说浏览器渲染它了），那么它的样式都是被计算过的,不管当前样式写在哪，不管你是否写了（浏览器给元素设置了一些默认样式）<br>语法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.getComputedStyle([元素]，[伪类，一般都写<span class="literal">null</span>]) <span class="comment">// 获取到当前元素的所有样式</span></span><br><span class="line"><span class="comment">//IE6-8中用[元素].currentStyle</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="getCSS"><a href="#getCSS" class="headerlink" title="getCSS"></a>getCSS</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * getCSS: 获取当前元素的某一个元素属性值</span></span><br><span class="line"><span class="comment"> * @param</span></span><br><span class="line"><span class="comment"> *      curEle[object]: 当前要操作的元素</span></span><br><span class="line"><span class="comment"> *      attr[string]: 当前要获取的样式属性名</span></span><br><span class="line"><span class="comment"> * @return </span></span><br><span class="line"><span class="comment"> *      获取的样式属性值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">let</span> getCss=<span class="function"><span class="keyword">function</span> <span class="title">getCss</span>(<span class="params">curEle,attr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'getComputedStyle'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> val=<span class="built_in">window</span>.getComputedStyle(curEle,<span class="literal">null</span>)[attr];</span><br><span class="line">        <span class="comment">//把获取的结果去除单位，不是所有的值都能去单位的。例如display，还有一些复合值，比如border:1px solid gray;</span></span><br><span class="line">        <span class="comment">// 只有符合数字+单位这种模式的结果才能去除</span></span><br><span class="line">        <span class="keyword">let</span> reg=<span class="regexp">/^-?\d+(\.\d+)?(px|em|rem|pt)?$/i</span>;</span><br><span class="line">        reg.test(val)?val=<span class="built_in">parseFloat</span>(val):<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">'您的浏览器版本过低，请升级到最新版本，谢谢配合！'</span>); <span class="comment">// 抛出一个错误（语法错误），让浏览器崩溃，不再继续执行JS</span></span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="built_in">console</span>.log(getCss(outer,<span class="string">'border'</span>));</span><br></pre></td></tr></table></figure><h2 id="jQuery-JQ"><a href="#jQuery-JQ" class="headerlink" title="jQuery(JQ)"></a>jQuery(JQ)</h2><p> JQ是一个非常优秀的JS类库。<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类库、插件、UI组件、框架</span></span><br><span class="line"><span class="comment"> *  1，类库：JQ/ZEPTO... 提供一些真实项目中常用的方法，任何项目都可以把类库导入进来，调取里面的方法实现自己需要的业务逻辑；</span></span><br><span class="line"><span class="comment"> *  2，插件：具备一定的业务功能，例如，我们可以封装轮播图插件、选项卡插件、模态狂插件等（规定了当前这个功能的样式结构，把实现功能的JS进行封装，以后想实现这个功能，直接导入插件即可）swiper\iscroll\jquery-dialog\jquery-drag\jquery-datepicker\ECharts；</span></span><br><span class="line"><span class="comment"> *  3，UI组件：把结构、css、js全部都封装好了，我们想实现一个功能，直接导入进来即可（可能会偶尔需要我们修改下，但是改动不多）bootstrap...</span></span><br><span class="line"><span class="comment"> *  4, 框架：具备一定的编程思想，要求我们按照他们的框架思想开发，一般框架中提供了常用的类库方法，强大的功能插件，有的也提供了强大的UI组件 React \ Vue \ Angular \ Backbone \ Sea.js \ Require.js...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jQuery非常优秀的JS“类库”</span></span><br><span class="line"><span class="comment"> *      -&gt; 基于原生JS封装的一个类库，提供了很多的方法，而且这些方法是兼容所有浏览器的；</span></span><br><span class="line"><span class="comment"> *      -&gt; JQ版本 </span></span><br><span class="line"><span class="comment"> *              v1 (常用) 1.8.7 1.9.3  1.11.3</span></span><br><span class="line"><span class="comment"> *              v2 </span></span><br><span class="line"><span class="comment"> *              v3</span></span><br><span class="line"><span class="comment">//  */</span></span><br></pre></td></tr></table></figure></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> version = <span class="string">"1.11.3"</span>,</span><br><span class="line">    jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</span><br><span class="line"><span class="comment">// The jQuery object is actually just the init constructor 'enhanced'</span></span><br><span class="line"><span class="comment">// Need init if jQuery is called (just allow error to be thrown if not included)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init( selector, context ); <span class="comment">//创建了init这个类的实例，相当于也创建了JQ这个类的实例，因为在后面的时候，让init.prototype=jQuery.prototype</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//JQ是一个类，在它的原型上提供了很多属性和方法，供JQ的实例调取使用</span></span><br><span class="line">    jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">        <span class="comment">// The current version of jQuery being used</span></span><br><span class="line">        jquery: version,</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">constructor</span>: jQuery, // 原型重定向之后，自己开辟的堆内存中是没有<span class="keyword">constructor</span>,需要手动增加，保证它的完整性。</span><br><span class="line">    </span><br><span class="line">        // Start with an empty selector</span><br><span class="line">        selector: ""</span><br><span class="line">        //...</span><br><span class="line">    &#125;;</span><br><span class="line">    //给JQ原型上增加extend方法，同时把JQ当作一个普通对象，给这个对象设置了一个私有的方法</span><br><span class="line">    /**</span><br><span class="line">     * JQ是一个类，也是一个普通对象，这是函数的两种角色；JQ是一个类库，提供了很多方法，其中这些方法有两部分</span><br><span class="line">     *      1，放到JQ原型上的，这里面的方法是供JQ的实例调取使用的</span><br><span class="line">     *      2，把JQ当作一个普通的对象，在对象上设置一些私有的属性和方法，这类方法以后用的时候直接jQuery.xxx()执行即可</span><br><span class="line">     */</span><br><span class="line">    jQuery.extend = jQuery.fn.extend = function() &#123;</span><br><span class="line">        <span class="comment">//把一个对象中的属性和方法扩展到指定的对象上</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    jQuery.extend(&#123;</span><br><span class="line">        isFunction:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        isArrary:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//JQ上多了方法isFunction, isArray...</span></span><br><span class="line">    jQuery.fn.extend(&#123;</span><br><span class="line">        find:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// 往JQ的原型上添加新的方法find</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">// 把init当作一个类，但是让这个类的原型指向了JQ的原型（init的实例最后找到的是JQ这个类的原型上的方法，init的实例也可以理解为JQ的实例）</span></span><br><span class="line">    <span class="keyword">var</span> init = jQuery.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;&#125;;</span><br><span class="line">    init.prototype=jQuery.fn;</span><br><span class="line">    <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    <span class="keyword">return</span> jQuery;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">$()<span class="comment">//创建了一个jQuery的实例，可以调取jQuery.fn上的方法</span></span><br><span class="line">$.isFunction();<span class="comment">// 把jQuery当作一个普通对象，直接使用对象上的方法，这些方法和实例没有关系</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=&gt; JQ选择器:基于各种选择器创建一个JQ实例（JQ对象）</span></span><br><span class="line"><span class="comment">//1. selector 选择器的类型（一般都是字符串，但是支持函数或者元素对象）</span></span><br><span class="line"><span class="comment">//2. context 基于选择器获取元素的时候指定的上下文（默认document）</span></span><br><span class="line"><span class="comment">//JQ对象：一个类数组结构（JQ实例），这个类数组集合中包含了获取到的元素</span></span><br><span class="line"><span class="comment">// console.log($('.tabBox'));</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JQ对象（类数组）=&gt;JQ实例</span></span><br><span class="line"><span class="comment"> * 0:div.tabBox 获取到的元素</span></span><br><span class="line"><span class="comment"> * length:1</span></span><br><span class="line"><span class="comment"> * context:document</span></span><br><span class="line"><span class="comment"> * selector: '.tabBox'</span></span><br><span class="line"><span class="comment"> * _proto_:jQuery.prototype</span></span><br><span class="line"><span class="comment"> *      add:</span></span><br><span class="line"><span class="comment"> *      ...</span></span><br><span class="line"><span class="comment"> *      _proto_: Object.prototype</span></span><br><span class="line"><span class="comment"> *          hasOwnProperty:</span></span><br><span class="line"><span class="comment"> *          ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取页面中的元素对象</span></span><br><span class="line"><span class="comment">  *     1.基于原生JS提供的属性和方法获取=&gt;"原生JS对象"</span></span><br><span class="line"><span class="comment">  *         可以调取使用内置的JS属性和方法 className,onclick,...</span></span><br><span class="line"><span class="comment">  *     2.基于JQ选择器获取=&gt;JQ对象</span></span><br><span class="line"><span class="comment">  *         可以调取JQ原型上提供的方法</span></span><br><span class="line"><span class="comment">  *         add</span></span><br><span class="line"><span class="comment">  *         find</span></span><br><span class="line"><span class="comment">  *         ...</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">//$('.tabBox').className += 'clearfix'; </span></span><br><span class="line"><span class="comment">// 没法使用，$原型上没有这些方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把JQ对象和原生JS对象之间相互转化</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1 JQ对象 -&gt; 原生JS对象</span></span><br><span class="line"><span class="comment"> *      JQ对象是一个类数组结合，集合中每一个索引对象的都是原生JS对象，我们基于索引获取即可</span></span><br><span class="line"><span class="comment"> *          let $tabBox=$(".tabBox"); 变量名前面是以$开头的，一般代表基于JQ选择器获取的结果</span></span><br><span class="line"><span class="comment"> *          let tabBox=$tabBox[0]; </span></span><br><span class="line"><span class="comment"> *              获取$tabBox.get(0);get是JQ原型提供的方法，供JQ实例基于索引获取到指定的JS对象 </span></span><br><span class="line"><span class="comment"> *                  $tabBox.eq(0); 它也是基于索引获取集合中的某一项，只不过get获取到的是JS对象，EQ会把获取到的结果包裹成一个新的JQ对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2 原生JS对象 -&gt; JQ对象</span></span><br><span class="line"><span class="comment"> *      let tabBox=document.querySelector('.tabBox');</span></span><br><span class="line"><span class="comment"> *      $(tabBox); 直接使用$把原生JS对象包裹起来，就可以把JS对象转化为JQ对象（因为$()执行就是创建JQ的一个实例）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 看选择器源码，我们发现selector传递的值支持三种类型</span></span><br><span class="line"><span class="comment">  *     1 STRING</span></span><br><span class="line"><span class="comment">  *     2 元素对象 selector.nodeType 把JS对象转化为JQ对象</span></span><br><span class="line"><span class="comment">  *     3 函数 把传递的函数执行，并且把jQuery当作实参传给函数 selector(jQuery);</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">/*  $(function($)&#123;</span></span><br><span class="line"><span class="comment">     //=&gt;$: 传递进来的jQuery</span></span><br><span class="line"><span class="comment">     //</span></span><br><span class="line"><span class="comment">     console.log($);</span></span><br><span class="line"><span class="comment"> &#125;); */</span></span><br><span class="line"></span><br><span class="line"> $=<span class="string">'呱呱呱'</span>;</span><br><span class="line"> jQuery(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">     <span class="comment">//$:是私有变量，而且特定就是JQ</span></span><br><span class="line">     $();</span><br><span class="line"> &#125;);</span><br><span class="line"> jQuery(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="comment">//函数肯定会执行，但是会在当前页面中的HTML结构都加载完成后再执行</span></span><br><span class="line">     <span class="comment">//函数执行会形成一个闭包</span></span><br><span class="line"></span><br><span class="line"> &#125;);</span><br><span class="line"> $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// 写自己的代码</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//JQ中常用的方法</span></span><br><span class="line"><span class="comment">/* $(document).ready(function()&#123;</span></span><br><span class="line"><span class="comment">    $('&lt;a href="https://www.baidu.com"&gt;&lt;/a&gt;')[0].click();</span></span><br><span class="line"><span class="comment">&#125;); */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JQ选择器的selector可以是字符串，字符串这种格式也有两种</span></span><br><span class="line"><span class="comment"> *      1 选择器</span></span><br><span class="line"><span class="comment"> *      2 html字符串拼接的结构：把拼接好的html字符串转换为JQ对象，然后基于append-to方法追加到页面当中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$(<span class="string">'&lt;div id="AA"&gt;&lt;/div&gt;'</span>).appendTo(<span class="built_in">document</span>.body);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JQ中的each方法是用来进行遍历（类似数组中的FOR-EACH</span></span><br><span class="line"><span class="comment"> * 【可遍历对象】</span></span><br><span class="line"><span class="comment"> * 1.数组</span></span><br><span class="line"><span class="comment"> * 2 对象</span></span><br><span class="line"><span class="comment"> * 3 类数组（JQ对象）</span></span><br><span class="line"><span class="comment"> * 。。。</span></span><br><span class="line"><span class="comment"> * 【三种EACH】</span></span><br><span class="line"><span class="comment"> * 1 给JQUERY设置的私有属性 $.each();</span></span><br><span class="line"><span class="comment"> * 2 给实例设置的公有属性 $([SELECTOR]).each();</span></span><br><span class="line"><span class="comment"> * 3 内置的EACH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$.each([<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>],(index,item)=&gt;&#123;</span><br><span class="line">    <span class="comment">//=&gt; 参数的顺序和内置的FOR-EACH相反</span></span><br><span class="line">    <span class="built_in">console</span>.log(index,item);</span><br><span class="line">&#125;);</span><br><span class="line">$.each(&#123;<span class="attr">name</span>:<span class="string">'xxx'</span>,<span class="attr">age</span>:<span class="number">25</span>,<span class="number">0</span>:<span class="number">100</span>&#125;,(key,value)=&gt;&#123;</span><br><span class="line">    <span class="comment">//原理就是FOR-IN循环</span></span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* $('.tabBox li').each(function(index,item)&#123;</span></span><br><span class="line"><span class="comment">    //非箭头函数：this===item,当前遍历的项（原生JS对象）</span></span><br><span class="line"><span class="comment">    //$(this),把原生JS对象转化为JQ对象</span></span><br><span class="line"><span class="comment">    $(this).on('click',function()&#123;</span></span><br><span class="line"><span class="comment">        //this</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">    $(this).click(function()&#123;</span></span><br><span class="line"><span class="comment">        //this: 原生JS对象</span></span><br><span class="line"><span class="comment">        $(this).css(&#123;</span></span><br><span class="line"><span class="comment">            color:'red'</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">&#125;); */</span></span><br><span class="line">$(<span class="string">'.tabBox li'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//集合中有三个，我们此处相当于给三个Li都绑定了点击事件，JQ在调取click的时候，首先会默认的把集合进行each遍历，然后把每一项都绑定点击事件</span></span><br><span class="line">    $(<span class="keyword">this</span>).css(&#123;</span><br><span class="line">        color:<span class="string">'red'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'.tabBox li'</span>).css(&#123;<span class="attr">color</span>:<span class="string">'green'</span>&#125;);</span><br><span class="line"><span class="comment">//JQ中的大部分方法都会对对象进行each</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * addClass</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">jQuery.noConflict();<span class="comment">//转让JQ使用$的权利</span></span><br><span class="line"><span class="built_in">console</span>.log($); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zzz=jQuery.noConflict(<span class="literal">true</span>);<span class="comment">// 深度转让/*  */</span></span><br><span class="line"><span class="built_in">console</span>.log(jQuery); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(zzz); <span class="comment">// jQuery</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $.ajax(&#123;url:'',method:get,async:false，success:function()&#123;&#125;&#125;);  直接得到的就是JSON格式的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="comment">//toggle切换</span></span><br><span class="line"><span class="comment">//jQ里面常用的筛选方法有三个：</span></span><br><span class="line"><span class="comment">//filter:同级筛选</span></span><br><span class="line"><span class="comment">//children:子集筛选</span></span><br><span class="line"><span class="comment">//find:后代筛选</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=&gt;当html结构都加载完成执行函数</span></span><br><span class="line"><span class="comment">/* jQuery(function ($) &#123;</span></span><br><span class="line"><span class="comment">    let $tabBox = $('.tabBox'),</span></span><br><span class="line"><span class="comment">        $tabList = $tabBox.find('.header&gt;li'),</span></span><br><span class="line"><span class="comment">        $divList = $tabBox.children('div');</span></span><br><span class="line"><span class="comment">    //基于JQ内置的each机制，给每一个li都绑定了点击事件</span></span><br><span class="line"><span class="comment">    $tabList.on('click', function () &#123;</span></span><br><span class="line"><span class="comment">        let index = $(this).index();</span></span><br><span class="line"><span class="comment">        $(this).addClass('active')</span></span><br><span class="line"><span class="comment">            .siblings().removeClass('active')</span></span><br><span class="line"><span class="comment">            .parent().nextAll('div').eq(index).addClass('active')</span></span><br><span class="line"><span class="comment">            .siblings('div').removeClass('active');</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">jQuery(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".tabBox&gt;.header&gt;li"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> index = $(<span class="keyword">this</span>).index();</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>)</span><br><span class="line">            .siblings().removeClass(<span class="string">'active'</span>)</span><br><span class="line">            .parent().nextAll(<span class="string">'div'</span>).eq(index).addClass(<span class="string">'active'</span>)</span><br><span class="line">            .siblings(<span class="string">'div'</span>).removeClass(<span class="string">'active'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>补充：<br>&lt;!–<br>    块级元素，默认宽度为父级元素的100%；<br>    如果块级元素的子元素全部都是position:absolute的话，宽度为100%，高度为0<br>    position:relative是相对于自己的定位；position:absolute是相对于父级元素的的定位；</p><pre><code>float, absolute都会让元素脱离文档流， clear：left|right|both|none;表示清除元素左|右|两边|none的浮动元素（float属性不为none的元素，float属性值为none的元素不受影响）p span a i strong b img td等都是行内元素div header table tr section ul li等都是块级元素inline-block行内块：位置在行内，但是拥有宽度、高度等块级元素的属性</code></pre><p> –&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇的主要内容是盒子模型和jQuery的介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则</title>
    <link href="https://abluecup.github.io/2019/04/29/%E6%AD%A3%E5%88%99/"/>
    <id>https://abluecup.github.io/2019/04/29/正则/</id>
    <published>2019-04-29T08:24:35.000Z</published>
    <updated>2019-07-04T09:28:32.325Z</updated>
    
    <content type="html"><![CDATA[<p>恰如其分得使用正则，能够减少代码的冗余量；<br><a id="more"></a></p><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><p>是一个用来处理字符串的规则</p><blockquote><p>正则只能用来处理字符串<br>    1:验证当前字符串是否符合某个规则（正则匹配）<br>    2：把一个字符串中符合规则的字符获取到（正则捕获）<br>学习正则其实是学习如何编写规则，每一个正则都是由“元字符”、“修饰符”两部分组成</p></blockquote><h3 id="创建正则的两种方式"><a href="#创建正则的两种方式" class="headerlink" title="创建正则的两种方式"></a>创建正则的两种方式</h3><p>1.字面量方式<br><code>let reg = /^\d+$/g;</code></p><p>2.构造函数方式<br><code>let reg =new RegExp(&#39;^\\d+$&#39;,&#39;g&#39;)</code></p><h3 id="元字符和修饰符"><a href="#元字符和修饰符" class="headerlink" title="元字符和修饰符"></a>元字符和修饰符</h3><p>两个//之间的都是元字符，/后面出现的都是修饰符<br>^ caret</p><h4 id="常用的修饰符"><a href="#常用的修饰符" class="headerlink" title="常用的修饰符"></a>常用的修饰符</h4><p>i,m,g</p><blockquote><p>i: ignoreCase 忽略大小写<br>m: multiline 多行匹配<br>g: global 全局匹配</p></blockquote><h4 id="常用的元字符"><a href="#常用的元字符" class="headerlink" title="常用的元字符"></a>常用的元字符</h4><p>『特殊元字符』<br>我们简单介绍常用的16个元字符：<br>    \d  0-9之间的数字<br>    \D  非0-9之间的任意字符<br>    \w  数字、字母、下划线中的任意一个  =&gt; /[0-9a-zA-Z_]/<br>    \W  数字、字母、下划线外的任意一个<br>    \s  匹配任意一个空白字符（包括\t制表符）<br>    \b  匹配边界符  ‘zhu’ z左边和u右边就是边界  ‘zhu-feng’ z左边、u右边、f左边、g右边都是边界<br>    \n  匹配一个换行符<br>    \   转义字符：把一个普通字符转义为特殊的字符，例如\d; 把有特殊含义的转化为普通意思,例如. 表示一个小数点  (.  不仅仅是小数点，代表除了\n以外的任意字符)<br>    ^   以某个元字符开头 发音：[‘kærət]<br>    $   以某个元字符结尾<br>    |   x|y 表示x或者y中的任意一个<br>    []  [xyz] 表示x,y,z中的任意一个 [^xyz] 除了x,y,z之外的任意一个字符 [a-z]获取a-z中的任意一个字符  [0-9] == \d  [^0-9] == \D<br>    () 正则分组<br>    (?:) 当前分组只匹配，不捕获<br>    (?=) 正向预查<br>    (?!) 负向预查<br>    …</p><p>『量词元字符』：让其左边的元字符出现多少次</p><pre><code>* 出现0到多次? 出现零到一次+ 出现一到多次{n} 出现n次{n,} 出现n到多次{n,m} 出现n到m次</code></pre><p>『普通元字符』<br>    只要在正则中出现的元字符（在基于字面方式创建），除了特殊和有量词意义的以外，都是普通元字符。</p><h3 id="的一些细节"><a href="#的一些细节" class="headerlink" title="[]的一些细节"></a>[]的一些细节</h3><p>[xyz]<br>[^xyz]<br>[a-z]<br>[^a-z]<br>1.在[]中出现的元字符一般都是代表本身含义的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^.$/</span>;  里面是任意字符</span><br><span class="line"><span class="comment">//一个正则设置了^$,那么代表的含义其实就是只能是xxx</span></span><br><span class="line"><span class="keyword">let</span> reg1=<span class="regexp">/^[.]+$/</span> [.]只能是 . </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg2=<span class="regexp">/^[\d]$/</span>; \d依然代表的是<span class="number">0</span><span class="number">-9</span>中的任意数字</span><br></pre></td></tr></table></figure></p><p>2.[]中出现的两位数，不是两位数，而是两个数字中的任意一个<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="comment">// 不加^$,代表字符串中只要包含xx即可</span></span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="number">8</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="number">18</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg1=<span class="regexp">/^[18]$/</span>; <span class="comment">// 18中的一个</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="number">8</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="number">18</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg3=<span class="regexp">/^[12-65]$/</span>;<span class="comment">//表示1或者2-6或者5 </span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="number">13</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="number">5</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>思考题：年龄在18-65之间<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 18,19 1[89]</span></span><br><span class="line"><span class="comment"> * 20-59 [2-5][0-9]</span></span><br><span class="line"><span class="comment"> * 60-65 6[0-5]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/^(([2-5][0-9])|(1[89])|(6[0-5]))$/</span>;</span><br></pre></td></tr></table></figure></p><p>思考题：编写一个规则，匹配”[object AAA]”<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/^\[object .+\]$/</span></span><br></pre></td></tr></table></figure></p><h3 id=""><a href="#" class="headerlink" title="()"></a>()</h3><ol><li><p>分组的作用<br> a 改变默认的优先级</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/^(18|19)$/</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /^18|19$/表示的是1开头，9结尾，中间夹一个8或者1</span></span><br><span class="line"><span class="comment"> * /^(18|19)$/表示的是18或者19中的一个</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p> b 分组捕获<br> c 分组引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 正则捕获：把一个字符串中和正则匹配到的部分获取到</span></span><br><span class="line"><span class="comment">* 【正则】</span></span><br><span class="line"><span class="comment">* exec  [ɪg'zek; eg-]</span></span><br><span class="line"><span class="comment">* test</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 【字符串】</span></span><br><span class="line"><span class="comment">* replace</span></span><br><span class="line"><span class="comment">* match</span></span><br><span class="line"><span class="comment">* split</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 基于exec可以实现正则捕获，</span></span><br><span class="line"><span class="comment">* 1. 如果当前字符和正则不匹配，捕获到的结果是null;</span></span><br><span class="line"><span class="comment">* 2. 如果匹配，获取到的是一个数组</span></span><br><span class="line"><span class="comment">* 0：大正则捕获的内容</span></span><br><span class="line"><span class="comment">* index ： 正则捕获的起始索引</span></span><br><span class="line"><span class="comment">* input: 源字符串</span></span><br><span class="line"><span class="comment">* 3. 执行一次exec只能捕获到第一个和正则匹配的内容，其余匹配的内容还没有捕获到，而且执行多次，也无法获取到之后匹配的内容=&gt;正则的捕获有懒惰行：只能匹配到第一个匹配的内容，剩下的匹配不到</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'zhufeng2018peixun2019yangfan2020qihang2021'</span>;</span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="comment">/* console.log(reg1.test(str)) true;</span></span><br><span class="line"><span class="comment">console.log(reg1.exec(str)); </span></span><br><span class="line"><span class="comment">[ '2018',</span></span><br><span class="line"><span class="comment">  index: 7,</span></span><br><span class="line"><span class="comment">  input: 'zhufeng2018peixun2019yangfan2020qihang2021' ]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg1.lastIndex); <span class="comment">// 0 正则捕获的时候，下一次在字符串中开始查找的索引</span></span><br><span class="line"><span class="comment">//lastIndex不变导致了懒惰性</span></span><br><span class="line"><span class="comment">//即使我们手动修改了lastIndex的值，也没什么用</span></span><br><span class="line"><span class="comment">//解决懒惰性问题: 加全局修饰符g; 如果不加g，不管用什么方法，都无法把全部匹配的捕获到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="comment">/* console.log(reg2.lastIndex);</span></span><br><span class="line"><span class="comment">console.log(reg2.exec(str));</span></span><br><span class="line"><span class="comment">console.log(reg2.lastIndex);</span></span><br><span class="line"><span class="comment">//console.log(reg2.exec(str)); */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">RegExp</span>.prototype.myExecAll = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line"><span class="comment">//this:reg当前操作的正则</span></span><br><span class="line"><span class="comment">//str: 我们要捕获的字符串</span></span><br><span class="line"><span class="comment">//具体捕获多少次不定，直到捕获到null为止，期间把捕获到的内容存储到数组中即可</span></span><br><span class="line"><span class="comment">// 为了防止死循环，我们需要对正则进行检验</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.global) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.exec(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = [],</span><br><span class="line">valAry = <span class="keyword">this</span>.exec(str);</span><br><span class="line"><span class="keyword">while</span> (valAry) &#123;</span><br><span class="line">result.push(valAry[<span class="number">0</span>]); <span class="comment">// 把每一次正则捕获到的内容存储到容器当中，最后把result返回</span></span><br><span class="line">valAry = <span class="keyword">this</span>.exec(str);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//console.log(reg2.myExecAll(str));</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg1));</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg2)); <span class="comment">//[ '2018', '2019', '2020', '2021' ] match 实现了我们自己编写的execAll处理的事情，正则不加g，返回第一个即可，加g，把所有匹配的内容都捕获到，最后存储到一个数组中返回</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">'zhufeng&#123;2018&#125;peixun&#123;2019&#125;yangfan&#123;2020&#125;qihang&#123;2021&#125;'</span>;</span><br><span class="line"><span class="keyword">let</span> reg4=<span class="regexp">/\&#123;(\d+)\&#125;/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg4.exec(str1)); <span class="comment">// 在正则捕获的时候，如果正则中存在分组，捕获的时候不仅仅把大正则匹配到的字符捕获到（数组的第一项），而且把小分组匹配的内容也单独抽取出来（数组中第二项</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1.match(reg4)); <span class="comment">//match 有局限性，在正则设置g的情况下，基于match捕获的内容只有大正则匹配的内容，小分组的内容没有单独抽取出来；不设置g的情况下和执行exec一样。</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="/2019/04/29/正则/0.png" alt="alt name"><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 正则捕获的贪婪性</span></span><br><span class="line"><span class="comment">* 每一次匹配捕获的时候，总是匹配到和正则匹配中最长的内容：我们捕获到的不是2，而是2018</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.exec(str));</span><br><span class="line"><span class="comment">//解决方案：在量词后面加个?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg5=<span class="regexp">/\d+?/</span>; <span class="comment">//此时?不是出现0-1次，而是取消捕获的贪婪性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ?在正则中的作用</span></span><br><span class="line"><span class="comment">* 1. 量词元字符：出现0-1次</span></span><br><span class="line"><span class="comment">* 2. 取消贪婪性 /\d+?/ 只捕获最短匹配的内容</span></span><br><span class="line"><span class="comment">* 3. ?: 只匹配不捕获</span></span><br><span class="line"><span class="comment">* 4. ?= 正向预查</span></span><br><span class="line"><span class="comment">* 5. ?! 负向预查</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h3 id="更多的捕获方式"><a href="#更多的捕获方式" class="headerlink" title="更多的捕获方式"></a>更多的捕获方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">"zhufeng2018peixun2019"</span>;</span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex); <span class="comment">// 11</span></span><br><span class="line"><span class="comment">//基于test进行捕获的时候，如果设置了g，test匹配也相当于捕获，修改了last-index的值</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">'zhufeng2018'</span>;</span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="keyword">if</span>(reg.test(str))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reg.exec(str)); <span class="comment">// null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">'zhufeng2018'</span>;</span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str)); <span class="comment">// 2018</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(<span class="string">'zhufeng2018peixun2019'</span>)); <span class="comment">// 2019</span></span><br><span class="line"><span class="comment">//虽然捕获的不是同一个字符串，但是同一个正则，上一次正则处理的时候修改了它的last-index,也会对下一次匹配的字符串产生影响</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">'zhufeng2018peixun2019'</span>;</span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/(\d+)/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">// 2018</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把上一次匹配到的结果获取到，获取的是第一个小分组匹配的内容，大正则匹配的内容无法获取到</span></span><br><span class="line"><span class="comment"> * 它是一个全局的值，浏览器中$1只有一个，其他的正则操作也会覆盖这个值，所以没有什么用处</span></span><br><span class="line"><span class="comment"> *  */</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">//2019</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">//2019</span></span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * replace:实现正则捕获（本身是字符串替换）</span></span><br><span class="line"><span class="comment"> * 原理：每一次正则匹配的结果都把函数执行，然后基于EXEC把本次匹配的信息捕获到，然后把捕获的信息传递给这个函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'zhufeng2018zhufeng2019'</span>;</span><br><span class="line"><span class="comment">//zhufeng =&gt; zhufengpeixun</span></span><br><span class="line"><span class="comment">//真实项目中，很多需求不基于正则是无法实现替换的</span></span><br><span class="line">str=str.replace(<span class="regexp">/zhufeng/g</span>,<span class="string">'zhufengpeixun'</span>);</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/zhufeng/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="keyword">let</span> str1=<span class="string">'zhufeng&#123;val:2018&#125;zhufeng&#123;val:2019&#125;'</span>;</span><br><span class="line"><span class="keyword">let</span> reg1=<span class="regexp">/\&#123;val:(\d+)\&#125;/g</span>;</span><br><span class="line"><span class="comment">//str1=str1.replace(reg1,'@'); </span></span><br><span class="line">str1=str1.replace(reg1,<span class="string">'$1'</span>);<span class="comment">//此处的$1代表第一个分组匹配的内容，等价于RegExp.$1 zhufeng2018zhufeng2019</span></span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//zhufeng@zhufeng@ </span></span><br><span class="line"><span class="comment">/*用reg正则和str字符串进行匹配，匹配几次就替换几次，</span></span><br><span class="line"><span class="comment">每一次都是把当前“大正则”匹配的结果用第二个传递的字符串替换掉了*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * replace:实现正则捕获（本身是字符串替换）</span></span><br><span class="line"><span class="comment"> * 原理：每一次正则匹配的结果都把函数执行，然后基于EXEC把本次匹配的信息捕获到，然后把捕获的信息传递给这个函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'zhufeng2018zhufeng2019'</span>;</span><br><span class="line"><span class="comment">//zhufeng =&gt; zhufengpeixun</span></span><br><span class="line"><span class="comment">//真实项目中，很多需求不基于正则是无法实现替换的</span></span><br><span class="line">str=str.replace(<span class="regexp">/zhufeng/g</span>,<span class="string">'zhufengpeixun'</span>);</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/zhufeng/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="keyword">let</span> str1=<span class="string">'zhufeng&#123;val:2018&#125;zhufeng&#123;val:2019&#125;'</span>;</span><br><span class="line"><span class="keyword">let</span> reg1=<span class="regexp">/\&#123;val:(\d+)\&#125;/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1 reg 和 str 匹配多少次，函数就被处罚执行多少次，而且传递了一些参数信息值；</span></span><br><span class="line"><span class="comment"> * 2 每一次arg中国存储的信息，和执行exec捕获到的信息相似</span></span><br><span class="line"><span class="comment"> * 3 每一次函数中返回的是啥，就把当前大正则匹配的内容替换成啥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str = str1.replace(reg1, (...arg)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'AA'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h3 id="时间字符串格式化"><a href="#时间字符串格式化" class="headerlink" title="时间字符串格式化"></a>时间字符串格式化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间字符串格式化</span></span><br><span class="line"><span class="built_in">String</span>.prototype.myFormatTime = <span class="function"><span class="keyword">function</span> (<span class="params">template = <span class="string">'&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日 &#123;3&#125;时&#123;4&#125;分&#123;5&#125;秒'</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//this:str</span></span><br><span class="line">    <span class="keyword">let</span> ary = <span class="keyword">this</span>.match(<span class="regexp">/\d+/g</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> item &lt; <span class="number">10</span> ? <span class="string">'0'</span> + item : item);</span><br><span class="line">    <span class="keyword">return</span> template.replace(<span class="regexp">/\&#123;(\d)\&#125;/g</span>, (...[, index]) =&gt; ary[index] || <span class="string">'00'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'2018/4/30'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.myFormatTime(<span class="string">'&#123;0&#125;:&#123;1&#125;:&#123;2&#125; &#123;3&#125;:&#123;4&#125;:&#123;5&#125;'</span>));</span><br></pre></td></tr></table></figure><p>正则闯关游戏:<br><a href="https://alf.nu/RegexGolf" target="_blank" rel="noopener">https://alf.nu/RegexGolf</a></p><p>([a-z]{3}).*\1<br>\1表示重复前面的括号内的规则([a-z]{3})</p><p>^(?!.<em>([a-z])([a-z])\2\1);<br>不包含baidu开头 /^.</em>(?!baidu).*$/</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;恰如其分得使用正则，能够减少代码的冗余量；&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="正则" scheme="https://abluecup.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>less</title>
    <link href="https://abluecup.github.io/2019/04/29/less/"/>
    <id>https://abluecup.github.io/2019/04/29/less/</id>
    <published>2019-04-29T07:18:27.000Z</published>
    <updated>2019-06-27T09:34:40.961Z</updated>
    
    <content type="html"><![CDATA[<p>less是css预编译语言，能够提高css的书写，本片是对less的基本介绍<br><a id="more"></a></p><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><blockquote><p>它是css预编译语言，和它类似的还有sass/stylus…<br>css是标记语言，不是编程语言，没有类、实例、函数、变量等东西。而less等预编译语言就是让css具备面向对象编程的思想，但是浏览器不能直接识别和渲染less代码，需要我们把less代码预先编译为正常的css后，再交给浏览器渲染解析</p></blockquote><h3 id="less的编译"><a href="#less的编译" class="headerlink" title="less的编译"></a>less的编译</h3><ul><li><p>在开发环境下编译（产品还没有开发完，正在开发中，这个是开发环境）</p><blockquote><p>导入less.js即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rel="stylesheet/less"</span></span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet/less"</span> href=<span class="string">"css/index.less"</span>/&gt;</span><br><span class="line"><span class="comment">// 导入js文件</span></span><br><span class="line">    &lt;script src=<span class="string">"js/less-2.5.3.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>在生产环境下（产品开发完需要部署到服务器上）</p><blockquote><p>项目上线，不能把less部署上线，这样用户每一次打开页面都需要重新编译，非常好性能，我们不到服务器上的都是编译后的css</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 在当前电脑的全局环境下安装less模块</span><br><span class="line">    $ npm install less -g</span><br><span class="line">    验证是否安装成功</span><br><span class="line">2. 基于命令把less编译成css</span><br><span class="line">    $ lessc a.less b.min.css -x </span><br><span class="line">    -x 是压缩</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>编译完成后，部署到生产环境中的是编译后的b.min.css</p><ul><li>目前基于webpack和框架实现工程化开发的时候，我们都是在webpack配置文件中，配置出less的编译（需要安装less/less-loader等模块），这样不管是开发环境下的预览，还是部署到生产环境下，都是基于webpack中的Less模块编译的</li></ul><h3 id="less的基础语法"><a href="#less的基础语法" class="headerlink" title="less的基础语法"></a>less的基础语法</h3><h4 id="less中的变量"><a href="#less中的变量" class="headerlink" title="less中的变量"></a>less中的变量</h4><blockquote><p>用一个变量存储一个公共值，后期需要使用这个值，直接调取这个变量即可，以后如果值需要修改iazhixuyao更改变量的值，那么所有用到这个变量的地方都跟着修改</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">.centerPos(@w: 100, @h: 100) &#123;</span><br><span class="line">    <span class="selector-tag">position</span>   : <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">top</span>        : 50%;</span><br><span class="line">    <span class="selector-tag">left</span>       : 50%;</span><br><span class="line">    <span class="selector-tag">margin-top</span> : <span class="selector-tag">unit</span>(<span class="selector-tag">-</span>(@<span class="keyword">w</span>/<span class="keyword">2</span>), px);</span><br><span class="line">    <span class="selector-tag">margin-left</span>: <span class="selector-tag">unit</span>(<span class="selector-tag">-</span>(@<span class="keyword">h</span>/<span class="keyword">2</span>), px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 变量 */</span></span><br><span class="line">@link-color: #555;</span><br><span class="line">@<span class="keyword">bg</span>-<span class="keyword">src</span>    : <span class="string">'../img'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width </span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    .centerPos(400, 400);</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-tag">lightblue</span>;</span><br><span class="line">    background:url("@&#123;bg-src&#125;/1.jpg") no-repeat;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: @link-color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 函数 */</span></span><br><span class="line">.transition(@property:all,@duration:.5s,@timing-function:linear,@delay:0)&#123;</span><br><span class="line">    <span class="selector-tag">-webkit-transition</span>: @<span class="keyword">arguments</span>;</span><br><span class="line">    <span class="selector-tag">-moz-transition</span>: @<span class="keyword">arguments</span>;</span><br><span class="line">    <span class="selector-tag">-ms-transition</span>:@<span class="keyword">arguments</span>;</span><br><span class="line">    <span class="selector-tag">-o-transition</span>: @<span class="keyword">arguments</span>;</span><br><span class="line">    <span class="selector-tag">transition</span>: @<span class="keyword">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 嵌套 */</span></span><br><span class="line">@H:200;</span><br><span class="line"><span class="selector-class">.pub</span>&#123;</span><br><span class="line">    @H:100;</span><br><span class="line">    <span class="selector-class">.bg</span>&#123; <span class="comment">/* .pub .bg */</span></span><br><span class="line"></span><br><span class="line">        a&#123;</span><br><span class="line">            <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span><br><span class="line">            <span class="selector-tag">width</span><span class="selector-pseudo">:unit(</span>@<span class="keyword">H</span>,<span class="keyword">px</span>); <span class="comment">/* @H是300，按照嵌套层，逐层往外查询 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        @H:300;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp; &gt; <span class="selector-class">.bg</span>&#123;</span><br><span class="line">        <span class="comment">/* .pub &gt; .bg */</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-class">.bg</span>&#123;</span><br><span class="line">        <span class="comment">/* .pub .bg */</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般我们会把函数和变量存放到一个单独的less文件中，然后在文件中导入，使用 <code>@import (reference) &#39;common&#39;;</code> reference是指不会编译common中的内容</p><h3 id="商城排序中的less"><a href="#商城排序中的less" class="headerlink" title="商城排序中的less"></a>商城排序中的less</h3><p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>商城排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;link rel="stylesheet/less" href="css/index.less"&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src="js/less-2.5.3.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"headerBox"</span> <span class="attr">id</span>=<span class="string">"headerBox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>排序<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>上架时间<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>热度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"productBox clearfix"</span> <span class="attr">id</span>=<span class="string">"productBox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../SHOP/img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"来的感觉的管理法规和；国家宏观"</span>&gt;</span>来的感觉的管理法规和；国家宏观<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>￥4888<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>时间：2014-01-01<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>热度：999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        真实项目中，我们经常使用a标签做一些点击的按钮</span></span><br><span class="line"><span class="comment">            1.因为a标签的:hover伪类兼容所有浏览器</span></span><br><span class="line"><span class="comment">            a标签的href属性存储的是点击需要跳转的页面，或者是#xxx,这个是hash定位，如果指向让其作为一个普通的按钮，我们需要组织a变迁的默认跳转行为 &lt;a href="javascript:;"&gt;排序&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../SHOP/json/product.json"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>common.less<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@con-bg:</span> <span class="number">#fff</span>;</span><br><span class="line"><span class="variable">@text-black :</span> <span class="number">#555</span>;</span><br><span class="line"><span class="variable">@text-gray  :</span> <span class="number">#999</span>;</span><br><span class="line"><span class="variable">@text-active:</span> <span class="number">#e01d20</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.transition</span>(<span class="variable">@property</span>: all, <span class="variable">@duration</span>: <span class="number">1s</span>, <span class="variable">@timing-function</span>: linear, <span class="variable">@delay</span>: <span class="number">0s</span>) &#123;</span><br><span class="line">  <span class="attribute">-webkit-transition</span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">-moz-transition   </span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">-ms-transition    </span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">-o-transition     </span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">transition        </span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>index.less<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">reset是清空默认样式，不仅需要导入进来使用，最后需要和我们写的css一起编译，放到浏览器中渲染解析才可以</span></span><br><span class="line"><span class="comment">common中存放的一般都是公用的变量或者方法，只需要调取使用即可，编译的时候不需要编译这些内容，所以用reference修饰一下</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">导入的其他文件最好都是less文件，这样在编译的时候，把所有的less编译到一个文件中，实现css的合并和压缩</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">'reset'</span>;</span><br><span class="line"><span class="keyword">@import</span> (reference) <span class="string">"common"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width </span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.headerBox</span> &#123;</span><br><span class="line">    <span class="variable">@H         :</span> <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height     </span>: <span class="variable">@H</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background </span>: <span class="variable">@con-bg</span>;</span><br><span class="line">    <span class="attribute">font-size  </span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">        <span class="attribute">display    </span>: inline-block; <span class="comment">// 使用inline-block会把标签之间的空格和换行当作元素占位，导致元素之间有间隙。解决：让父元素的font-size:0;</span></span><br><span class="line">        <span class="attribute">width      </span>: <span class="number">90px</span>;</span><br><span class="line">        <span class="attribute">text-align </span>: center;</span><br><span class="line">        <span class="attribute">height     </span>: <span class="variable">@H</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="variable">@H</span>;</span><br><span class="line">        <span class="attribute">font-size  </span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">color      </span>: <span class="variable">@text-black</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">display    </span>: inline-block;</span><br><span class="line">        <span class="attribute">padding    </span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">height     </span>: <span class="variable">@H</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="variable">@H</span>;</span><br><span class="line">        <span class="attribute">font-size  </span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">color      </span>: <span class="variable">@text-gray</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">@text-active</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.productBox</span> &#123;</span><br><span class="line">    <span class="attribute">margin  </span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">float       </span>: left; <span class="comment">// 子元素浮动，子元素的高度不能撑开父元素（脱离文档流）。解决：清除子元素浮动对父元素的影响 =》 clear:both; 在父元素上添加</span></span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">background</span>:<span class="variable">@con-bg</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:nth-child(5n+5)</span> &#123;<span class="comment">//五个为一组，一组中的第五个</span></span><br><span class="line">            <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span>&#123;</span><br><span class="line">            <span class="attribute">display</span>:block;</span><br><span class="line">            <span class="attribute">box-sizing</span>: border-box; <span class="comment">//css3新合资模型：我们设置的width是盒子最后的宽度，包括边框、padding、内容宽度</span></span><br><span class="line">            <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">232px</span>;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">3px</span> solid transparent;</span><br><span class="line">            <span class="selector-tag">img</span>&#123;</span><br><span class="line">                <span class="attribute">display</span>:block;</span><br><span class="line">                <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">194px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">p</span>&#123;</span><br><span class="line">                <span class="attribute">color</span>:<span class="variable">@text-gray</span>;</span><br><span class="line">                <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">                <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">                <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">span</span>&#123;</span><br><span class="line">                <span class="attribute">display</span>: block;</span><br><span class="line">                <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">                <span class="attribute">font-size</span>:<span class="number">12px</span>;</span><br><span class="line">                <span class="attribute">color</span>:<span class="variable">@text-black</span>;</span><br><span class="line"></span><br><span class="line">                <span class="selector-tag">&amp;</span><span class="selector-pseudo">:nth-child(1)</span>&#123; <span class="comment">/*不是所有span中的第一个，是a子元素中的第一个，并且是span标签*/</span></span><br><span class="line">                    <span class="attribute">color</span>:<span class="variable">@text-active</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="selector-tag">&amp;</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;</span><br><span class="line">                    <span class="attribute">color</span>: <span class="variable">@text-active</span>;</span><br><span class="line">                    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.transition</span>(<span class="variable">@duration</span>: <span class="number">0.5s</span>;);</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">                <span class="attribute">border-color</span>:<span class="variable">@text-active</span>;</span><br><span class="line">                <span class="attribute">box-shadow</span>:<span class="number">3px</span> <span class="number">3px</span> <span class="number">10px</span> pink;</span><br><span class="line">                <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;less是css预编译语言，能够提高css的书写，本片是对less的基本介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://abluecup.github.io/tags/css/"/>
    
  </entry>
  
</feed>
