<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卡而的博客</title>
  
  <subtitle>Keep inner peace</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://abluecup.github.io/"/>
  <updated>2019-11-19T08:20:05.033Z</updated>
  <id>https://abluecup.github.io/</id>
  
  <author>
    <name>卡而</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>发布订阅</title>
    <link href="https://abluecup.github.io/2019/11/19/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    <id>https://abluecup.github.io/2019/11/19/发布订阅/</id>
    <published>2019-11-19T07:23:43.000Z</published>
    <updated>2019-11-19T08:20:05.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="发布订阅设计模式（观察者模式）"><a href="#发布订阅设计模式（观察者模式）" class="headerlink" title="发布订阅设计模式（观察者模式）"></a>发布订阅设计模式（观察者模式）</h2><p>Publish and subscribe<br>思想：准备一个容器，把到达指定时候要处理的事情事先一一增加到容器中当中（我们把这个叫做发布计划，并且向计划表总订阅方法），当到达指定时间点，通知容器中的方法依次执行即可</p><h3 id="jQ中的发布订阅"><a href="#jQ中的发布订阅" class="headerlink" title="jQ中的发布订阅"></a>jQ中的发布订阅</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> $plan = $.Callbacks();<span class="comment">//=&gt;创建一个空的计划表：空容器 =&gt; $plan</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $plan.fire(<span class="number">10</span>,<span class="number">20</span>); <span class="comment">// fire：通知容器中的方法按照顺序依次执行</span></span><br><span class="line">    <span class="comment">// 10,20表示执行容器中的方法时，每一个方法都传递给两个参数10和20</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">$plan.add(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//向容器中添加方法</span></span><br><span class="line">&#125;);</span><br><span class="line">$plan.remove(</span><br><span class="line">    fn <span class="comment">// 向容器中移除方法 </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">~<span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Subscribe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="comment">//创建一个容器（每一个实例都有一个自己独有的容器，管理自己需要执行的方法即可）</span></span><br><span class="line">      <span class="keyword">this</span>.pond = [];<span class="comment">//给实例挂载一个属性，里面盛放着需要执行的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 向计划表中增加方法：去重</span></span><br><span class="line">    add(fn) &#123;</span><br><span class="line">      <span class="comment">//fn : 我们需要增加的方法</span></span><br><span class="line">      <span class="keyword">let</span> pond = <span class="keyword">this</span>.pond;</span><br><span class="line">      <span class="keyword">let</span> isExist = <span class="literal">false</span>;</span><br><span class="line">      pond.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        item === fn ? isExist = <span class="literal">true</span> : <span class="literal">null</span>;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      !isExist ? pond.push(fn) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(fn) &#123;</span><br><span class="line">      <span class="comment">//从计划表中移除方法</span></span><br><span class="line">      <span class="keyword">let</span> pond = <span class="keyword">this</span>.pond;</span><br><span class="line">      pond.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item === fn) &#123;</span><br><span class="line">          pond.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知计划表中的方法依次执行</span></span><br><span class="line">    <span class="comment">// 如果传递参数信息了，把这些参数一次赋值给执行的每一个方法</span></span><br><span class="line">    fire(...arg)&#123;</span><br><span class="line">        <span class="keyword">let</span> pond = <span class="keyword">this</span>.pond;</span><br><span class="line">        pond.forEach(<span class="function">(<span class="params">item, index</span>)=&gt;</span>&#123;</span><br><span class="line">            item(...arg);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">window</span>.Subscribe = Subscribe;</span><br><span class="line">&#125;(<span class="built_in">window</span>);</span><br><span class="line"><span class="keyword">let</span> subscribe = <span class="keyword">new</span> Subscribe();</span><br><span class="line">subscribe.add();</span><br><span class="line">subscribe.remove();</span><br><span class="line">subscribe.fire();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;发布订阅设计模式（观察者模式）&quot;&gt;&lt;a href=&quot;#发布订阅设计模式（观察者模式）&quot; class=&quot;headerlink&quot; title=&quot;发布订阅设计模式（观察者模式）&quot;&gt;&lt;/a&gt;发布订阅设计模式（观察者模式）&lt;/h2&gt;&lt;p&gt;Publish and subscr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>拖拽</title>
    <link href="https://abluecup.github.io/2019/10/30/%E6%8B%96%E6%8B%BD/"/>
    <id>https://abluecup.github.io/2019/10/30/拖拽/</id>
    <published>2019-10-30T06:04:32.000Z</published>
    <updated>2019-10-30T06:05:02.368Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue讲解</title>
    <link href="https://abluecup.github.io/2019/10/25/vue%E8%AE%B2%E8%A7%A3/"/>
    <id>https://abluecup.github.io/2019/10/25/vue讲解/</id>
    <published>2019-10-25T09:21:39.000Z</published>
    <updated>2019-10-30T06:04:52.292Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>事件委托</title>
    <link href="https://abluecup.github.io/2019/09/29/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    <id>https://abluecup.github.io/2019/09/29/事件委托/</id>
    <published>2019-09-29T06:14:30.000Z</published>
    <updated>2019-10-12T07:27:00.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>也叫事件代理：利用事件的冒泡传播机制，如果一个容器的后代元素当中，很多元素的点击或其他行为都要做一些处理,此时我们不需要一个个获取绑定了，我们只需要给容器的click绑定方法，这样不管点击的是哪一个后代元素，都会把容器的click行为触发，并把对应的方法执行，根据事件源，我们可以知道点击的是谁，从而做不同的事情。<br><a id="more"></a><br>一个个获取元素，然后绑定事件的方式，不仅麻烦，而且性能消耗比较大。当我们给容器绑定事件的时候，不管点击的是后代中的水，绑定的方法都会执行，而且ev事件对象中记录了事件源<br><code>let target = ev.target || ev.srcElement</code><br>事件委托这种处理方式，比一个个的事件绑定，性能上提高50%左右，而且需要操作的元素越多，性能提高越大</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Event Delegate Navigation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/reset.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        html body&#123;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:lightseagreen</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.menuBox</span> &#123;</span></span><br><span class="line"><span class="undefined">            margin: 20px auto;</span></span><br><span class="line"><span class="undefined">            width: 700px;</span></span><br><span class="line"><span class="undefined">            height: 500px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menuBox</span> <span class="selector-class">.navBox</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menuBox</span> <span class="selector-class">.navBox</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 50px;</span></span><br><span class="line"><span class="undefined">            line-height: 50px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menuBox</span> <span class="selector-class">.navBox</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="undefined">            padding: 0 10px;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            font-size: 16px;</span></span><br><span class="line"><span class="undefined">            text-decoration: none;</span></span><br><span class="line"><span class="undefined">            background: lightgray;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="comment">/* .menuBox .navBox ul li a:hover &#123;</span></span></span><br><span class="line"><span class="undefined">            background: burlywood;</span></span><br><span class="line"><span class="undefined">        &#125; */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.detailsBox</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            background: rgb(218, 242, 243);</span></span><br><span class="line"><span class="undefined">            width: 500px;</span></span><br><span class="line"><span class="undefined">            height: 500px;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menuBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navBox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航6<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航7<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航8<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航9<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>导航10<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detailsBox"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../jq/node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//基于事件委托给最外层盒子的mouseover方法，这样不管操作后代元素中的谁，方法都会执行</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> $detailsBox = $(<span class="string">'.detailsBox'</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'body'</span>).on(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> target = ev.target,</span></span><br><span class="line"><span class="undefined">                tag = target.tagName,</span></span><br><span class="line"><span class="javascript">                $target = $(target),</span></span><br><span class="line"><span class="undefined">                $pars = $target.parents();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 如果事件源是navBox下的a或者li,让detailsBox显示</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">// $target.css('background','orange');</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> flag = $pars.filter(<span class="string">'.navBox'</span>).length &gt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> ((tag===<span class="string">'A'</span> || tag ===<span class="string">'LI'</span>) &amp;&amp; flag) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> val = $target.text().match(<span class="regexp">/\d+/</span>);</span></span><br><span class="line"><span class="javascript">                $target.css(<span class="string">'background'</span>,<span class="string">'orange'</span>);</span></span><br><span class="line"><span class="javascript">                $detailsBox.show().html(<span class="string">`导航<span class="subst">$&#123;val&#125;</span>对应的内容`</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//如果事件源是detailsBox或者使它的后代元素，不做处理</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// if ($target.hasClass('detailsBox') || $pars.filter('detailsBox').length &gt; 0) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     return;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="undefined">            $detailsBox.hide();</span></span><br><span class="line"><span class="javascript">           <span class="comment">// $target.css('background','orange');</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        $detailsBox.on(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">            ev.stopPropagation();</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">".navBox li a"</span>).on(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="keyword">this</span>).css(<span class="string">'background'</span>,<span class="string">'lightgray'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="处理情况"><a href="#处理情况" class="headerlink" title="处理情况"></a>处理情况</h2><p>一个容器中，很多后代元素的点击行为都要处理一些事情，之前的思路是把需要操作的元素一一获取，然后再一一做事件绑定，在不同的方法中完成不同的需求：现在不用了，基于事件的冒泡传播，我们可以只给容器的CLICK事件绑定一个方法，这样不管以后点击的是容器中的哪一个后代元素，都会通过事件的冒泡传播机制，把容器的click行为触发，把绑定的方法执行，我们在方法执行的时候，根据时间对应项中的事件源（ev.target）来做不同的业务处理即可，这种机制即是事件委托机制。</p><p>1， 容器中很多后代元素的某个行为要进行操作，委托给容器处理是不错的选择<br>2， 元素是动态绑定的<br>3， 需求是除了某某某，剩下的操作都是做同样的事情（此时把点击行为的操作委托给body,事件源是某某某做什么，不是统一做什么）</p><h2 id="无限层级菜单"><a href="#无限层级菜单" class="headerlink" title="无限层级菜单"></a>无限层级菜单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"menuBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- plus: +, minus:- --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>产品技术部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level2"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>产品小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>UI小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level3"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>UI设计师<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>UE体验师<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>开发小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level3"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level4"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>PC设备开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>移动设备开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>VR/AI设备开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>native-app开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>node开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>后台开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>服务器开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>公共技术研发团队<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>测试小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>运维小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- plus: +, minus:- --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>运维技术部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level2"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>产品小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>UI小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level3"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>UI设计师<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>UE体验师<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>开发小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level3"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level4"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>PC设备开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>移动设备开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>VR/AI设备开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>native-app开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>node开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>后台开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>服务器开发<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>公共技术研发团队<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>测试小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>运维小组<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../jq/node_modules/jquery/dist/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/tabox.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height  </span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin  </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border  </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> &#123;</span><br><span class="line">    <span class="attribute">width     </span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height    </span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow  </span>: auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom right, lightblue, lightgray)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">position  </span>: relative;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size  </span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="attribute">position  </span>: absolute;</span><br><span class="line">    <span class="attribute">left      </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top       </span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">width     </span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height    </span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../img/icon.png) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span><span class="selector-class">.plus</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">59px</span> -<span class="number">28px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span><span class="selector-class">.minus</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">42px</span> -<span class="number">29px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuBox</span> <span class="selector-tag">ul</span><span class="selector-pseudo">:not(.level1)</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> $meunBox = $(<span class="string">'.menuBox'</span>);</span><br><span class="line">    $meunBox.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> target = ev.target,</span><br><span class="line">        $target = $(target),</span><br><span class="line">        tarTag = target.tagName;</span><br><span class="line">        <span class="comment">// 合并事件源：点击的是EM，我们让TARGET也等于它的弟弟SPAN，此时TARGET只有SPAN我们才处理，统一基于SPAN位置参照即可</span></span><br><span class="line">        <span class="keyword">if</span> (tarTag === <span class="string">'EM'</span>) &#123;</span><br><span class="line">            $target = $target.next();</span><br><span class="line">            target = $target[<span class="number">0</span>];</span><br><span class="line">            tarTag = target.tagName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只有tarTag是span，我们才会处理</span></span><br><span class="line">        <span class="keyword">if</span> (tarTag === <span class="string">'SPAN'</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> $ul = $target.next(<span class="string">'ul'</span>),</span><br><span class="line">            $em = $target.prev(<span class="string">'em'</span>);</span><br><span class="line">            <span class="comment">//基于jQ获取的结果一般都是jq对象，即使没有获取到元素也是一个length为零的空对象，</span></span><br><span class="line">            <span class="comment">//而不是null，所以 if($ul)&#123;&#125;,这样算存在不行</span></span><br><span class="line">            <span class="keyword">if</span>($ul.length === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">// 没有下一级结构什么都不做，有下一级结构控制显示和隐藏</span></span><br><span class="line">            <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>&#123;</span><br><span class="line">                $ul.stop().slideToggle(<span class="number">300</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    resolve();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// EM的样式类名如果是plus,说明当前是折叠的，我们应当让其展开，反之，让其折叠起来</span></span><br><span class="line">            <span class="keyword">if</span>($em.hasClass(<span class="string">'plus'</span>))&#123;</span><br><span class="line">                $em.addClass(<span class="string">'minus'</span>).removeClass(<span class="string">'plus'</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $em.addClass(<span class="string">'plus'</span>).removeClass(<span class="string">'minus'</span>);</span><br><span class="line">                <span class="comment">// 外层收起里面的小层级也都收起</span></span><br><span class="line">                promise.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    $ul.find(<span class="string">'ul'</span>).css(<span class="string">'display'</span>,<span class="string">'none'</span>);</span><br><span class="line">                    $ul.find(<span class="string">'em'</span>).removeClass(<span class="string">'minus'</span>).addClass(<span class="string">'plus'</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事件委托&quot;&gt;&lt;a href=&quot;#事件委托&quot; class=&quot;headerlink&quot; title=&quot;事件委托&quot;&gt;&lt;/a&gt;事件委托&lt;/h2&gt;&lt;p&gt;也叫事件代理：利用事件的冒泡传播机制，如果一个容器的后代元素当中，很多元素的点击或其他行为都要做一些处理,此时我们不需要一个个获取绑定了，我们只需要给容器的click绑定方法，这样不管点击的是哪一个后代元素，都会把容器的click行为触发，并把对应的方法执行，根据事件源，我们可以知道点击的是谁，从而做不同的事情。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图片跟随</title>
    <link href="https://abluecup.github.io/2019/09/29/%E5%9B%BE%E7%89%87%E8%B7%9F%E9%9A%8F/"/>
    <id>https://abluecup.github.io/2019/09/29/图片跟随/</id>
    <published>2019-09-29T05:26:45.000Z</published>
    <updated>2019-09-29T06:57:30.974Z</updated>
    
    <content type="html"><![CDATA[<p>本片收录了图片跟随的代码<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/reset.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/magnifier.css"</span>&gt;</span></span><br><span class="line">    .container&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin:20px auto;</span><br><span class="line">    width: 462px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.container .imgBox li&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 75px;</span><br><span class="line">    border:1px solid #eee;</span><br><span class="line">    margin-right: 18px;</span><br><span class="line">    cursor: move;</span><br><span class="line">&#125;</span><br><span class="line">.container .imgBox li:nth-last-child(1)&#123;</span><br><span class="line">    margin-right: 0;</span><br><span class="line">&#125;</span><br><span class="line">.container .mark&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br><span class="line">.container .mark img&#123;</span><br><span class="line">    display:block;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &lt;!-- </span></span><br><span class="line"><span class="undefined">    方案一：</span></span><br><span class="line"><span class="undefined">        每一个li中都有一个大盒子，大盒子中存放的是大图，开始是隐藏的，</span></span><br><span class="line"><span class="undefined">        鼠标进入到li中，让其显示，并且让他的位置跟随鼠标的位置改变即可</span></span><br><span class="line"><span class="undefined">        ，鼠标离开Li，让自己的大盒子小时即可（类似于放大镜中small-box中出现mark）</span></span><br><span class="line"><span class="undefined">    方案二：</span></span><br><span class="line"><span class="undefined">        只有一个大盒子（可以在JS中动态创建，也可以事先写好，控制显示隐藏），鼠标进入任意一个li,</span></span><br><span class="line"><span class="undefined">        都让大盒子出来并且大盒子中存放的图片根据当前进入的Li动态改变，</span></span><br><span class="line"><span class="undefined">        同样实现鼠标移动，大盒子也跟着移动</span></span><br><span class="line"><span class="undefined"> --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"imgBox clearfix"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple_1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple_2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple_4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &lt;!-- </span></span><br><span class="line"><span class="undefined">            在Js中根据需求动态创建</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple_1_bigger.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">            如果小图和大图在名字上没有固定的规则，我们把大图地址都已自定义属性的方法存储起来</span></span><br><span class="line"><span class="undefined">            ，后期需要展示大图的时候，从自定义属性获取即可</span></span><br><span class="line"><span class="undefined">            有固定的规则，我们完全可以不采用自定义属性的方式，而是基于规则自己处理和匹配即可</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/apple_1.jpg"</span> <span class="attr">data-big</span>=<span class="string">"img/apple_1_bigger.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="undefined">         --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery-1.11.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="undefined">        (function($)&#123;</span></span><br><span class="line"><span class="undefined">            let</span></span><br><span class="line"><span class="undefined">            $container = $('.container'),</span></span><br><span class="line"><span class="undefined">            $imgList = $(".container&gt;.imgBox&gt;li"),</span></span><br><span class="line"><span class="undefined">            $mark = null;</span></span><br><span class="line"><span class="undefined">            $imgList.on('mouseenter', function(ev)&#123;</span></span><br><span class="line"><span class="undefined">                //创建mark，根据经过的Li中的小图片，动态管控mark中的大图片</span></span><br><span class="line"><span class="undefined">                let $src = $(this).children('img').attr('src');</span></span><br><span class="line"><span class="undefined">                $src = $src.replace(/_(\d+)/g,'_$1_bigger');</span></span><br><span class="line"><span class="undefined">                if (!$mark) &#123;</span></span><br><span class="line"><span class="xml">                    $mark = $(` <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;$src&#125;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`);</span></span><br><span class="line"><span class="undefined">                    $container.append($mark);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;).on('mouseleave',function(ev)&#123;</span></span><br><span class="line"><span class="undefined">                if ($mark) &#123;</span></span><br><span class="line"><span class="undefined">                    $mark.remove();</span></span><br><span class="line"><span class="undefined">                   $mark = null;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;).on('mousemove', function(ev)&#123;</span></span><br><span class="line"><span class="undefined">                // 根据鼠标的位置计算出mark的位置</span></span><br><span class="line"><span class="undefined">                let &#123;top:conTop, left:conLeft&#125;=$container.offset(),</span></span><br><span class="line"><span class="undefined">                curL = ev.pageX - conLeft + 20,</span></span><br><span class="line"><span class="undefined">                curT = ev.pageY - conTop + 20;</span></span><br><span class="line"><span class="undefined">                $mark.css(&#123;</span></span><br><span class="line"><span class="undefined">                    top:curT,</span></span><br><span class="line"><span class="undefined">                    left:curL</span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;)(jQuery);</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本片收录了图片跟随的代码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>放大镜效果</title>
    <link href="https://abluecup.github.io/2019/09/26/%E6%94%BE%E5%A4%A7%E9%95%9C%E6%95%88%E6%9E%9C/"/>
    <id>https://abluecup.github.io/2019/09/26/放大镜效果/</id>
    <published>2019-09-26T02:26:32.000Z</published>
    <updated>2019-09-30T07:15:58.502Z</updated>
    
    <content type="html"><![CDATA[<p>本篇收录了放大镜功能的原理和代码<br><a id="more"></a><br><img src="/2019/09/26/放大镜效果/放大镜.png" alt="原理图示"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/reset.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/magnifier.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"magnifierBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"smallBox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bigBox"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"magnifier-Box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"smallBox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bigBox"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery-1.11.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/magnifier.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">                 <span class="keyword">var</span> $magniferBox = $(<span class="string">'.magnifierBox'</span>),</span></span><br><span class="line"><span class="javascript">                    $smallBox = $magniferBox.find(<span class="string">'.smallBox'</span>),</span></span><br><span class="line"><span class="javascript">                    $mark = $smallBox.find(<span class="string">'.mark'</span>),</span></span><br><span class="line"><span class="javascript">                    $bigBox = $magniferBox.find(<span class="string">'.bigBox'</span>),</span></span><br><span class="line"><span class="javascript">                    $bigImg = $bigBox.find(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="undefined">                Magnifier($smallBox, $mark, $bigBox, $bigImg, 3);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// Magnifier(smallBox, mark, bigBox, bigImg, proportion)</span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> $magniferBox1 = $(<span class="string">'.magnifier-Box'</span>),</span></span><br><span class="line"><span class="javascript">                    $smallBox1 = $magniferBox1.find(<span class="string">'.smallBox'</span>),</span></span><br><span class="line"><span class="javascript">                    $mark1 = $smallBox1.find(<span class="string">'.mark'</span>),</span></span><br><span class="line"><span class="javascript">                    $bigBox1 = $magniferBox1.find(<span class="string">'.bigBox'</span>),</span></span><br><span class="line"><span class="javascript">                    $bigImg1 = $bigBox1.find(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="undefined">                Magnifier($smallBox1, $mark1, $bigBox1, $bigImg1, 3);  </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.magnifierBox</span>,<span class="selector-class">.magnifier-Box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.magnifierBox</span> <span class="selector-class">.smallBox</span>, <span class="selector-class">.magnifierBox</span> <span class="selector-class">.bigBox</span>,<span class="selector-class">.magnifier-Box</span> <span class="selector-class">.smallBox</span>, <span class="selector-class">.magnifier-Box</span> <span class="selector-class">.bigBox</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.magnifierBox</span> <span class="selector-class">.smallBox</span> <span class="selector-tag">img</span>,<span class="selector-class">.magnifier-Box</span> <span class="selector-class">.smallBox</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.magnifierBox</span> <span class="selector-class">.smallBox</span> <span class="selector-class">.mark</span>,<span class="selector-class">.magnifier-Box</span> <span class="selector-class">.smallBox</span> <span class="selector-class">.mark</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>:<span class="number">10</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e01d20</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity=30);</span><br><span class="line">    <span class="attribute">cursor</span>: move;    </span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.magnifierBox</span> <span class="selector-class">.bigBox</span> <span class="selector-tag">img</span>,<span class="selector-class">.magnifier-Box</span> <span class="selector-class">.bigBox</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1 鼠标进入和离开 small-box, 控制mark以及bigbox的显示和隐藏</span></span><br><span class="line"><span class="comment"> * 2 控制mark在small box中的移动，但是不能超过边界；</span></span><br><span class="line"><span class="comment"> * 3 当Mark在smallbox中移动的时候，根据MARK移动的距离，计算出BIG-IMG在BIGBOX中移动的距离（反向三倍，x/y轴都是三倍整体9倍）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* $(function () &#123;</span></span><br><span class="line"><span class="comment">    var $magniferBox = $('.magnifierBox'),</span></span><br><span class="line"><span class="comment">        $smallBox = $magniferBox.find('.smallBox'),</span></span><br><span class="line"><span class="comment">        $mark = $smallBox.find('.mark'),</span></span><br><span class="line"><span class="comment">        $bigBox = $magniferBox.find('.bigBox'),</span></span><br><span class="line"><span class="comment">        $bigImg = $bigBox.find('img');</span></span><br><span class="line"><span class="comment">    // 鼠标进入和离开 small-box, 控制mark以及bigbox的显示和隐藏</span></span><br><span class="line"><span class="comment">    $smallBox.on('mouseenter', function (ev) &#123;</span></span><br><span class="line"><span class="comment">        $mark.add($bigImg).show();</span></span><br><span class="line"><span class="comment">        computedMark(ev);// 刚进入的时候计算mark的位置</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">        .on('mouseleave', function () &#123; $mark.add($bigImg).hide(); &#125;)</span></span><br><span class="line"><span class="comment">        .on('mousemove', function (ev) &#123;</span></span><br><span class="line"><span class="comment">            //jquery中的EV已经是兼容所有浏览器了（JQ内部处理了），我们只需要按照标准浏览器的属性使用即可</span></span><br><span class="line"><span class="comment">            computedMark(ev);// 鼠标在盒子中，随时计算mark的位置</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">    console.log($mark);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 鼠标在SMALL-BOX </span></span><br><span class="line"><span class="comment">    function computedMark(ev) &#123;</span></span><br><span class="line"><span class="comment">        var offsetObj = $smallBox.offset(),</span></span><br><span class="line"><span class="comment">            curL = ev.pageX - offsetObj.left - $mark.outerWidth() / 2,</span></span><br><span class="line"><span class="comment">            curT = ev.pageY - offsetObj.top - $mark.outerHeight() / 2;</span></span><br><span class="line"><span class="comment">        var minL = 0,</span></span><br><span class="line"><span class="comment">            minT = 0,</span></span><br><span class="line"><span class="comment">            maxL = $smallBox.outerWidth() - $mark.outerWidth(),</span></span><br><span class="line"><span class="comment">            maxT = $smallBox.outerHeight() - $mark.outerHeight();</span></span><br><span class="line"><span class="comment">        curL = curL &lt; minL ? minL : (curL &gt; maxL ? maxL : curL);</span></span><br><span class="line"><span class="comment">        curT = curT &lt; minT ? minT : (curT &gt; maxT ? maxT : curT);</span></span><br><span class="line"><span class="comment">        $mark.css(&#123;</span></span><br><span class="line"><span class="comment">            top: curT,</span></span><br><span class="line"><span class="comment">            left: curL</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        $bigImg.css(&#123;</span></span><br><span class="line"><span class="comment">            top: -3 * curT,</span></span><br><span class="line"><span class="comment">            left: -3 * curL</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">&#125;); */</span></span><br><span class="line"></span><br><span class="line">~<span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> utils = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">computedMark</span>(<span class="params">smallBox, mark, bigBox, bigImg, proX,proY,ev</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> offsetObj = smallBox.offset(),</span><br><span class="line">                curL = ev.pageX - offsetObj.left - mark.outerWidth() / <span class="number">2</span>,</span><br><span class="line">                curT = ev.pageY - offsetObj.top - mark.outerHeight() / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">var</span> minL = <span class="number">0</span>,</span><br><span class="line">                minT = <span class="number">0</span>,</span><br><span class="line">                maxL = smallBox.outerWidth() - mark.outerWidth(),</span><br><span class="line">                maxT = smallBox.outerHeight() - mark.outerHeight();</span><br><span class="line">            curL = curL &lt; minL ? minL : (curL &gt; maxL ? maxL : curL);</span><br><span class="line">            curT = curT &lt; minT ? minT : (curT &gt; maxT ? maxT : curT);</span><br><span class="line">            mark.css(&#123;</span><br><span class="line">                top: curT,</span><br><span class="line">                left: curL</span><br><span class="line">            &#125;);</span><br><span class="line">            bigImg.css(&#123;</span><br><span class="line">                top: -proX * curT,</span><br><span class="line">                left: -proY * curL</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">computedMark</span>:computedMark&#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Magnifier</span>(<span class="params">smallBox, mark, bigBox, bigImg, proX, proY</span>)</span>&#123;</span><br><span class="line">        smallBox.on(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">            mark.add(bigImg).show();</span><br><span class="line">            utils.computedMark(smallBox, mark, bigBox, bigImg, proX, proY, ev);</span><br><span class="line">        &#125;).on(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            mark.add(bigImg).hide();</span><br><span class="line">        &#125;).on(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">            utils.computedMark(smallBox, mark, bigBox, bigImg, proX, proY, ev);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="built_in">window</span>.Magnifier = Magnifier;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>在大盒子嵌套小盒子的操作中，我们不建议使用mouseover的，因为一方面存在冒泡传播机制，另一方面，从大盒子进入到小盒子，它是按照离开大盒子算的</p><p><img src="/2019/09/26/放大镜效果/aa.png" alt="enter和over的区别"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇收录了放大镜功能的原理和代码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>事件</title>
    <link href="https://abluecup.github.io/2019/09/20/%E4%BA%8B%E4%BB%B6/"/>
    <id>https://abluecup.github.io/2019/09/20/事件/</id>
    <published>2019-09-20T09:29:58.000Z</published>
    <updated>2019-11-19T07:57:10.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是事件？"><a href="#什么是事件？" class="headerlink" title="什么是事件？"></a>什么是事件？</h2><p>事件就是一件事情或者一个行为（对于元素来说，它的很多事件都是天生自带的），只要我们去操作这个元素，就会触发这些行为<br>“事件是天生自带的行为，我们操作元素，就会触发相关行为”<br><a id="more"></a></p><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>给元素天生自带的事件行为绑定方法，当事件触发，会把相应的行为执行。<br>    1, DOM 0级事件绑定： [element].onxxx=function(){};<br>    2, DOM 2级事件绑定： [element].addEventListener(‘xxx’, function(){});<br>                        [element].attachEvent(‘onxxx’,function(){}); [IE6-8]<br>            attachEvent只能存在于IE5-10中， addEventListener存在于IE9及以上</p><pre><code>目的：给当前元素的某个事件绑定方法（不管是基于DOM0还是DOM2）,都是为了触发元素的相关行为的时候，能做点事情（也就是把绑定的方法执行），不仅把方法执行了，而且浏览器还给方法穿了一个实参信息===&gt; 这个值就是事件对象</code></pre><h2 id="元素天生自带的事件"><a href="#元素天生自带的事件" class="headerlink" title="元素天生自带的事件"></a>元素天生自带的事件</h2><h3 id="常用的元素天生自带的事件"><a href="#常用的元素天生自带的事件" class="headerlink" title="常用的元素天生自带的事件"></a>常用的元素天生自带的事件</h3><p>【鼠标事件】<br>        click : 点击（PC端是点击，移动端代表单击[移动端使用click会有300毫秒延迟]）<br>        dblclick: 双击<br>        mouseover: 鼠标经过<br>        mouseout:   鼠标移出<br>        mouseenter:  鼠标进入<br>        mouseleave:  鼠标离开<br>        mousemove: 鼠标移动<br>        mousedown:  鼠标按下（左右键都起作用，它是按下即触发，<br>                        click是按下抬起才触发，先触发down和up,然后才触发click）<br>        mouseup: 鼠标抬起<br>        mousewheel:鼠标滚轮滚动</p><p>【键盘事件】<br>        keydown 键盘按下<br>        keyup   键盘抬起<br>        keypress 和keydown类似，keydown返回的是键盘码，keypress返回的是ASCII码值，一般不用<br>        input:由于PC端有物理键盘，可以监听到键盘的按下和抬起，但是移动端是虚拟的键盘，所以Keydown和keyup在大部分手机上都没有，我们使用input事件统一代替他们</p><p>【表单元素事件】<br>        focus:获取焦点<br>        blur: 失去焦点<br>        change: 内容改变</p><p>【其他常用事件】<br>        load:加载完成<br>        unload: 页面关闭<br>        beforeunload: 关闭之前<br>        scroll:滚动条滚动事件<br>        resize:大小改变事件 window.onresize=function(){};浏览器窗口大小改变，会触发这个事件</p><p>【移动端手指事件】<br>        touchstart: 手指按下<br>        touchmove: 手指移动<br>        touchend: 手指移开<br>        touchcancel: 因为意外事故导致手指操作失误<br>        [gesture] 指的是多手指操作<br>        gesturestart: 多手指按下<br>        gesturechange: 手指改变<br>        gestureend:手指离开</p><p>[H5中的audio/video音视频事件]<br>        canplay:可以播放（播放过程中可能出现由于资源没有加载完成，导致的卡顿）<br>        canplaythrough: 资源加载完成，可以正常无障碍播放<br>        …</p><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>给当前元素的某个事件绑定方法（不管是基于DOM0还是DOM2）,都是为了触发元素的相关行为的时候，能做点事情（也就是把绑定的方法执行），不仅把方法执行了，而且浏览器还给方法穿了一个实参信息===&gt; 这个值就是事件对象；根据操作的不同，事件对象又分为： MouseEvent KeyBoardEvent touchEvent 普通event对象<br>    事件对象中记录了很多属性名和属性值，这些信息中包含了当前操作的基础信息，例如：鼠标点击位置的X/Y坐标，鼠标点击的是谁（事件源）等信息<br>    1 鼠标事件对象的信息<br>    ev.target =&gt; 事件源（操作的是哪个元素）<br>    ev.clientX/ ev.clientY =&gt; 当前鼠标触发点距离当前窗口左上角（不是当前元素左上角）的横纵坐标值<br>    ev.pageX/ev.pageY =&gt; 当前鼠标触发点距离body左上角的横纵坐标值<br>    ev.preventDefault(): 阻止默认行为<br>    ev.stopPropagation(): 阻止事件的冒泡传播<br>    ev.type: 当前事件的类型 ‘click’<br>    2 键盘对象keyBoardEvent<br>    ev.code: 当前按键’KeyE’<br>    ev.key: 当前按键 ‘e’<br>    ev.which/ev.keyCode: 当前按键的键盘码 69 兼容问题</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code = ev.which || ev.keyCode;</span><br></pre></td></tr></table></figure></code></pre><p>2.1 常用键盘码<br>    左-上-右-下： 37-38-39-40<br>    Backspace:8<br>    Enter:13<br>    Space: 32<br>    Delete: 46<br>    Shift: 16<br>    Alt: 18<br>    Ctrl: 17<br>    ESC:27<br>    Tab:9<br>    a-z: 65-90<br>    A-Z:<br>    :;;;;;;;;;;;;;;;;<br>    F1~F12:  112~123<br>    0-9: 48-57<br><img src="/2019/09/20/事件/event.jpg" alt="键盘键值表"></p><p>在IE低版本浏览器中，浏览器执行绑定的方法，并没有把事件对象传递进来，此时ev===undefined,需要基于window.event来获取，由于是全局属性，鼠标每次操作，都会把上一次操作的值替换掉<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!ev)&#123;</span><br><span class="line">    <span class="comment">//低版本中没有的属性，我们手动设置一下，按照自己有的先获取到值</span></span><br><span class="line">    <span class="comment">//然后赋值给标准对应的新属性（经过判断处理后，低版本中也有TARGET/PAGE-X/PAGE-Y这些属性了）</span></span><br><span class="line">    <span class="comment">//直接按照高版本的规则来使用即可</span></span><br><span class="line">    ev=<span class="built_in">window</span>.event;</span><br><span class="line">    <span class="comment">//ev.srcElement; // 获取事件源，标准中使用的是ev.target</span></span><br><span class="line">    ev.target = ev.srcElement;</span><br><span class="line">    <span class="comment">//低版本浏览器中的事件对象当中不存在pageX和pageY</span></span><br><span class="line">    ev.pageX=event.clientX+(<span class="built_in">document</span>.documentElement.scrollLeft||<span class="built_in">document</span>.body.scrollLeft);</span><br><span class="line">    ev.pageY=ev.clientY+(<span class="built_in">document</span>.documentElement.scrollTop||<span class="built_in">document</span>.body.scrollTop);</span><br><span class="line">    ev.which=ev.keyCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// preventDefault &amp; stopPropagation 在低版本下也没有</span></span><br><span class="line">    ev.preventDefault = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ev.returnValue=<span class="literal">false</span>; <span class="comment">// 低版本阻止默认行为</span></span><br><span class="line">    &#125;</span><br><span class="line">    ev.stopPropagation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ev.cancelBubble = <span class="literal">true</span>; <span class="comment">// 低版本阻止冒泡传播</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>第二种兼容方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> target = ev.target || ev.srcElement;</span><br><span class="line">    <span class="comment">// ... 用到谁就写谁</span></span><br><span class="line">    ev.preventDefault ? ev.preventDefault():ev.returnValue=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="事件的默认行为"><a href="#事件的默认行为" class="headerlink" title="事件的默认行为"></a>事件的默认行为</h2><p>事件本身就是天生的，某些事件触发，即使你没有绑定方法，也会存在一些效果，这些默认的效果就是事件的默认行为。<br>  1，a标签的点击操作就存在默认行为<br>        1.1 页面跳转<br>        1.2 锚点定位（HASH定位）哈希定位<br>                基于HASH值，我们可以实现SPA单页面应用<br>  2， INPUT标签的默认行为<br>        2.1 输入内容可以呈现到文本当中；<br>        2.2 输入内容的时候会把之前输入的一些信息呈现出来（并不是所有浏览器和所有情况下都有）<br>  3， SUBMIT按钮也存在默认行为<br>        3.1 点击按钮页面会刷新 （在FORM中设置ACTION,点击SUBMIT,会默认按照ACTION指定的地址进行页面面跳转，并把表单中的信息传递过去【非前后端分离项目中，由服务器进行页面渲染，由其他语言实现数据交互，一般都是这么处理】）<br>  。。。</p><h3 id="如何阻止默认行为"><a href="#如何阻止默认行为" class="headerlink" title="如何阻止默认行为"></a>如何阻止默认行为</h3><ol><li>阻止A标签的默认行为：很多时候我们使用A标签仅仅是想当作一个普通按钮，不想跳转，也不想锚点定位<br>  在结构中阻止<pre><code>1.1 href=&quot;javascript:;&quot;1.2 href=&quot;javascript:false/void 0/null/undefined..;&quot;</code></pre>  在JS中阻止:给click绑定方法，当我们点击a标签的时候，先触发click事件，其次才会执行自己的默认行为<pre><code>link.onclick=function(ev){    ev = ev || window.ev;    return false;     // 或者 ev.preventDefault?ev.preventDefault():ev.returnValue = false;}</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tempInp.onkeydown =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> val = <span class="keyword">this</span>.value.trim(),<span class="comment">//trim不兼容 this.value.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/,'')</span></span><br><span class="line">    len = val.length;</span><br><span class="line">    <span class="keyword">if</span> (len&gt;<span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = val.substr(<span class="number">0</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> code = ev.which || ev.keyCode;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="regexp">/(37|8)/</span>.test(code))&#123;</span><br><span class="line">        ev.preventDefault? ev.preventDefault():ev.returnValue=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="事件的传播机制"><a href="#事件的传播机制" class="headerlink" title="事件的传播机制"></a>事件的传播机制</h2><p>冒泡传播： 触发当前元素的某一个事件行为，不仅当前元素行为触发，而且其祖先元素的相关事件行为也会依次被触发，这种机制就是“事件的冒泡传播机制”<br><img src="/2019/09/20/事件/maopao.png" alt="冒泡阶段图示">)<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">document</span>.documentElement.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">document</span>.body.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">document</span>.outer.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">document</span>.inner.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>xxx.onclick=function(){} DOM0级事件绑定，给元素的事件行为绑定方法，这些方法都是在当前元素的冒泡传播阶段（或者目标阶段）执行的</p><p>xxx.addEventListener(‘xxx’,function(){},false) 第三个参数也是控制绑定的方法在事件传播的冒泡阶段（或者目标阶段）执行，只有第三个参数为true才代表让当前方法在事件的传播阶段触发执行（这种捕获阶段执行没啥意义，项目中不用）</p><p>不同浏览器对于最外层祖先元素的定义是不一样的<br>谷歌： window-&gt;document-&gt;html-&gt;body..<br>IE高： window-&gt;html-&gt;body…<br>IE低： html-&gt;body..</p><h2 id="关于事件对象的一些理解"><a href="#关于事件对象的一些理解" class="headerlink" title="关于事件对象的一些理解"></a>关于事件对象的一些理解</h2><ol><li>事件对象是用来存储当前本次操作的相关信息，和操作有关，和元素无必然关系；<br>2，当我们基于鼠标或者键盘灯操作的时候，浏览器会把本次操作的信息存储起来（标准浏览器存储到默认的内存中【自己找不到】，IE低版本存储到window.event中了），存储的值是一个对象（堆内存），操作肯定会触发元素的某个行为，也就会把绑定的方法执行，此时标准浏览器会把之前存储的对象（准确来说堆内存地址）当作一个实参传递给每一个执行的方法，所以操作一次，即使再多方法中都有EV,但是存储的值都是一个（本次操作信息的对象而已）</li></ol><h2 id="mouseover-mouseout-mouseenter-mouseleave"><a href="#mouseover-mouseout-mouseenter-mouseleave" class="headerlink" title="mouseover mouseout mouseenter mouseleave"></a>mouseover mouseout mouseenter mouseleave</h2><p>enter 和leave 会阻止冒泡传播<br>1，over 属于经过、滑过，覆盖xx,从父元素进入子元素，属于离开了父元素，会触发父元素的out,触发子元素的over<br>        enter属于进入，从父元素进入子元素，并不离开父元素，会触发父元素的leave,触发子元素的enter<br>2, enter和leave组织了事件的冒泡传播，而over和out还存在冒泡传播<br>所以对于父元素嵌套子元素这种情况，使用OVER会发生很多不愿意操作的事情，此时我们使用ENTER会更加简单，操作方便，所以真是项目中ENTER的使用比over多</p><h2 id="事件池机制"><a href="#事件池机制" class="headerlink" title="事件池机制"></a>事件池机制</h2><h3 id="事件绑定-1"><a href="#事件绑定-1" class="headerlink" title="事件绑定"></a>事件绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DOM0</span><br><span class="line">    box.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">    <span class="comment">//每一个元素对象都是对应类的实例，浏览器天生为其设置了很多私有属性和公有属性方法，而onclick就是其中的一个私有属性（事件类私有属性，还有很多其他的私有属性，默认值是Null）</span></span><br><span class="line">    <span class="comment">// dom0事件绑定的原理就是给每一个事件的私有属性赋值（浏览器会建立监听机制，当我们触发元素的某个行为，浏览器会自己把属性中的赋值去执行）</span></span><br><span class="line">    <span class="comment">//dom0事件绑定只允许给某个时间行为绑定一个方法，多次绑定，后面绑定的内容会替换前面绑定的，一最后一次绑定的方法为主</span></span><br><span class="line">DOM2</span><br><span class="line">    box.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="literal">false</span>); removeEventListener</span><br><span class="line">    <span class="comment">//使用的方法都是EventTarget.prototype上定义的</span></span><br><span class="line">    <span class="comment">//在IE低版本浏览器中使用的是attachEvent来处理：box.attachEvent('onclick', function()&#123;&#125;);移除使用的是dettachEvent</span></span><br><span class="line">    <span class="comment">//dom2事件绑定可以给当前元素的某一个事件绑定多个不同的方法，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//DOM1并没有对事件绑定做升级改版</span></span><br></pre></td></tr></table></figure><h3 id="事件池"><a href="#事件池" class="headerlink" title="事件池"></a>事件池</h3><p><img src="/2019/09/20/事件/事件池.bmp" alt="事件池图示"></p><h3 id="DOM2事件绑定的兼容性问题"><a href="#DOM2事件绑定的兼容性问题" class="headerlink" title="DOM2事件绑定的兼容性问题"></a>DOM2事件绑定的兼容性问题</h3><p>[谷歌 vs IE高版本]<br>在移除事件绑定的时候，如果移除操作发生在正要执行的方法之前（例如：点击的时候，正要执行FN8,但是在执行FN4的时候，我们把FN8从事件池中移除了），谷歌下是立即生效，第一次也不再执行FN8了，而IE是当前本次不生效，下一次点击才生效，第一次点击还是要执行FN8</p><p>[谷歌 vs IE低版本]<br>    标准： addEventListener(‘click’,fn) / removeEventListener<br>    IE:   attachEvent(‘onclick’, fn) / detachEvent</p><p>1，this问题<br>        标准下，方法执行，方法中的this是当前元素本身，Ie低版本中this指向了window<br>2, 重复问题<br>        标准浏览器中的事件池是默认去重的，同一个元素的同一个事件行为不能出现相同的绑定方法，但是IE低版本的事件池机制没有这么完善，不能默认去重，也就是可以给同个元素的同个事件绑定相同的方法<br>3，顺序问题<br>        标准浏览器是按照向事件池中存放的顺序依次执行的，而IE低版本是乱序执行的，没有规律</p><p>IE低版本浏览器出现的所有问题都是由于本身自带的事件池机制不完整导致的</p><p>IE低版本浏览器跟标准浏览器的区别：<br>事件对象<br>DOM2事件绑定<br>事件传播的路径不一样</p><h3 id="DOM0和DOM2事件绑定的区别"><a href="#DOM0和DOM2事件绑定的区别" class="headerlink" title="DOM0和DOM2事件绑定的区别"></a>DOM0和DOM2事件绑定的区别</h3><p>1）机制不一样<br>DOM0是给事件的私有属性赋值，所以只能绑定一个方法；DOM2采用的是事件池机制，所以可以绑定多个不同的方法<br>2）移除的操作<br>box.onclick = null;重新赋值即可移除绑定方法<br>DOM2移除的时候，必须清楚要移除哪一个方法，才能呢个在事件池当中移除掉。所以基于DOM2做事件绑定，我们要有瞻前顾后的思路，也就是绑定的时候考虑如何移除（技巧：不要绑定匿名函数，都绑定实名函数）<br>3）DOM2事件绑定增加了一些DOM0无法操作的事件行为，例如：DOMContentLoaded事件（当页面中的HTML结构加载完成就会触发执行）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">box.addEventListener(<span class="string">'DOMContentLoaded'</span>,fn);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//当页面中的资源都加载完成（包含HTML结构加载完，CSS和JS等资源加载完成等），才会触发</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);<span class="comment">// 这样也可以执行多次</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//当页面中的HTML结构加载完成就会执行</span></span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// 就是 $(document).ready(function()&#123;&#125;);的简写 原理基于DOMContentLoaded完成的</span></span><br><span class="line"><span class="comment">// 在document.readyState === 'complete'时候执行函数</span></span><br><span class="line"><span class="comment">//基于DOM2事件绑定的，所以在同一个页面总可以执行多次（绑定多个不同的方法），当结构加载完成，会依次执行方法</span></span><br></pre></td></tr></table></figure></p><p>DOM0和DOM2两套机制可以共存，执行顺序和编写顺序有关</p><h3 id="JQ中的事件绑定方法"><a href="#JQ中的事件绑定方法" class="headerlink" title="JQ中的事件绑定方法"></a>JQ中的事件绑定方法</h3><p>JQ中的事件绑定方法有很多，最常用的是<br>on / off 添加 / 移除<br>one : 只绑定一次，第一次执行完成后，就移除掉该方法<br>click / mouseover / mouseout / …这些方法最后都是基于 on / off 完成的，one也是基于 on / off 完成的<br>delegate: 事件委托方法，在1.7版本以前用的是live方法<br>基于DOM2事件绑定实现事件的绑定和移除（兼容了所有的浏览器）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#box'</span>).on();</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).delegate(<span class="string">'#box'</span>,<span class="string">'click'</span>,fn);</span><br><span class="line"><span class="comment">// 在document上绑定fn点击行为，并把它委托给#box,通常#box是一个未来元素</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是事件？&quot;&gt;&lt;a href=&quot;#什么是事件？&quot; class=&quot;headerlink&quot; title=&quot;什么是事件？&quot;&gt;&lt;/a&gt;什么是事件？&lt;/h2&gt;&lt;p&gt;事件就是一件事情或者一个行为（对于元素来说，它的很多事件都是天生自带的），只要我们去操作这个元素，就会触发这些行为&lt;br&gt;“事件是天生自带的行为，我们操作元素，就会触发相关行为”&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>汉英对照</title>
    <link href="https://abluecup.github.io/2019/09/12/%E6%B1%89%E8%8B%B1%E5%AF%B9%E7%85%A7/"/>
    <id>https://abluecup.github.io/2019/09/12/汉英对照/</id>
    <published>2019-09-12T05:31:17.000Z</published>
    <updated>2019-09-16T08:25:22.453Z</updated>
    
    <content type="html"><![CDATA[<p>Copyright  版权</p><p>jQuery</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Copyright  版权&lt;/p&gt;
&lt;p&gt;jQuery&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用代码段</title>
    <link href="https://abluecup.github.io/2019/09/06/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5/"/>
    <id>https://abluecup.github.io/2019/09/06/常用代码段/</id>
    <published>2019-09-06T06:10:06.000Z</published>
    <updated>2019-09-20T09:25:49.128Z</updated>
    
    <content type="html"><![CDATA[<p>是否是成年人<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num.toString().replace(<span class="regexp">/^(\d)$/</span>, <span class="string">'0$1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAdult</span>(<span class="params">birthday</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    b = birthday.replace(<span class="regexp">/\-(\d)&#123;1&#125;/g</span>, <span class="string">'-0$1'</span>).replace(<span class="regexp">/\-/g</span>, <span class="string">''</span>),</span><br><span class="line">    t = (n.getFullYear - <span class="number">18</span>) + format(n.getMonth + <span class="number">1</span>) + format(n.getDate);</span><br><span class="line">  <span class="keyword">return</span> (b &lt;= t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当返回的最终结果是一个层层递进的集合时，我们可以使用 &amp;&amp; 和 || 符，而不是if else</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isManAdult</span>(<span class="params">age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span> &amp;&amp; gender === <span class="string">'man'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项卡封装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=&gt; 参数初始化（初始化配置项），设置参数的默认值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载：把每一项当作实例的私有属性设置一下即可，我们通常说是把属性挂载到实例上</span></span><br><span class="line"><span class="comment">//获取需要挂载的元素，把获取的元素也挂载到实例上</span></span><br><span class="line"><span class="comment">// this.container = container;</span></span><br><span class="line"></span><br><span class="line">~<span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hasClass = <span class="function">(<span class="params">ele, str</span>) =&gt;</span> ele.className.trim().split(<span class="regexp">/ +/</span>).indexOf(str) &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> addClass = <span class="function">(<span class="params">ele, str</span>) =&gt;</span> &#123;</span><br><span class="line">        !hasClass(ele, str) &amp;&amp; (ele.className += <span class="string">` <span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> removeClass = <span class="function">(<span class="params">ele, str</span>) =&gt;</span> &#123;</span><br><span class="line">        hasClass(ele, str) &amp;&amp; (ele.className = ele.className.trim().split(<span class="regexp">/ +/</span>).filter(<span class="function"><span class="params">item</span> =&gt;</span> item !== str).join(<span class="string">' '</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Tabox</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(container, options) &#123;</span><br><span class="line">            <span class="keyword">let</span> _default = &#123;</span><br><span class="line">                lastIndex: <span class="number">0</span>,</span><br><span class="line">                eventType: <span class="string">'mouseover'</span>,</span><br><span class="line">                customPageClass: <span class="string">'options'</span>,</span><br><span class="line">                customContentClass: <span class="string">'con'</span>,</span><br><span class="line">                changeEnd: <span class="literal">null</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 把参数挂载到实例上</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> options) &#123;</span><br><span class="line">                <span class="keyword">if</span> (options.hasOwnProperty(attr)) &#123;</span><br><span class="line">                    _default[attr] = options[attr];</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> _default) &#123;</span><br><span class="line">                <span class="keyword">if</span> (_default.hasOwnProperty(attr)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>[attr] = _default[attr];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取操作元素，把需要操作的元素也挂载在实例上</span></span><br><span class="line">            <span class="keyword">this</span>.container = <span class="built_in">document</span>.getElementById(container);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.container.children);</span><br><span class="line">            <span class="keyword">this</span>._childNodes = [].slice.call(<span class="keyword">this</span>.container.children);</span><br><span class="line">            <span class="keyword">this</span>.option =<span class="keyword">this</span>. _childNodes.find(<span class="function"><span class="params">item</span> =&gt;</span> hasClass(item, <span class="keyword">this</span>.customPageClass));</span><br><span class="line">            <span class="keyword">this</span>.tabList = [].slice.call(<span class="keyword">this</span>.option.children);</span><br><span class="line">            <span class="keyword">this</span>.conList = <span class="keyword">this</span>._childNodes.filter(<span class="function"><span class="params">item</span> =&gt;</span> hasClass(item, <span class="keyword">this</span>.customContentClass));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行方法</span></span><br><span class="line">            <span class="keyword">this</span>.changeTab();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写在class里面的都是实例上的方法</span></span><br><span class="line">        changeTab() &#123;</span><br><span class="line">            <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">this</span>.tabList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">                item[<span class="string">`on<span class="subst">$&#123;<span class="keyword">this</span>.eventType&#125;</span>`</span>] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (index === _this.lastIndex) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    addClass(<span class="keyword">this</span>, <span class="string">'active'</span>);</span><br><span class="line">                    removeClass(_this.tabList[_this.lastIndex], <span class="string">'active'</span>);</span><br><span class="line">                    addClass(_this.conList[index], <span class="string">'active'</span>);</span><br><span class="line">                    removeClass(_this.conList[_this.lastIndex], <span class="string">'active'</span>);</span><br><span class="line">                    _this.lastIndex = index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">window</span>.Tabox = Tabox;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;是否是成年人&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>同步、异步编程</title>
    <link href="https://abluecup.github.io/2019/07/26/%E5%90%8C%E6%AD%A5%E3%80%81%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>https://abluecup.github.io/2019/07/26/同步、异步编程/</id>
    <published>2019-07-26T06:29:02.000Z</published>
    <updated>2019-08-19T08:22:45.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>定时器；设定一个定时器，并且设定了等待的时间，当到达设定的时间时，浏览器会执行对应的方法</p><p>【常用的定时器】<br>setTimeout([function],[interval])<br>setInterval([function],[interval])<br>[function],到达时间后执行的方法（设定时方法没有执行，到时间浏览器会帮我们执行）<br>[interval],时间因子（需要等待的时间），单位：毫秒</p><p>setTimeout是执行一次定时器，setInterval是可以多次执行的(轮循定时器)</p><p>清除定时器：<br>clearTimeout([序号]) / clearInterval([序号]) 这两种方法中的任何一个都可以清除用任何方法创建的定时器</p><p>设置定时器会有一个返回值，这个值是一个数字，属于定时器的编号，代表当前是第几个定时器（不管是基于setTimeout还是setInterval创建定时器，这个编号会累加）</p><h2 id="Js中的同步编程和异步编程"><a href="#Js中的同步编程和异步编程" class="headerlink" title="Js中的同步编程和异步编程"></a>Js中的同步编程和异步编程</h2><p>1，同步编程：任务是按照顺序依次处理，当前这件事没有彻底做完，下一件事是执行不了的；<br>2，异步编程：当前这件事没有彻底做完，需要等待一段时间才能继续处理，此时我们不等，继续执行下面的任务，当下面的任务完成后，再去把没有彻底完成的事彻底完成</p><h3 id="JS中的异步编程："><a href="#JS中的异步编程：" class="headerlink" title="JS中的异步编程："></a>JS中的异步编程：</h3><pre><code>1，所有的事件绑定都是异步编程；2，所有的定时器都是异步编程；3，ajax中一般都使用异步编程处理；4，回调函数也算是异步编程</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n=<span class="number">0</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(++n);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定时器设定一个时间，到时间后也不一定执行，如果当前还有其他的同步任务正在处理，那么到时间了也等着；</span></span><br></pre></td></tr></table></figure><h3 id="浏览器是如何规划同步异步机制的"><a href="#浏览器是如何规划同步异步机制的" class="headerlink" title="浏览器是如何规划同步异步机制的"></a>浏览器是如何规划同步异步机制的</h3><p>1，浏览器是多进程的，JS是单线程的（浏览器只给JS执行分配一个线程）<br>每一个应用程序都可以理解为一个进程，浏览器打开一个页面，就相当于开辟一个进程，在一个程序中（进程中），我们经常会同时做很多事情，此时我们可以分配多个线程去同时完成多项任务<br>2, js在单线程当中实现异步的机制，主要依赖于浏览器的任务队列完成的，浏览器中有两个任务队列，（主任务队列和等待任务队列）<br>    2.1 在主任务队列自上而下执行的时候，如果遇到一个异步操作任务，没有立即执行，而是把它放到等待任务队列中排队<br>    2.2 当主无人队列完成后才会到等待任务队列中进行查找（主任务队列完不成，不管等待任务队列中是否有到达时间的，都不处理，继续等待主任务队列完成，因为js是单线程的，一次只能处理一件事情）<br>3， 等待任务队列当中，谁达到条件了（如果有很多都达到条件了，谁先达到的，就先处理谁），就把这个任务重新放到主任务队列当中去执行，把这个任务执行完，再去等待队列中找……<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="number">10</span>);</span><br><span class="line"> setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'aa'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">90000000</span>; i++) &#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'aa'</span>);</span><br></pre></td></tr></table></figure></p><p><img src="/2019/07/26/同步、异步编程/aa.png" alt="上一个例子的图示"></p><h2 id="初始Promise"><a href="#初始Promise" class="headerlink" title="初始Promise"></a>初始Promise</h2><p>Promise：它是ES6中新增加的类 （new Promise）,目的是为了管理JS中的异步编程的，所以我们也把它称为Promise设计模式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三个状态：pending(准备状态：（初始化成功）开始执行异步任务)/fulfilled(成功)/rejected(失败)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, rejected</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//resolve, 当异步操作执行成功，我们执行resolve方法</span></span><br><span class="line">  <span class="comment">//rejected, 当异步操作执行失败，执行rejected方法</span></span><br><span class="line">  <span class="comment">//执行一个异步的任务, new Promise的时候，创建Promise的一个实例，立即会把当前函数体中的异步操作执行</span></span><br><span class="line">  <span class="comment">//Promise本身是同步编程，它可以管理异步操作</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;).then(</span><br><span class="line">  <span class="comment">// 第一个传进来的函数是resolve,第二个是rejected</span></span><br><span class="line">  (res)=&gt;&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ok"</span>,res);</span><br><span class="line">&#125;,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"no"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">     xhr.open(<span class="string">'get'</span>, <span class="string">'js/1.js'</span>, <span class="literal">false</span>);</span><br><span class="line">     xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">         val = xhr.responseText;</span><br><span class="line">         resolve(val);</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="keyword">if</span>(xhr.readyState !== <span class="number">200</span>)&#123;</span><br><span class="line">           rejected(val);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     xhr.send(<span class="literal">null</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">   pro.then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="comment">// 数据绑定……</span></span><br><span class="line">   &#125;,(res)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"no"</span>);</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="comment">// 当一个then中的函数执行完成，会执行第二个，依次类推</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="comment">// 第二个执行完成，就会执行第三个</span></span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="comment">//所有的设计模式都是一种编程思想，便于管理代码，管理业务逻辑</span></span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>实现方式：</p><pre><code>1. css3动画 (transition（过度动画）/animation（真动画）  transform是变形，不是动画)</code></pre><p>经常依托某一种动画让元素在一定时间内实现变形效果 （能用css3解决的，不用js，因为css3的动画性能高）</p><pre><code>2. js动画    定时器     requestAnimationFrame(js中的帧动画)    canvas动画就是js基于定时器完成的（canvas是一个html标签，可以理解为是一个画布，我们可以基于JS在画布上绘制图像和效果）3.flash动画</code></pre><h2 id="简单动画"><a href="#简单动画" class="headerlink" title="简单动画"></a>简单动画</h2><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>把一个函数A当作实参传递给另外一个函数B，在B方法中执行的时候，把A执行了，我们把这种机制叫做“回调函数机制”<br>      1, 根据需求回调函数可以被执行N多次；<br>      2，不仅可以把回调函数执行，还可以给传递的回调函数传递实参，这样在回调函数中设置形参（或者arg）接收即可；<br>      3，还可以改变回调函数中的this指向<br>      4, 可以在宿主函数（它在哪执行的，它的宿主函数就是谁）中接收回掉函数执行的返回结果<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn=<span class="function">(<span class="params">callback</span>)=&gt;</span>&#123;</span><br><span class="line">  callback &amp;&amp; cackback();</span><br><span class="line">&#125;;</span><br><span class="line">fn(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>:<span class="built_in">window</span> 回调函数中一般<span class="keyword">this</span>都是<span class="built_in">window</span>,除非宿主函数执行回调函数的时候把<span class="keyword">this</span>特殊指向了（箭头函数除外，箭头函数中的<span class="keyword">this</span>是它上下文的）</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="jquery中的动画和动画库"><a href="#jquery中的动画和动画库" class="headerlink" title="jquery中的动画和动画库"></a>jquery中的动画和动画库</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* let $box=$("#box");</span></span><br><span class="line"><span class="comment">console.log($box);</span></span><br><span class="line"><span class="comment">// stop()结束正在运行的动画，继续执行下一个新的动画，在哪停的就从哪开始</span></span><br><span class="line"><span class="comment">// finish()同stop一样，也是结束正在执行的动画(结束动画后，让元素立即运动到目标位置，从上一个动画的目标位置作为下一个动画的起始位置)</span></span><br><span class="line"><span class="comment">$box.stop().animate(&#123;</span></span><br><span class="line"><span class="comment">    top:300,</span></span><br><span class="line"><span class="comment">    left:500</span></span><br><span class="line"><span class="comment">&#125;,2000,'linear',()=&gt;&#123;</span></span><br><span class="line"><span class="comment">    $box.css(&#123;</span></span><br><span class="line"><span class="comment">        'border-radius':'50%',</span></span><br><span class="line"><span class="comment">        'background-color':'red'</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">&#125;); */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 快捷动画</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1，show,hide,toggle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2,fadeIn|fadeOut|fadeToggle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3, slideDown|slideUp|slideToggle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以制定具体的运动时间，也可以指定'slow','fast'</span></span><br><span class="line">$(<span class="string">'#box'</span>).slideUp(<span class="string">'slow'</span>);</span><br></pre></td></tr></table></figure><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><p>1，container是轮播图容器，溢出的内容需要隐藏<br>2，wrapper存放所有图片（所有图片同行排列），wrapper相对于container定位，后期让来轮播图切换其实就是改变wrapper的left值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定时器&quot;&gt;&lt;a href=&quot;#定时器&quot; class=&quot;headerlink&quot; title=&quot;定时器&quot;&gt;&lt;/a&gt;定时器&lt;/h2&gt;&lt;p&gt;定时器；设定一个定时器，并且设定了等待的时间，当到达设定的时间时，浏览器会执行对应的方法&lt;/p&gt;
&lt;p&gt;【常用的定时器】&lt;br&gt;se
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>快捷键</title>
    <link href="https://abluecup.github.io/2019/06/13/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://abluecup.github.io/2019/06/13/快捷键/</id>
    <published>2019-06-13T01:55:51.000Z</published>
    <updated>2019-07-04T09:28:38.699Z</updated>
    
    <content type="html"><![CDATA[<p>文件主要记录了常用的快捷键<br><a id="more"></a></p><h2 id="vscode-中的快捷键"><a href="#vscode-中的快捷键" class="headerlink" title="vscode 中的快捷键"></a>vscode 中的快捷键</h2><ol><li><p>插入注释<br>ctrl + alt + i 在文件头部添加注释<br>ctrl + alt + t 在光标处添加注释</p></li><li><p>打开控制台<br>ctrl + ` </p></li><li><p>JS多行注释<br>alt + shift + A</p></li><li><p>代码格式化<br>alt + shift + F</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件主要记录了常用的快捷键&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="https://abluecup.github.io/2019/06/12/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://abluecup.github.io/2019/06/12/面试题/</id>
    <published>2019-06-12T07:54:28.000Z</published>
    <updated>2019-07-15T01:00:02.343Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是对前面课程的总结归纳<br><a id="more"></a></p><h3 id="1-ES6相比ES5有哪些新语法"><a href="#1-ES6相比ES5有哪些新语法" class="headerlink" title="1. ES6相比ES5有哪些新语法"></a>1. ES6相比ES5有哪些新语法</h3><ul><li>let/const<blockquote><p>和ES5有哪些区别<br>1) let不存在变量提升机制（变量不允许在声明之前使用）<br>2) 不允许重复声明<br>3) 在全局作用域中声明的变量不是window的一个属性，和他没有关系<br>4) typeof 未被声明的变量 =&gt;不是undefined而是报错（暂时性死区）<br>5) let会形成私有作用域（类似于私有作用域，大部分大括号都会形成块级作用域）</p></blockquote></li><li>解构赋值</li><li>“…” 拓展、剩余、展开运算符</li><li><p>箭头函数</p><blockquote><p>和普通函数的区别<br>1) 没有arguments,但是可以基于…arg获取实参集合（结果是一个数组）<br>2) 没有自己的this,箭头函数中的this是上下文中的this</p></blockquote></li><li><p>模板字符串</p></li><li>Promise(async/await)</li><li>Class(ES6中创建类的)</li><li>interator(for of 循环)</li><li>Map / set</li><li>…</li></ul><h3 id="2-请说出你对“重排（回流）、-重绘、-读写分离”的理解"><a href="#2-请说出你对“重排（回流）、-重绘、-读写分离”的理解" class="headerlink" title="2.请说出你对“重排（回流）、 重绘、 读写分离”的理解"></a>2.请说出你对“重排（回流）、 重绘、 读写分离”的理解</h3><ul><li>思路：<blockquote><p>1.首先说出什么是重排和重绘<br>2.突出他们耗性能<br>3.突出自己写项目的时候重点注意了这些事情，以及自己的解决方案（说一下解决原理）</p></blockquote></li></ul><p>浏览器渲染一个页面的时候是按照“先创建DOM树，再加载CSS，生成渲染树RENDER TREE, 把渲染树交给浏览器（GPU）进行绘制”，如果后期我们修改了元素的样式（但是没有改变大小和位置），浏览器会把当前元素重新生成渲染树，然后重新渲染，这个机制是重绘，但是一旦元素的大小或者位置发生改变，浏览器就要从DOM树重新计算渲染，这个机制是重排（回流）。无论是重排还是重绘都非常的消耗性能。<br>在我以前的项目中，我特意的重视了这个问题，尽量减少DOM操作引发的回流和重绘问题，常用的解决方案：<br>1，需要动态向页面追加元素的时候，基于文档碎片或者先把需要增加的所有元素拼接成字符串，最后统一进行增加<br>2，读写分离： 把统一修改样式都放到一起执行，新版浏览器都有一个自己检测的机制，如果发现下面紧挨着的操作也是修改元素的样式，会把所有修改的事先存起来，知道遇到非修改样式的操作，会把之前存储的统一执行，引发一次回流和重绘</p><p>当让还有一些其他的办法，这些是最常注意的，我认为减少DOM回流重绘是非常重要的性能优化手段之一</p><h3 id="3-js中的this总结"><a href="#3-js中的this总结" class="headerlink" title="3.js中的this总结"></a>3.js中的this总结</h3><p>this : 当前方法的执行主体（谁执行的方法，this就是谁，this和当前方法在哪创建的或者在哪执行的都没有必然关系）<br>1.给当前元素的某个元素绑定事件，方法中的this都是当前操作的元素本身；<br>2.函数执行，看函数前面是否有点，有的话，点前面是谁，this就是谁，没有点，this是window(严格模式下，没有点this是undefined)<br>3.构造函数执行，方法中的this一般都是当前类的实例<br>4.箭头函数中没有自己的this,this是上下文中的this<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">            fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//this: obj</span></span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="comment">//this:obj</span></span><br><span class="line">                &#125;,<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>5.在小括号表达式当中，会影响this的指向<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fn(); <span class="comment">// obj</span></span><br><span class="line">(<span class="number">12</span>, obj.fn)(); <span class="comment">// window 以最后一项为主，但是函数指向window</span></span><br></pre></td></tr></table></figure></p><p>6.使用call/apply/bind可以改变this的指向<br>fn.call(obj); 第一个参数不写或者写none,undefined,this指向window;严格模式下，指向undefined</p><h3 id="谈一下你对作用域链和原型链的理解"><a href="#谈一下你对作用域链和原型链的理解" class="headerlink" title="谈一下你对作用域链和原型链的理解"></a>谈一下你对作用域链和原型链的理解</h3><p>1.作用域链：函数执行会形成一个私有的作用域，形参和在当前私有作用域中声明的变量都是私有变量，当前的私有作用域有自我保护机制，私有变量和外界是没有关系的，但是如果私有作用域中遇到一个非私有变量，则向它的上级作用域查找，如果上级作用域还没有，则继续查找，一直找到window为止，这种变量一层层向上查找的机制就是“作用域链机制“<br>2.原型链：也是一种查找机制，实例首先在自己的私有属性中进行查找，如果不是私有属性，基于<em>proto</em>向所属类的原型上查找，如果再找不到，则继续基于<em>proto</em>向上查找，一直找到Object.prototype为止<br>obj.hasOwnProperty(),这里调取的hasOwnProperty这个属性就是找到Object.prototype上才找到</p><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组去重不改变原有数组</span></span><br><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.myUniqueAry = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this:我们需要操作的数组，如果不想改变原有的数组，我们需要把要操作的数组克隆一份出来，处理的都是克隆的数组；</span></span><br><span class="line">    <span class="keyword">let</span> _this = [...this], obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _this.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = _this[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[item] !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            <span class="comment">// 当前对象在数组中已经存在，需要删除</span></span><br><span class="line">            _this[i] = _this[_this.length - <span class="number">1</span>];</span><br><span class="line">            _this.length--;</span><br><span class="line">            i--;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[item] = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> _this;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">let</span> uniqueAry = ary.myUniqueAry();</span><br><span class="line"><span class="built_in">console</span>.log(uniqueAry);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.myDelete=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 这种情况只能用于不改变原有数组，如果需要改变原有数组的话，</span></span><br><span class="line">    <span class="keyword">let</span> _this=[];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (_this.indexOf(<span class="keyword">this</span>[i])===<span class="number">-1</span>) &#123;</span><br><span class="line">           _this[_this.length]=<span class="keyword">this</span>[i];</span><br><span class="line">       &#125;             </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _this;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> aa = ary.myDelete();</span><br><span class="line"><span class="built_in">console</span>.log(aa,ary);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">Array</span>.prototype.myDelete=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _this=[];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (_this.indexOf(<span class="keyword">this</span>[i])===<span class="number">-1</span>) &#123;</span><br><span class="line">           _this[_this.length]=<span class="keyword">this</span>[i];</span><br><span class="line">       &#125;             </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改原有数组</span></span><br><span class="line">    <span class="keyword">this</span>.length=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _this.length; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="keyword">this</span>.length]=_this[i];   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="说出你所掌握的算法"><a href="#说出你所掌握的算法" class="headerlink" title="说出你所掌握的算法"></a>说出你所掌握的算法</h3><p>1.递归算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 常用算法</span><br><span class="line"> * 递归</span><br><span class="line"> * 去重</span><br><span class="line"> * 冒泡排序</span><br><span class="line"> * 插入排序</span><br><span class="line"> * 快速排序</span><br><span class="line"> * 时间复杂度</span><br><span class="line"> * 空间复杂度</span><br><span class="line"> * KMP</span><br><span class="line"> * ...</span><br><span class="line"> */</span><br><span class="line">// 递归：函数自己调用自己执行就是递归</span><br><span class="line">// (递归是基于条件判断的，因为我们不能形成死递归，在某个条件下，我们需要结束递归操作)</span><br><span class="line">// 数组扁平化</span><br><span class="line">        let ary = [1, [2, [3, [4, 5]]], 6];</span><br><span class="line"></span><br><span class="line">        let result = [],</span><br><span class="line">            fn = function (ary) &#123;</span><br><span class="line">                for (let i = 0; i &lt; ary.length; i++) &#123;</span><br><span class="line">                    let item = ary[i];</span><br><span class="line">                    if (Object.prototype.toString.call(item) === &apos;[object Array]&apos;) &#123;</span><br><span class="line">                        fn(item);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        result.push(item);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        fn(ary);</span><br><span class="line">        console.log(result);</span><br></pre></td></tr></table></figure></p><h3 id="写出你掌握的JS继承方式，项目中什么时候你用到了继承"><a href="#写出你掌握的JS继承方式，项目中什么时候你用到了继承" class="headerlink" title="写出你掌握的JS继承方式，项目中什么时候你用到了继承"></a>写出你掌握的JS继承方式，项目中什么时候你用到了继承</h3><p>面向对象：类的继承、封装、多态</p><ol><li><p>封装：把实现一个功能JS代码进行封装，主要目的：“低耦合、高内聚”；</p></li><li><p>多态<br> 2.1 重载：方法名相同，参数的个数或者类型不同，此时名字相同的方法叫做方法的重载（后台语言中的重载），JS中不存在重载的  （后面的方法会把前面的方法覆盖掉，不管传递多少实参，传递的都是后面的方法） （有人说JS中的重载是指，同一个方法根据传参的不一样，实现不同的功能，但是有点扯）服务器端的重载是为了减轻服务器端的压力，客户端不需要抗压<br> 2.2 重写：子类重写父类</p></li><li><p>继承<br> 子类继承父类的属性和方法</p><pre><code>3.1 原型继承3.2 call继承3.3 寄生组合寄生3.4 ES6中class类实现继承。。。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x=<span class="number">100</span>;</span><br><span class="line">&#125;;</span><br><span class="line">A.prototype=&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:A,</span><br><span class="line">    getX:function()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.y=<span class="number">200</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> f=<span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型继承: 让子类的原型指向父类的一个实例</span></span><br><span class="line">B.prototype=<span class="keyword">new</span> A();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1, b.prototype = new A(); A的实例本身具备父类A的私有属性和公有方法，子类B的原型指向它，那么子类B的实例就可以找到这些属性和方法了</span></span><br><span class="line"><span class="comment"> * 2, 和传统后台语言的继承不一样，子类继承父类，并不是把父类复制一份副本给子类（这样处理，子类和父类就没有直接关系了），JS中的原型继承是让子类和父类建立原型链的机制，子类的实例调取父类的属性和方法都是基于原型链来完成的。</span></span><br><span class="line"><span class="comment"> *      存在的问题：子类可以重写父类原型上的方法（重写），子类和父类还有关系的。</span></span><br><span class="line"><span class="comment"> *                  父类实例私有的属性和公有属性都变为子类实例的公有属性</span></span><br><span class="line"><span class="comment"> *                  如果子类B的原型上之前有属性方法，重新执行A的实例后，之前的方法都没用了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// call继承：把父类A作为普通函数执行，让A中的this变为B的实例，相当于给B的实例增加了一些属性和方法</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     A.call(<span class="keyword">this</span>);</span><br><span class="line">     <span class="keyword">this</span>.y=<span class="number">200</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//弊端：把父类A当作普通函数执行，和原型没有关系了，仅仅是把A中的私有属性变为子类B实例的私有属性，A原型上的公有属性和方法跟B没有关系</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//寄生组合式继承 A的私有变为B的私有，A的公有变为B的公有</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x=<span class="number">100</span>;</span><br><span class="line">&#125;;</span><br><span class="line">A.prototype=&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:A,</span><br><span class="line">    getX:function()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    A.call(<span class="keyword">this</span>); <span class="comment">// 基于call继承把A的私有变为B的私有</span></span><br><span class="line">    <span class="keyword">this</span>.y=<span class="number">200</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// B.prototype=A.prototype  一般不这么处理，会让修改父类A原型上的东西更方便，这样会导致A的其他实例也受到影响</span></span><br><span class="line">B.prototype=<span class="built_in">Object</span>.create(A.prototype); <span class="comment">// B.prototype = &#123;&#125; (obj._proto_ = A.prototype)</span></span><br><span class="line"><span class="keyword">let</span> f=<span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create(); 内置Object类天生自带的方法</span></span><br><span class="line"><span class="comment">// 1.创建一个空对象</span></span><br><span class="line"><span class="comment">// 2.让新创建的空对象的_proto_指向第一个传递进来的对象（把obj作为新创建空对象的原型）</span></span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    name:<span class="string">'haha'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.create(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种方式和原型继承的区别： B.prototype = new A() 创建A的实例指向A的原型，但是实例中不是空的，存放了A的私有属性，这些属性变为B的公有属性</span></span><br><span class="line"><span class="comment">// B.prototype=Object.create(A.prototype)的好处是创建了一个没有任何私有属性的空对象，指向A的原型，这样B的公有中就不会存在A的私有属性了。</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6中的类和继承</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES6中创建类是有自己标准语法的</span></span><br><span class="line"><span class="comment"> * 这种语法创建出来的类只能new执行，不能当作普通函数执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fn</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Fn是类名，没有小括号</span></span><br><span class="line">    <span class="keyword">constructor</span>(n, m) &#123;</span><br><span class="line">        <span class="comment">//等价于传统ES5类的构造体</span></span><br><span class="line">        <span class="keyword">this</span>.x = n;</span><br><span class="line">        <span class="keyword">this</span>.y = m;</span><br><span class="line">    &#125;</span><br><span class="line">    getX()&#123;</span><br><span class="line">        <span class="comment">// 相当于给Fn的原型上设置方法 Fn.prototype.getX=function()&#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给Fn的原型上设置方法（只能设置方法，不能设置属性），可以写外边</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">static</span> AA()&#123;</span><br><span class="line">        <span class="comment">//把Fn当作一个普通对象，设置私有的方法，同样也只能设置方法，不能设置属性，只能在外边设置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.BB=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn(<span class="number">20</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.x=<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getX()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;<span class="comment">//extends类似于形成了原型继承</span></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">//类似于call继承，相当于把A的constructor给执行了，并且让方法中的this是B的实例，super中传递的参数都是给A的constructor传递的</span></span><br><span class="line">        <span class="keyword">this</span>.y=<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getY()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="英文字母汉字组成的字符串，用正则给英文单词前后加空格"><a href="#英文字母汉字组成的字符串，用正则给英文单词前后加空格" class="headerlink" title="英文字母汉字组成的字符串，用正则给英文单词前后加空格"></a>英文字母汉字组成的字符串，用正则给英文单词前后加空格</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把一个英文段落中的每一个的单词首字母大写</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">"he is a good man-boy!"</span></span><br><span class="line"><span class="comment">//let reg = /\b([a-zA-Z]+)\b/g;</span></span><br><span class="line"><span class="comment">// \b会把-左右两边算作边界，the-man会被当作两个单词</span></span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/(^| )([^\s]+)( |$)/g</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/ /g</span>, <span class="string">'  '</span>).replace(reg, (...arg) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> val=arg[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> val.substr(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+val.substr(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是对前面课程的总结归纳&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>瀑布流</title>
    <link href="https://abluecup.github.io/2019/06/11/%E7%80%91%E5%B8%83%E6%B5%81/"/>
    <id>https://abluecup.github.io/2019/06/11/瀑布流/</id>
    <published>2019-06-11T07:18:49.000Z</published>
    <updated>2019-06-27T09:29:14.489Z</updated>
    
    <content type="html"><![CDATA[<p>瀑布流是当前流行的一种图片排列方式，本篇做了一些基本的介绍；<br><a id="more"></a></p><h2 id="瀑布流专题"><a href="#瀑布流专题" class="headerlink" title="瀑布流专题"></a>瀑布流专题</h2><p>瀑布流：<br>    效果：多列的不规则排列，每一列中有很多内容，每一项内容的高度不定，最后我们按照规则排列，散列之间不能相差太多高度<br>    实现：首先获取需要展示的数据（假设有50条，共3列），把50条数据中的前三条依次插入到三列中（目前有的列高，有的列低），接下来，再拿三条数据，但是本次插入不是依次插入，而是需要先把当前三列按照高矮进行排序，哪个最矮，就先给哪个插入内容，然后依次类推，把50条数据都插入即可。</p><p>tips:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用 Windows 快捷方式。</span><br><span class="line">Windows 右击 Chrome 的快捷方式 属性 - 快捷方式 - 目标。</span><br><span class="line">将目标内容后添加--allow-file-access-<span class="keyword">from</span>-files。</span><br><span class="line">注意添加的内容和原有内容要用空格分割。例如：</span><br><span class="line"><span class="string">"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"</span> --allow-file-access-<span class="keyword">from</span>-files。</span><br><span class="line">点击确定后，关闭所有 Chrome 窗口，使用快捷方式打开的 Chrome 窗口进行访问。</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;瀑布流是当前流行的一种图片排列方式，本篇做了一些基本的介绍；&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>盒子模型</title>
    <link href="https://abluecup.github.io/2019/05/15/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>https://abluecup.github.io/2019/05/15/盒子模型/</id>
    <published>2019-05-15T08:43:09.000Z</published>
    <updated>2019-09-18T08:48:03.964Z</updated>
    
    <content type="html"><![CDATA[<p>本篇的主要内容是盒子模型和jQuery的介绍<br><a id="more"></a></p><h2 id="JS中的盒子模型属性"><a href="#JS中的盒子模型属性" class="headerlink" title="JS中的盒子模型属性"></a>JS中的盒子模型属性</h2><p>在JS中通过相关的属性可以获取（设置—）元素的样式信息，这些属性就是盒子模型属性（基本上都是有关于样式的），共有13个属性，client/offset/scroll[Top/Left/Width/Height], offsetparent.</p><h3 id="clientWidth-amp-clientHeight"><a href="#clientWidth-amp-clientHeight" class="headerlink" title="clientWidth &amp; clientHeight"></a>clientWidth &amp; clientHeight</h3><p>获取当前元素可视区域的宽高：内容的宽高+padding;<br>和内容是否有溢出无关（和设置了overflow:hidden也无关）,就是我们自己设定的内容的宽高+padding<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前页面一屏幕（可视区域）的宽高</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;</span><br></pre></td></tr></table></figure></p><h3 id="clientTop-amp-clientLeft"><a href="#clientTop-amp-clientLeft" class="headerlink" title="clientTop &amp; clientLeft"></a>clientTop &amp; clientLeft</h3><p>内容的左上角相对于盒子的左上角的偏移距离</p><h3 id="offsetWidth-amp-offsetHeight"><a href="#offsetWidth-amp-offsetHeight" class="headerlink" title="offsetWidth &amp; offsetHeight"></a>offsetWidth &amp; offsetHeight</h3><p>在client的基础上加上border(和内容是否溢出也没有关系)</p><h3 id="offsetLeft-amp-offsetTop"><a href="#offsetLeft-amp-offsetTop" class="headerlink" title="offsetLeft &amp; offsetTop"></a>offsetLeft &amp; offsetTop</h3><p>元素距离其父级元素左边和上边的偏移距离</p><h3 id="scrollWidth-amp-scrollHeight"><a href="#scrollWidth-amp-scrollHeight" class="headerlink" title="scrollWidth &amp; scrollHeight"></a>scrollWidth &amp; scrollHeight</h3><p>真实内容的宽高（，不一定是自己设置的值，因为可能会存在内容溢出，有内容溢出的情况下，需要把溢出的内容也算上）+ 左/上padding,而且是一个约等于值（在不同浏览器下，或者是否设置了Overflow:hidder都会对最后的结果产生影响，所以这个值仅仅做参考，属于约等于的值）<br>没有内容溢出的情况下和client值相同<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  当前页面内容的真实宽高</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrolltWidth || <span class="built_in">document</span>.body.scrollWidth;</span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollHeight || <span class="built_in">document</span>.body.scrollHeight;</span><br></pre></td></tr></table></figure></p><h2 id="通过JS盒子模型属性获取值的特点"><a href="#通过JS盒子模型属性获取值的特点" class="headerlink" title="通过JS盒子模型属性获取值的特点"></a>通过JS盒子模型属性获取值的特点</h2><p>1 获取的都是数字，不带单位<br>2 获取的都是整数，不会出现小数(一般都会四舍五入，尤其是获取的偏移量)<br>3 获取的结果都是一个复合样式值（好几个元素样式组合在一起的值），如果只想获取单一样式值（这个不能说明没有用，真实项目中，有时候我们就是需要获取组合的值来完成一些操作）</p><h2 id="获取元素的具体的某个样式值"><a href="#获取元素的具体的某个样式值" class="headerlink" title="获取元素的具体的某个样式值"></a>获取元素的具体的某个样式值</h2><ol><li>[元素].style.xxx 操作<br>只能获取所有卸载元素行内上的样式（不写在行内上，不管你写没写都获取不到，真实项目中，我们很少会把样式卸载行内上）</li><li>window.getComputedStyle<br>获取当前元素所有经过浏览器计算的样式（只要当前元素可以在页面中呈现或者说浏览器渲染它了），那么它的样式都是被计算过的,不管当前样式写在哪，不管你是否写了（浏览器给元素设置了一些默认样式）<br>语法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.getComputedStyle([元素]，[伪类，一般都写<span class="literal">null</span>]) <span class="comment">// 获取到当前元素的所有样式</span></span><br><span class="line"><span class="comment">//IE6-8中用[元素].currentStyle</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="getCSS"><a href="#getCSS" class="headerlink" title="getCSS"></a>getCSS</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * getCSS: 获取当前元素的某一个元素属性值</span></span><br><span class="line"><span class="comment"> * @param</span></span><br><span class="line"><span class="comment"> *      curEle[object]: 当前要操作的元素</span></span><br><span class="line"><span class="comment"> *      attr[string]: 当前要获取的样式属性名</span></span><br><span class="line"><span class="comment"> * @return </span></span><br><span class="line"><span class="comment"> *      获取的样式属性值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">let</span> getCss=<span class="function"><span class="keyword">function</span> <span class="title">getCss</span>(<span class="params">curEle,attr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'getComputedStyle'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> val=<span class="built_in">window</span>.getComputedStyle(curEle,<span class="literal">null</span>)[attr];</span><br><span class="line">        <span class="comment">//把获取的结果去除单位，不是所有的值都能去单位的。例如display，还有一些复合值，比如border:1px solid gray;</span></span><br><span class="line">        <span class="comment">// 只有符合数字+单位这种模式的结果才能去除</span></span><br><span class="line">        <span class="keyword">let</span> reg=<span class="regexp">/^-?\d+(\.\d+)?(px|em|rem|pt)?$/i</span>;</span><br><span class="line">        reg.test(val)?val=<span class="built_in">parseFloat</span>(val):<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">'您的浏览器版本过低，请升级到最新版本，谢谢配合！'</span>); <span class="comment">// 抛出一个错误（语法错误），让浏览器崩溃，不再继续执行JS</span></span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="built_in">console</span>.log(getCss(outer,<span class="string">'border'</span>));</span><br></pre></td></tr></table></figure><h2 id="jQuery-JQ"><a href="#jQuery-JQ" class="headerlink" title="jQuery(JQ)"></a>jQuery(JQ)</h2><p> JQ是一个非常优秀的JS类库。<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类库、插件、UI组件、框架</span></span><br><span class="line"><span class="comment"> *  1，类库：JQ/ZEPTO... 提供一些真实项目中常用的方法，任何项目都可以把类库导入进来，调取里面的方法实现自己需要的业务逻辑；</span></span><br><span class="line"><span class="comment"> *  2，插件：具备一定的业务功能，例如，我们可以封装轮播图插件、选项卡插件、模态狂插件等（规定了当前这个功能的样式结构，把实现功能的JS进行封装，以后想实现这个功能，直接导入插件即可）swiper\iscroll\jquery-dialog\jquery-drag\jquery-datepicker\ECharts；</span></span><br><span class="line"><span class="comment"> *  3，UI组件：把结构、css、js全部都封装好了，我们想实现一个功能，直接导入进来即可（可能会偶尔需要我们修改下，但是改动不多）bootstrap...</span></span><br><span class="line"><span class="comment"> *  4, 框架：具备一定的编程思想，要求我们按照他们的框架思想开发，一般框架中提供了常用的类库方法，强大的功能插件，有的也提供了强大的UI组件 React \ Vue \ Angular \ Backbone \ Sea.js \ Require.js...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jQuery非常优秀的JS“类库”</span></span><br><span class="line"><span class="comment"> *      -&gt; 基于原生JS封装的一个类库，提供了很多的方法，而且这些方法是兼容所有浏览器的；</span></span><br><span class="line"><span class="comment"> *      -&gt; JQ版本 </span></span><br><span class="line"><span class="comment"> *              v1 (常用) 1.8.7 1.9.3  1.11.3</span></span><br><span class="line"><span class="comment"> *              v2 </span></span><br><span class="line"><span class="comment"> *              v3</span></span><br><span class="line"><span class="comment">//  */</span></span><br></pre></td></tr></table></figure></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> version = <span class="string">"1.11.3"</span>,</span><br><span class="line">    jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</span><br><span class="line"><span class="comment">// The jQuery object is actually just the init constructor 'enhanced'</span></span><br><span class="line"><span class="comment">// Need init if jQuery is called (just allow error to be thrown if not included)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init( selector, context ); <span class="comment">//创建了init这个类的实例，相当于也创建了JQ这个类的实例，因为在后面的时候，让init.prototype=jQuery.prototype</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//JQ是一个类，在它的原型上提供了很多属性和方法，供JQ的实例调取使用</span></span><br><span class="line">    jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">        <span class="comment">// The current version of jQuery being used</span></span><br><span class="line">        jquery: version,</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">constructor</span>: jQuery, // 原型重定向之后，自己开辟的堆内存中是没有<span class="keyword">constructor</span>,需要手动增加，保证它的完整性。</span><br><span class="line">    </span><br><span class="line">        // Start with an empty selector</span><br><span class="line">        selector: ""</span><br><span class="line">        //...</span><br><span class="line">    &#125;;</span><br><span class="line">    //给JQ原型上增加extend方法，同时把JQ当作一个普通对象，给这个对象设置了一个私有的方法</span><br><span class="line">    /**</span><br><span class="line">     * JQ是一个类，也是一个普通对象，这是函数的两种角色；JQ是一个类库，提供了很多方法，其中这些方法有两部分</span><br><span class="line">     *      1，放到JQ原型上的，这里面的方法是供JQ的实例调取使用的</span><br><span class="line">     *      2，把JQ当作一个普通的对象，在对象上设置一些私有的属性和方法，这类方法以后用的时候直接jQuery.xxx()执行即可</span><br><span class="line">     */</span><br><span class="line">    jQuery.extend = jQuery.fn.extend = function() &#123;</span><br><span class="line">        <span class="comment">//把一个对象中的属性和方法扩展到指定的对象上</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    jQuery.extend(&#123;</span><br><span class="line">        isFunction:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        isArrary:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//JQ上多了方法isFunction, isArray...</span></span><br><span class="line">    jQuery.fn.extend(&#123;</span><br><span class="line">        find:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// 往JQ的原型上添加新的方法find</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">// 把init当作一个类，但是让这个类的原型指向了JQ的原型（init的实例最后找到的是JQ这个类的原型上的方法，init的实例也可以理解为JQ的实例）</span></span><br><span class="line">    <span class="keyword">var</span> init = jQuery.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;&#125;;</span><br><span class="line">    init.prototype=jQuery.fn;</span><br><span class="line">    <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    <span class="keyword">return</span> jQuery;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">$()<span class="comment">//创建了一个jQuery的实例，可以调取jQuery.fn上的方法</span></span><br><span class="line">$.isFunction();<span class="comment">// 把jQuery当作一个普通对象，直接使用对象上的方法，这些方法和实例没有关系</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=&gt; JQ选择器:基于各种选择器创建一个JQ实例（JQ对象）</span></span><br><span class="line"><span class="comment">//1. selector 选择器的类型（一般都是字符串，但是支持函数或者元素对象）</span></span><br><span class="line"><span class="comment">//2. context 基于选择器获取元素的时候指定的上下文（默认document）</span></span><br><span class="line"><span class="comment">//JQ对象：一个类数组结构（JQ实例），这个类数组集合中包含了获取到的元素</span></span><br><span class="line"><span class="comment">// console.log($('.tabBox'));</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JQ对象（类数组）=&gt;JQ实例</span></span><br><span class="line"><span class="comment"> * 0:div.tabBox 获取到的元素</span></span><br><span class="line"><span class="comment"> * length:1</span></span><br><span class="line"><span class="comment"> * context:document</span></span><br><span class="line"><span class="comment"> * selector: '.tabBox'</span></span><br><span class="line"><span class="comment"> * _proto_:jQuery.prototype</span></span><br><span class="line"><span class="comment"> *      add:</span></span><br><span class="line"><span class="comment"> *      ...</span></span><br><span class="line"><span class="comment"> *      _proto_: Object.prototype</span></span><br><span class="line"><span class="comment"> *          hasOwnProperty:</span></span><br><span class="line"><span class="comment"> *          ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取页面中的元素对象</span></span><br><span class="line"><span class="comment">  *     1.基于原生JS提供的属性和方法获取=&gt;"原生JS对象"</span></span><br><span class="line"><span class="comment">  *         可以调取使用内置的JS属性和方法 className,onclick,...</span></span><br><span class="line"><span class="comment">  *     2.基于JQ选择器获取=&gt;JQ对象</span></span><br><span class="line"><span class="comment">  *         可以调取JQ原型上提供的方法</span></span><br><span class="line"><span class="comment">  *         add</span></span><br><span class="line"><span class="comment">  *         find</span></span><br><span class="line"><span class="comment">  *         ...</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">//$('.tabBox').className += 'clearfix'; </span></span><br><span class="line"><span class="comment">// 没法使用，$原型上没有这些方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把JQ对象和原生JS对象之间相互转化</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1 JQ对象 -&gt; 原生JS对象</span></span><br><span class="line"><span class="comment"> *      JQ对象是一个类数组结合，集合中每一个索引对象的都是原生JS对象，我们基于索引获取即可</span></span><br><span class="line"><span class="comment"> *          let $tabBox=$(".tabBox"); 变量名前面是以$开头的，一般代表基于JQ选择器获取的结果</span></span><br><span class="line"><span class="comment"> *          let tabBox=$tabBox[0]; </span></span><br><span class="line"><span class="comment"> *              获取$tabBox.get(0);get是JQ原型提供的方法，供JQ实例基于索引获取到指定的JS对象 </span></span><br><span class="line"><span class="comment"> *                  $tabBox.eq(0); 它也是基于索引获取集合中的某一项，只不过get获取到的是JS对象，EQ会把获取到的结果包裹成一个新的JQ对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2 原生JS对象 -&gt; JQ对象</span></span><br><span class="line"><span class="comment"> *      let tabBox=document.querySelector('.tabBox');</span></span><br><span class="line"><span class="comment"> *      $(tabBox); 直接使用$把原生JS对象包裹起来，就可以把JS对象转化为JQ对象（因为$()执行就是创建JQ的一个实例）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 看选择器源码，我们发现selector传递的值支持三种类型</span></span><br><span class="line"><span class="comment">  *     1 STRING</span></span><br><span class="line"><span class="comment">  *     2 元素对象 selector.nodeType 把JS对象转化为JQ对象</span></span><br><span class="line"><span class="comment">  *     3 函数 把传递的函数执行，并且把jQuery当作实参传给函数 selector(jQuery);</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">/*  $(function($)&#123;</span></span><br><span class="line"><span class="comment">     //=&gt;$: 传递进来的jQuery</span></span><br><span class="line"><span class="comment">     //</span></span><br><span class="line"><span class="comment">     console.log($);</span></span><br><span class="line"><span class="comment"> &#125;); */</span></span><br><span class="line"></span><br><span class="line"> $=<span class="string">'呱呱呱'</span>;</span><br><span class="line"> jQuery(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">     <span class="comment">//$:是私有变量，而且特定就是JQ</span></span><br><span class="line">     $();</span><br><span class="line"> &#125;);</span><br><span class="line"> jQuery(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="comment">//函数肯定会执行，但是会在当前页面中的HTML结构都加载完成后再执行</span></span><br><span class="line">     <span class="comment">//函数执行会形成一个闭包</span></span><br><span class="line"></span><br><span class="line"> &#125;);</span><br><span class="line"> $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// 写自己的代码</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//JQ中常用的方法</span></span><br><span class="line"><span class="comment">/* $(document).ready(function()&#123;</span></span><br><span class="line"><span class="comment">    $('&lt;a href="https://www.baidu.com"&gt;&lt;/a&gt;')[0].click();</span></span><br><span class="line"><span class="comment">&#125;); */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JQ选择器的selector可以是字符串，字符串这种格式也有两种</span></span><br><span class="line"><span class="comment"> *      1 选择器</span></span><br><span class="line"><span class="comment"> *      2 html字符串拼接的结构：把拼接好的html字符串转换为JQ对象，然后基于append-to方法追加到页面当中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$(<span class="string">'&lt;div id="AA"&gt;&lt;/div&gt;'</span>).appendTo(<span class="built_in">document</span>.body);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JQ中的each方法是用来进行遍历（类似数组中的FOR-EACH</span></span><br><span class="line"><span class="comment"> * 【可遍历对象】</span></span><br><span class="line"><span class="comment"> * 1.数组</span></span><br><span class="line"><span class="comment"> * 2 对象</span></span><br><span class="line"><span class="comment"> * 3 类数组（JQ对象）</span></span><br><span class="line"><span class="comment"> * 。。。</span></span><br><span class="line"><span class="comment"> * 【三种EACH】</span></span><br><span class="line"><span class="comment"> * 1 给JQUERY设置的私有属性 $.each();</span></span><br><span class="line"><span class="comment"> * 2 给实例设置的公有属性 $([SELECTOR]).each();</span></span><br><span class="line"><span class="comment"> * 3 内置的EACH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$.each([<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>],(index,item)=&gt;&#123;</span><br><span class="line">    <span class="comment">//=&gt; 参数的顺序和内置的FOR-EACH相反</span></span><br><span class="line">    <span class="built_in">console</span>.log(index,item);</span><br><span class="line">&#125;);</span><br><span class="line">$.each(&#123;<span class="attr">name</span>:<span class="string">'xxx'</span>,<span class="attr">age</span>:<span class="number">25</span>,<span class="number">0</span>:<span class="number">100</span>&#125;,(key,value)=&gt;&#123;</span><br><span class="line">    <span class="comment">//原理就是FOR-IN循环</span></span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* $('.tabBox li').each(function(index,item)&#123;</span></span><br><span class="line"><span class="comment">    //非箭头函数：this===item,当前遍历的项（原生JS对象）</span></span><br><span class="line"><span class="comment">    //$(this),把原生JS对象转化为JQ对象</span></span><br><span class="line"><span class="comment">    $(this).on('click',function()&#123;</span></span><br><span class="line"><span class="comment">        //this</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">    $(this).click(function()&#123;</span></span><br><span class="line"><span class="comment">        //this: 原生JS对象</span></span><br><span class="line"><span class="comment">        $(this).css(&#123;</span></span><br><span class="line"><span class="comment">            color:'red'</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">&#125;); */</span></span><br><span class="line">$(<span class="string">'.tabBox li'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//集合中有三个，我们此处相当于给三个Li都绑定了点击事件，JQ在调取click的时候，首先会默认的把集合进行each遍历，然后把每一项都绑定点击事件</span></span><br><span class="line">    $(<span class="keyword">this</span>).css(&#123;</span><br><span class="line">        color:<span class="string">'red'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'.tabBox li'</span>).css(&#123;<span class="attr">color</span>:<span class="string">'green'</span>&#125;);</span><br><span class="line"><span class="comment">//JQ中的大部分方法都会对对象进行each</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * addClass</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">jQuery.noConflict();<span class="comment">//转让JQ使用$的权利</span></span><br><span class="line"><span class="built_in">console</span>.log($); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zzz=jQuery.noConflict(<span class="literal">true</span>);<span class="comment">// 深度转让/*  */</span></span><br><span class="line"><span class="built_in">console</span>.log(jQuery); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(zzz); <span class="comment">// jQuery</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $.ajax(&#123;url:'',method:get,async:false，success:function()&#123;&#125;&#125;);  直接得到的就是JSON格式的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="comment">//toggle切换</span></span><br><span class="line"><span class="comment">//jQ里面常用的筛选方法有三个：</span></span><br><span class="line"><span class="comment">//filter:同级筛选</span></span><br><span class="line"><span class="comment">//children:子集筛选</span></span><br><span class="line"><span class="comment">//find:后代筛选</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=&gt;当html结构都加载完成执行函数</span></span><br><span class="line"><span class="comment">/* jQuery(function ($) &#123;</span></span><br><span class="line"><span class="comment">    let $tabBox = $('.tabBox'),</span></span><br><span class="line"><span class="comment">        $tabList = $tabBox.find('.header&gt;li'),</span></span><br><span class="line"><span class="comment">        $divList = $tabBox.children('div');</span></span><br><span class="line"><span class="comment">    //基于JQ内置的each机制，给每一个li都绑定了点击事件</span></span><br><span class="line"><span class="comment">    $tabList.on('click', function () &#123;</span></span><br><span class="line"><span class="comment">        let index = $(this).index();</span></span><br><span class="line"><span class="comment">        $(this).addClass('active')</span></span><br><span class="line"><span class="comment">            .siblings().removeClass('active')</span></span><br><span class="line"><span class="comment">            .parent().nextAll('div').eq(index).addClass('active')</span></span><br><span class="line"><span class="comment">            .siblings('div').removeClass('active');</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">jQuery(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".tabBox&gt;.header&gt;li"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> index = $(<span class="keyword">this</span>).index();</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>)</span><br><span class="line">            .siblings().removeClass(<span class="string">'active'</span>)</span><br><span class="line">            .parent().nextAll(<span class="string">'div'</span>).eq(index).addClass(<span class="string">'active'</span>)</span><br><span class="line">            .siblings(<span class="string">'div'</span>).removeClass(<span class="string">'active'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>补充：<br>&lt;!–<br>    块级元素，默认宽度为父级元素的100%；<br>    如果块级元素的子元素全部都是position:absolute的话，宽度为100%，高度为0<br>    position:relative是相对于自己的定位；position:absolute是相对于父级元素的的定位；</p><pre><code>float, absolute都会让元素脱离文档流， clear：left|right|both|none;表示清除元素左|右|两边|none的浮动元素（float属性不为none的元素，float属性值为none的元素不受影响）p span a i strong b img td等都是行内元素div header table tr section ul li等都是块级元素inline-block行内块：位置在行内，但是拥有宽度、高度等块级元素的属性</code></pre><p> –&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇的主要内容是盒子模型和jQuery的介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则</title>
    <link href="https://abluecup.github.io/2019/04/29/%E6%AD%A3%E5%88%99/"/>
    <id>https://abluecup.github.io/2019/04/29/正则/</id>
    <published>2019-04-29T08:24:35.000Z</published>
    <updated>2019-07-04T09:28:32.325Z</updated>
    
    <content type="html"><![CDATA[<p>恰如其分得使用正则，能够减少代码的冗余量；<br><a id="more"></a></p><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><p>是一个用来处理字符串的规则</p><blockquote><p>正则只能用来处理字符串<br>    1:验证当前字符串是否符合某个规则（正则匹配）<br>    2：把一个字符串中符合规则的字符获取到（正则捕获）<br>学习正则其实是学习如何编写规则，每一个正则都是由“元字符”、“修饰符”两部分组成</p></blockquote><h3 id="创建正则的两种方式"><a href="#创建正则的两种方式" class="headerlink" title="创建正则的两种方式"></a>创建正则的两种方式</h3><p>1.字面量方式<br><code>let reg = /^\d+$/g;</code></p><p>2.构造函数方式<br><code>let reg =new RegExp(&#39;^\\d+$&#39;,&#39;g&#39;)</code></p><h3 id="元字符和修饰符"><a href="#元字符和修饰符" class="headerlink" title="元字符和修饰符"></a>元字符和修饰符</h3><p>两个//之间的都是元字符，/后面出现的都是修饰符<br>^ caret</p><h4 id="常用的修饰符"><a href="#常用的修饰符" class="headerlink" title="常用的修饰符"></a>常用的修饰符</h4><p>i,m,g</p><blockquote><p>i: ignoreCase 忽略大小写<br>m: multiline 多行匹配<br>g: global 全局匹配</p></blockquote><h4 id="常用的元字符"><a href="#常用的元字符" class="headerlink" title="常用的元字符"></a>常用的元字符</h4><p>『特殊元字符』<br>我们简单介绍常用的16个元字符：<br>    \d  0-9之间的数字<br>    \D  非0-9之间的任意字符<br>    \w  数字、字母、下划线中的任意一个  =&gt; /[0-9a-zA-Z_]/<br>    \W  数字、字母、下划线外的任意一个<br>    \s  匹配任意一个空白字符（包括\t制表符）<br>    \b  匹配边界符  ‘zhu’ z左边和u右边就是边界  ‘zhu-feng’ z左边、u右边、f左边、g右边都是边界<br>    \n  匹配一个换行符<br>    \   转义字符：把一个普通字符转义为特殊的字符，例如\d; 把有特殊含义的转化为普通意思,例如. 表示一个小数点  (.  不仅仅是小数点，代表除了\n以外的任意字符)<br>    ^   以某个元字符开头 发音：[‘kærət]<br>    $   以某个元字符结尾<br>    |   x|y 表示x或者y中的任意一个<br>    []  [xyz] 表示x,y,z中的任意一个 [^xyz] 除了x,y,z之外的任意一个字符 [a-z]获取a-z中的任意一个字符  [0-9] == \d  [^0-9] == \D<br>    () 正则分组<br>    (?:) 当前分组只匹配，不捕获<br>    (?=) 正向预查<br>    (?!) 负向预查<br>    …</p><p>『量词元字符』：让其左边的元字符出现多少次</p><pre><code>* 出现0到多次? 出现零到一次+ 出现一到多次{n} 出现n次{n,} 出现n到多次{n,m} 出现n到m次</code></pre><p>『普通元字符』<br>    只要在正则中出现的元字符（在基于字面方式创建），除了特殊和有量词意义的以外，都是普通元字符。</p><h3 id="的一些细节"><a href="#的一些细节" class="headerlink" title="[]的一些细节"></a>[]的一些细节</h3><p>[xyz]<br>[^xyz]<br>[a-z]<br>[^a-z]<br>1.在[]中出现的元字符一般都是代表本身含义的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^.$/</span>;  里面是任意字符</span><br><span class="line"><span class="comment">//一个正则设置了^$,那么代表的含义其实就是只能是xxx</span></span><br><span class="line"><span class="keyword">let</span> reg1=<span class="regexp">/^[.]+$/</span> [.]只能是 . </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg2=<span class="regexp">/^[\d]$/</span>; \d依然代表的是<span class="number">0</span><span class="number">-9</span>中的任意数字</span><br></pre></td></tr></table></figure></p><p>2.[]中出现的两位数，不是两位数，而是两个数字中的任意一个<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="comment">// 不加^$,代表字符串中只要包含xx即可</span></span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="number">8</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="number">18</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg1=<span class="regexp">/^[18]$/</span>; <span class="comment">// 18中的一个</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="number">8</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="number">18</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg3=<span class="regexp">/^[12-65]$/</span>;<span class="comment">//表示1或者2-6或者5 </span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="number">13</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="number">5</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>思考题：年龄在18-65之间<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 18,19 1[89]</span></span><br><span class="line"><span class="comment"> * 20-59 [2-5][0-9]</span></span><br><span class="line"><span class="comment"> * 60-65 6[0-5]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/^(([2-5][0-9])|(1[89])|(6[0-5]))$/</span>;</span><br></pre></td></tr></table></figure></p><p>思考题：编写一个规则，匹配”[object AAA]”<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/^\[object .+\]$/</span></span><br></pre></td></tr></table></figure></p><h3 id=""><a href="#" class="headerlink" title="()"></a>()</h3><ol><li><p>分组的作用<br> a 改变默认的优先级</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/^(18|19)$/</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /^18|19$/表示的是1开头，9结尾，中间夹一个8或者1</span></span><br><span class="line"><span class="comment"> * /^(18|19)$/表示的是18或者19中的一个</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p> b 分组捕获<br> c 分组引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 正则捕获：把一个字符串中和正则匹配到的部分获取到</span></span><br><span class="line"><span class="comment">* 【正则】</span></span><br><span class="line"><span class="comment">* exec  [ɪg'zek; eg-]</span></span><br><span class="line"><span class="comment">* test</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 【字符串】</span></span><br><span class="line"><span class="comment">* replace</span></span><br><span class="line"><span class="comment">* match</span></span><br><span class="line"><span class="comment">* split</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 基于exec可以实现正则捕获，</span></span><br><span class="line"><span class="comment">* 1. 如果当前字符和正则不匹配，捕获到的结果是null;</span></span><br><span class="line"><span class="comment">* 2. 如果匹配，获取到的是一个数组</span></span><br><span class="line"><span class="comment">* 0：大正则捕获的内容</span></span><br><span class="line"><span class="comment">* index ： 正则捕获的起始索引</span></span><br><span class="line"><span class="comment">* input: 源字符串</span></span><br><span class="line"><span class="comment">* 3. 执行一次exec只能捕获到第一个和正则匹配的内容，其余匹配的内容还没有捕获到，而且执行多次，也无法获取到之后匹配的内容=&gt;正则的捕获有懒惰行：只能匹配到第一个匹配的内容，剩下的匹配不到</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'zhufeng2018peixun2019yangfan2020qihang2021'</span>;</span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="comment">/* console.log(reg1.test(str)) true;</span></span><br><span class="line"><span class="comment">console.log(reg1.exec(str)); </span></span><br><span class="line"><span class="comment">[ '2018',</span></span><br><span class="line"><span class="comment">  index: 7,</span></span><br><span class="line"><span class="comment">  input: 'zhufeng2018peixun2019yangfan2020qihang2021' ]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg1.lastIndex); <span class="comment">// 0 正则捕获的时候，下一次在字符串中开始查找的索引</span></span><br><span class="line"><span class="comment">//lastIndex不变导致了懒惰性</span></span><br><span class="line"><span class="comment">//即使我们手动修改了lastIndex的值，也没什么用</span></span><br><span class="line"><span class="comment">//解决懒惰性问题: 加全局修饰符g; 如果不加g，不管用什么方法，都无法把全部匹配的捕获到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="comment">/* console.log(reg2.lastIndex);</span></span><br><span class="line"><span class="comment">console.log(reg2.exec(str));</span></span><br><span class="line"><span class="comment">console.log(reg2.lastIndex);</span></span><br><span class="line"><span class="comment">//console.log(reg2.exec(str)); */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">RegExp</span>.prototype.myExecAll = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line"><span class="comment">//this:reg当前操作的正则</span></span><br><span class="line"><span class="comment">//str: 我们要捕获的字符串</span></span><br><span class="line"><span class="comment">//具体捕获多少次不定，直到捕获到null为止，期间把捕获到的内容存储到数组中即可</span></span><br><span class="line"><span class="comment">// 为了防止死循环，我们需要对正则进行检验</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.global) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.exec(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = [],</span><br><span class="line">valAry = <span class="keyword">this</span>.exec(str);</span><br><span class="line"><span class="keyword">while</span> (valAry) &#123;</span><br><span class="line">result.push(valAry[<span class="number">0</span>]); <span class="comment">// 把每一次正则捕获到的内容存储到容器当中，最后把result返回</span></span><br><span class="line">valAry = <span class="keyword">this</span>.exec(str);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//console.log(reg2.myExecAll(str));</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg1));</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg2)); <span class="comment">//[ '2018', '2019', '2020', '2021' ] match 实现了我们自己编写的execAll处理的事情，正则不加g，返回第一个即可，加g，把所有匹配的内容都捕获到，最后存储到一个数组中返回</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">'zhufeng&#123;2018&#125;peixun&#123;2019&#125;yangfan&#123;2020&#125;qihang&#123;2021&#125;'</span>;</span><br><span class="line"><span class="keyword">let</span> reg4=<span class="regexp">/\&#123;(\d+)\&#125;/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg4.exec(str1)); <span class="comment">// 在正则捕获的时候，如果正则中存在分组，捕获的时候不仅仅把大正则匹配到的字符捕获到（数组的第一项），而且把小分组匹配的内容也单独抽取出来（数组中第二项</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1.match(reg4)); <span class="comment">//match 有局限性，在正则设置g的情况下，基于match捕获的内容只有大正则匹配的内容，小分组的内容没有单独抽取出来；不设置g的情况下和执行exec一样。</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="/2019/04/29/正则/0.png" alt="alt name"><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 正则捕获的贪婪性</span></span><br><span class="line"><span class="comment">* 每一次匹配捕获的时候，总是匹配到和正则匹配中最长的内容：我们捕获到的不是2，而是2018</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.exec(str));</span><br><span class="line"><span class="comment">//解决方案：在量词后面加个?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg5=<span class="regexp">/\d+?/</span>; <span class="comment">//此时?不是出现0-1次，而是取消捕获的贪婪性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ?在正则中的作用</span></span><br><span class="line"><span class="comment">* 1. 量词元字符：出现0-1次</span></span><br><span class="line"><span class="comment">* 2. 取消贪婪性 /\d+?/ 只捕获最短匹配的内容</span></span><br><span class="line"><span class="comment">* 3. ?: 只匹配不捕获</span></span><br><span class="line"><span class="comment">* 4. ?= 正向预查</span></span><br><span class="line"><span class="comment">* 5. ?! 负向预查</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h3 id="更多的捕获方式"><a href="#更多的捕获方式" class="headerlink" title="更多的捕获方式"></a>更多的捕获方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">"zhufeng2018peixun2019"</span>;</span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex); <span class="comment">// 11</span></span><br><span class="line"><span class="comment">//基于test进行捕获的时候，如果设置了g，test匹配也相当于捕获，修改了last-index的值</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">'zhufeng2018'</span>;</span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="keyword">if</span>(reg.test(str))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reg.exec(str)); <span class="comment">// null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">'zhufeng2018'</span>;</span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str)); <span class="comment">// 2018</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(<span class="string">'zhufeng2018peixun2019'</span>)); <span class="comment">// 2019</span></span><br><span class="line"><span class="comment">//虽然捕获的不是同一个字符串，但是同一个正则，上一次正则处理的时候修改了它的last-index,也会对下一次匹配的字符串产生影响</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">'zhufeng2018peixun2019'</span>;</span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/(\d+)/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">// 2018</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把上一次匹配到的结果获取到，获取的是第一个小分组匹配的内容，大正则匹配的内容无法获取到</span></span><br><span class="line"><span class="comment"> * 它是一个全局的值，浏览器中$1只有一个，其他的正则操作也会覆盖这个值，所以没有什么用处</span></span><br><span class="line"><span class="comment"> *  */</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">//2019</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">//2019</span></span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * replace:实现正则捕获（本身是字符串替换）</span></span><br><span class="line"><span class="comment"> * 原理：每一次正则匹配的结果都把函数执行，然后基于EXEC把本次匹配的信息捕获到，然后把捕获的信息传递给这个函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'zhufeng2018zhufeng2019'</span>;</span><br><span class="line"><span class="comment">//zhufeng =&gt; zhufengpeixun</span></span><br><span class="line"><span class="comment">//真实项目中，很多需求不基于正则是无法实现替换的</span></span><br><span class="line">str=str.replace(<span class="regexp">/zhufeng/g</span>,<span class="string">'zhufengpeixun'</span>);</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/zhufeng/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="keyword">let</span> str1=<span class="string">'zhufeng&#123;val:2018&#125;zhufeng&#123;val:2019&#125;'</span>;</span><br><span class="line"><span class="keyword">let</span> reg1=<span class="regexp">/\&#123;val:(\d+)\&#125;/g</span>;</span><br><span class="line"><span class="comment">//str1=str1.replace(reg1,'@'); </span></span><br><span class="line">str1=str1.replace(reg1,<span class="string">'$1'</span>);<span class="comment">//此处的$1代表第一个分组匹配的内容，等价于RegExp.$1 zhufeng2018zhufeng2019</span></span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//zhufeng@zhufeng@ </span></span><br><span class="line"><span class="comment">/*用reg正则和str字符串进行匹配，匹配几次就替换几次，</span></span><br><span class="line"><span class="comment">每一次都是把当前“大正则”匹配的结果用第二个传递的字符串替换掉了*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * replace:实现正则捕获（本身是字符串替换）</span></span><br><span class="line"><span class="comment"> * 原理：每一次正则匹配的结果都把函数执行，然后基于EXEC把本次匹配的信息捕获到，然后把捕获的信息传递给这个函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'zhufeng2018zhufeng2019'</span>;</span><br><span class="line"><span class="comment">//zhufeng =&gt; zhufengpeixun</span></span><br><span class="line"><span class="comment">//真实项目中，很多需求不基于正则是无法实现替换的</span></span><br><span class="line">str=str.replace(<span class="regexp">/zhufeng/g</span>,<span class="string">'zhufengpeixun'</span>);</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/zhufeng/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="keyword">let</span> str1=<span class="string">'zhufeng&#123;val:2018&#125;zhufeng&#123;val:2019&#125;'</span>;</span><br><span class="line"><span class="keyword">let</span> reg1=<span class="regexp">/\&#123;val:(\d+)\&#125;/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1 reg 和 str 匹配多少次，函数就被处罚执行多少次，而且传递了一些参数信息值；</span></span><br><span class="line"><span class="comment"> * 2 每一次arg中国存储的信息，和执行exec捕获到的信息相似</span></span><br><span class="line"><span class="comment"> * 3 每一次函数中返回的是啥，就把当前大正则匹配的内容替换成啥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str = str1.replace(reg1, (...arg)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'AA'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h3 id="时间字符串格式化"><a href="#时间字符串格式化" class="headerlink" title="时间字符串格式化"></a>时间字符串格式化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间字符串格式化</span></span><br><span class="line"><span class="built_in">String</span>.prototype.myFormatTime = <span class="function"><span class="keyword">function</span> (<span class="params">template = <span class="string">'&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日 &#123;3&#125;时&#123;4&#125;分&#123;5&#125;秒'</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//this:str</span></span><br><span class="line">    <span class="keyword">let</span> ary = <span class="keyword">this</span>.match(<span class="regexp">/\d+/g</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> item &lt; <span class="number">10</span> ? <span class="string">'0'</span> + item : item);</span><br><span class="line">    <span class="keyword">return</span> template.replace(<span class="regexp">/\&#123;(\d)\&#125;/g</span>, (...[, index]) =&gt; ary[index] || <span class="string">'00'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'2018/4/30'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.myFormatTime(<span class="string">'&#123;0&#125;:&#123;1&#125;:&#123;2&#125; &#123;3&#125;:&#123;4&#125;:&#123;5&#125;'</span>));</span><br></pre></td></tr></table></figure><p>正则闯关游戏:<br><a href="https://alf.nu/RegexGolf" target="_blank" rel="noopener">https://alf.nu/RegexGolf</a></p><p>([a-z]{3}).*\1<br>\1表示重复前面的括号内的规则([a-z]{3})</p><p>^(?!.<em>([a-z])([a-z])\2\1);<br>不包含baidu开头 /^.</em>(?!baidu).*$/</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;恰如其分得使用正则，能够减少代码的冗余量；&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="正则" scheme="https://abluecup.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>less</title>
    <link href="https://abluecup.github.io/2019/04/29/less/"/>
    <id>https://abluecup.github.io/2019/04/29/less/</id>
    <published>2019-04-29T07:18:27.000Z</published>
    <updated>2019-06-27T09:34:40.961Z</updated>
    
    <content type="html"><![CDATA[<p>less是css预编译语言，能够提高css的书写，本片是对less的基本介绍<br><a id="more"></a></p><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><blockquote><p>它是css预编译语言，和它类似的还有sass/stylus…<br>css是标记语言，不是编程语言，没有类、实例、函数、变量等东西。而less等预编译语言就是让css具备面向对象编程的思想，但是浏览器不能直接识别和渲染less代码，需要我们把less代码预先编译为正常的css后，再交给浏览器渲染解析</p></blockquote><h3 id="less的编译"><a href="#less的编译" class="headerlink" title="less的编译"></a>less的编译</h3><ul><li><p>在开发环境下编译（产品还没有开发完，正在开发中，这个是开发环境）</p><blockquote><p>导入less.js即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rel="stylesheet/less"</span></span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet/less"</span> href=<span class="string">"css/index.less"</span>/&gt;</span><br><span class="line"><span class="comment">// 导入js文件</span></span><br><span class="line">    &lt;script src=<span class="string">"js/less-2.5.3.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>在生产环境下（产品开发完需要部署到服务器上）</p><blockquote><p>项目上线，不能把less部署上线，这样用户每一次打开页面都需要重新编译，非常好性能，我们不到服务器上的都是编译后的css</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 在当前电脑的全局环境下安装less模块</span><br><span class="line">    $ npm install less -g</span><br><span class="line">    验证是否安装成功</span><br><span class="line">2. 基于命令把less编译成css</span><br><span class="line">    $ lessc a.less b.min.css -x </span><br><span class="line">    -x 是压缩</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>编译完成后，部署到生产环境中的是编译后的b.min.css</p><ul><li>目前基于webpack和框架实现工程化开发的时候，我们都是在webpack配置文件中，配置出less的编译（需要安装less/less-loader等模块），这样不管是开发环境下的预览，还是部署到生产环境下，都是基于webpack中的Less模块编译的</li></ul><h3 id="less的基础语法"><a href="#less的基础语法" class="headerlink" title="less的基础语法"></a>less的基础语法</h3><h4 id="less中的变量"><a href="#less中的变量" class="headerlink" title="less中的变量"></a>less中的变量</h4><blockquote><p>用一个变量存储一个公共值，后期需要使用这个值，直接调取这个变量即可，以后如果值需要修改iazhixuyao更改变量的值，那么所有用到这个变量的地方都跟着修改</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">.centerPos(@w: 100, @h: 100) &#123;</span><br><span class="line">    <span class="selector-tag">position</span>   : <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">top</span>        : 50%;</span><br><span class="line">    <span class="selector-tag">left</span>       : 50%;</span><br><span class="line">    <span class="selector-tag">margin-top</span> : <span class="selector-tag">unit</span>(<span class="selector-tag">-</span>(@<span class="keyword">w</span>/<span class="keyword">2</span>), px);</span><br><span class="line">    <span class="selector-tag">margin-left</span>: <span class="selector-tag">unit</span>(<span class="selector-tag">-</span>(@<span class="keyword">h</span>/<span class="keyword">2</span>), px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 变量 */</span></span><br><span class="line">@link-color: #555;</span><br><span class="line">@<span class="keyword">bg</span>-<span class="keyword">src</span>    : <span class="string">'../img'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width </span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    .centerPos(400, 400);</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-tag">lightblue</span>;</span><br><span class="line">    background:url("@&#123;bg-src&#125;/1.jpg") no-repeat;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: @link-color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 函数 */</span></span><br><span class="line">.transition(@property:all,@duration:.5s,@timing-function:linear,@delay:0)&#123;</span><br><span class="line">    <span class="selector-tag">-webkit-transition</span>: @<span class="keyword">arguments</span>;</span><br><span class="line">    <span class="selector-tag">-moz-transition</span>: @<span class="keyword">arguments</span>;</span><br><span class="line">    <span class="selector-tag">-ms-transition</span>:@<span class="keyword">arguments</span>;</span><br><span class="line">    <span class="selector-tag">-o-transition</span>: @<span class="keyword">arguments</span>;</span><br><span class="line">    <span class="selector-tag">transition</span>: @<span class="keyword">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 嵌套 */</span></span><br><span class="line">@H:200;</span><br><span class="line"><span class="selector-class">.pub</span>&#123;</span><br><span class="line">    @H:100;</span><br><span class="line">    <span class="selector-class">.bg</span>&#123; <span class="comment">/* .pub .bg */</span></span><br><span class="line"></span><br><span class="line">        a&#123;</span><br><span class="line">            <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span><br><span class="line">            <span class="selector-tag">width</span><span class="selector-pseudo">:unit(</span>@<span class="keyword">H</span>,<span class="keyword">px</span>); <span class="comment">/* @H是300，按照嵌套层，逐层往外查询 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        @H:300;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp; &gt; <span class="selector-class">.bg</span>&#123;</span><br><span class="line">        <span class="comment">/* .pub &gt; .bg */</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-class">.bg</span>&#123;</span><br><span class="line">        <span class="comment">/* .pub .bg */</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般我们会把函数和变量存放到一个单独的less文件中，然后在文件中导入，使用 <code>@import (reference) &#39;common&#39;;</code> reference是指不会编译common中的内容</p><h3 id="商城排序中的less"><a href="#商城排序中的less" class="headerlink" title="商城排序中的less"></a>商城排序中的less</h3><p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>商城排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;link rel="stylesheet/less" href="css/index.less"&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src="js/less-2.5.3.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"headerBox"</span> <span class="attr">id</span>=<span class="string">"headerBox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>排序<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>上架时间<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>热度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"productBox clearfix"</span> <span class="attr">id</span>=<span class="string">"productBox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../SHOP/img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"来的感觉的管理法规和；国家宏观"</span>&gt;</span>来的感觉的管理法规和；国家宏观<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>￥4888<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>时间：2014-01-01<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>热度：999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        真实项目中，我们经常使用a标签做一些点击的按钮</span></span><br><span class="line"><span class="comment">            1.因为a标签的:hover伪类兼容所有浏览器</span></span><br><span class="line"><span class="comment">            a标签的href属性存储的是点击需要跳转的页面，或者是#xxx,这个是hash定位，如果指向让其作为一个普通的按钮，我们需要组织a变迁的默认跳转行为 &lt;a href="javascript:;"&gt;排序&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../SHOP/json/product.json"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>common.less<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@con-bg:</span> <span class="number">#fff</span>;</span><br><span class="line"><span class="variable">@text-black :</span> <span class="number">#555</span>;</span><br><span class="line"><span class="variable">@text-gray  :</span> <span class="number">#999</span>;</span><br><span class="line"><span class="variable">@text-active:</span> <span class="number">#e01d20</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.transition</span>(<span class="variable">@property</span>: all, <span class="variable">@duration</span>: <span class="number">1s</span>, <span class="variable">@timing-function</span>: linear, <span class="variable">@delay</span>: <span class="number">0s</span>) &#123;</span><br><span class="line">  <span class="attribute">-webkit-transition</span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">-moz-transition   </span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">-ms-transition    </span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">-o-transition     </span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">transition        </span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>index.less<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">reset是清空默认样式，不仅需要导入进来使用，最后需要和我们写的css一起编译，放到浏览器中渲染解析才可以</span></span><br><span class="line"><span class="comment">common中存放的一般都是公用的变量或者方法，只需要调取使用即可，编译的时候不需要编译这些内容，所以用reference修饰一下</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">导入的其他文件最好都是less文件，这样在编译的时候，把所有的less编译到一个文件中，实现css的合并和压缩</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">'reset'</span>;</span><br><span class="line"><span class="keyword">@import</span> (reference) <span class="string">"common"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width </span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.headerBox</span> &#123;</span><br><span class="line">    <span class="variable">@H         :</span> <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height     </span>: <span class="variable">@H</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background </span>: <span class="variable">@con-bg</span>;</span><br><span class="line">    <span class="attribute">font-size  </span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">        <span class="attribute">display    </span>: inline-block; <span class="comment">// 使用inline-block会把标签之间的空格和换行当作元素占位，导致元素之间有间隙。解决：让父元素的font-size:0;</span></span><br><span class="line">        <span class="attribute">width      </span>: <span class="number">90px</span>;</span><br><span class="line">        <span class="attribute">text-align </span>: center;</span><br><span class="line">        <span class="attribute">height     </span>: <span class="variable">@H</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="variable">@H</span>;</span><br><span class="line">        <span class="attribute">font-size  </span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">color      </span>: <span class="variable">@text-black</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">display    </span>: inline-block;</span><br><span class="line">        <span class="attribute">padding    </span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">height     </span>: <span class="variable">@H</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="variable">@H</span>;</span><br><span class="line">        <span class="attribute">font-size  </span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">color      </span>: <span class="variable">@text-gray</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">@text-active</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.productBox</span> &#123;</span><br><span class="line">    <span class="attribute">margin  </span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">float       </span>: left; <span class="comment">// 子元素浮动，子元素的高度不能撑开父元素（脱离文档流）。解决：清除子元素浮动对父元素的影响 =》 clear:both; 在父元素上添加</span></span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">background</span>:<span class="variable">@con-bg</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:nth-child(5n+5)</span> &#123;<span class="comment">//五个为一组，一组中的第五个</span></span><br><span class="line">            <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span>&#123;</span><br><span class="line">            <span class="attribute">display</span>:block;</span><br><span class="line">            <span class="attribute">box-sizing</span>: border-box; <span class="comment">//css3新合资模型：我们设置的width是盒子最后的宽度，包括边框、padding、内容宽度</span></span><br><span class="line">            <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">232px</span>;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">3px</span> solid transparent;</span><br><span class="line">            <span class="selector-tag">img</span>&#123;</span><br><span class="line">                <span class="attribute">display</span>:block;</span><br><span class="line">                <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">194px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">p</span>&#123;</span><br><span class="line">                <span class="attribute">color</span>:<span class="variable">@text-gray</span>;</span><br><span class="line">                <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">                <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">                <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">span</span>&#123;</span><br><span class="line">                <span class="attribute">display</span>: block;</span><br><span class="line">                <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">                <span class="attribute">font-size</span>:<span class="number">12px</span>;</span><br><span class="line">                <span class="attribute">color</span>:<span class="variable">@text-black</span>;</span><br><span class="line"></span><br><span class="line">                <span class="selector-tag">&amp;</span><span class="selector-pseudo">:nth-child(1)</span>&#123; <span class="comment">/*不是所有span中的第一个，是a子元素中的第一个，并且是span标签*/</span></span><br><span class="line">                    <span class="attribute">color</span>:<span class="variable">@text-active</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="selector-tag">&amp;</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;</span><br><span class="line">                    <span class="attribute">color</span>: <span class="variable">@text-active</span>;</span><br><span class="line">                    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.transition</span>(<span class="variable">@duration</span>: <span class="number">0.5s</span>;);</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">                <span class="attribute">border-color</span>:<span class="variable">@text-active</span>;</span><br><span class="line">                <span class="attribute">box-shadow</span>:<span class="number">3px</span> <span class="number">3px</span> <span class="number">10px</span> pink;</span><br><span class="line">                <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;less是css预编译语言，能够提高css的书写，本片是对less的基本介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://abluecup.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>商城排序</title>
    <link href="https://abluecup.github.io/2019/04/28/%E5%95%86%E5%9F%8E%E6%8E%92%E5%BA%8F/"/>
    <id>https://abluecup.github.io/2019/04/28/商城排序/</id>
    <published>2019-04-28T02:36:44.000Z</published>
    <updated>2019-07-04T09:28:37.218Z</updated>
    
    <content type="html"><![CDATA[<p>商城排序是项目中常见的问题，我们在本篇中使用原生JS实现此功能<br><a id="more"></a></p><h2 id="知识预备"><a href="#知识预备" class="headerlink" title="知识预备"></a>知识预备</h2><h3 id="JSON数据格式"><a href="#JSON数据格式" class="headerlink" title="JSON数据格式"></a>JSON数据格式</h3><h4 id="释义：JSON格式：JSON不是一种数据类型，而是一种数据格式，只要把对象的属性用双引号括起来，此时的对象就不再称之为普通对象，而是叫做JSON格式对象"><a href="#释义：JSON格式：JSON不是一种数据类型，而是一种数据格式，只要把对象的属性用双引号括起来，此时的对象就不再称之为普通对象，而是叫做JSON格式对象" class="headerlink" title="释义：JSON格式：JSON不是一种数据类型，而是一种数据格式，只要把对象的属性用双引号括起来，此时的对象就不再称之为普通对象，而是叫做JSON格式对象"></a>释义：JSON格式：JSON不是一种数据类型，而是一种数据格式，只要把对象的属性用双引号括起来，此时的对象就不再称之为普通对象，而是叫做JSON格式对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;<span class="string">"name"</span>:<span class="string">"xxx"</span>&#125;; <span class="comment">//obj是json格式对象（操作起来和普通对象没有太大区别）</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'&#123;"name":"xxx"&#125;'</span>;<span class="comment">//str是JSON格式字符串</span></span><br></pre></td></tr></table></figure><h4 id="JSON数据和对象之间的转换"><a href="#JSON数据和对象之间的转换" class="headerlink" title="JSON数据和对象之间的转换"></a>JSON数据和对象之间的转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.parse 把JSON格式的字符串转换为对象</span></span><br><span class="line">    <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"name":"xxx"&#125;'</span>)  <span class="comment">// &#123;name:"xxx"&#125;</span></span><br><span class="line"><span class="comment">// 2.stringify  把对象转换为JSON格式的字符串</span></span><br><span class="line">    <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>:<span class="string">"xxx"</span>&#125;); <span class="comment">//'&#123;"name":"xxx"&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="sort原理"><a href="#sort原理" class="headerlink" title="sort原理"></a>sort原理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ary.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// a是当前项， b是下一项</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Number</span>(); </span><br><span class="line">    <span class="comment">//返回Number类型值，大于0调整a,b顺序，小于0不调整；</span></span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//打乱数组</span></span><br><span class="line">ary.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">Math</span>.random() * <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 创建一个AJAX实例</span></span><br><span class="line"><span class="comment"> * 2. 打开一个请求地址</span></span><br><span class="line"><span class="comment"> * 3. 监听</span></span><br><span class="line"><span class="comment"> * 4. send(null)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest; <span class="comment">//=&gt;创建一个AJAX实例</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'json/product.json'</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//=&gt; 打开一个请求的地址，一般这个地址都是服务器端提供的，最后一个参数是设置同步还是异步，true是异步，false是同步</span></span><br><span class="line"><span class="comment">// 真实项目中往往是异步，我们为了简单使用同步</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据绑定：依托获取的数据，把页面中需要展示的数据和结构都搞出来，然后把创建好的数据和结构放到页面指定容器中</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1 字符串拼接：</span></span><br><span class="line"><span class="comment"> *      -&gt; 传统字符串拼接</span></span><br><span class="line"><span class="comment"> *      -&gt; ES6模板字符串拼接</span></span><br><span class="line"><span class="comment"> *      -&gt; 模板引擎：原理也是字符串拼接</span></span><br><span class="line"><span class="comment"> * 2 动态创建DOM</span></span><br><span class="line"><span class="comment"> *      -&gt; createElement</span></span><br><span class="line"><span class="comment"> *      -&gt; appendChild</span></span><br><span class="line"><span class="comment"> *     弊端：操作起来太麻烦，而且性能消耗更大（DOM回流）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">``</span>;<span class="comment">//这是两个撇（TAB上边按键），ES6模板字符串</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; productData.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; title, img=<span class="string">'img/1.jpg'</span>, price &#125; = productData[i];</span><br><span class="line">    str += <span class="string">`&lt;li&gt;&lt;a href="javascript:;"&gt;</span></span><br><span class="line"><span class="string">    &lt;img src="<span class="subst">$&#123;img&#125;</span>" alt=""&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;<span class="subst">$&#123;title&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;price&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/a&gt;&lt;/li&gt;`</span>;</span><br><span class="line">&#125;;</span><br><span class="line">list.innerHTML=str;</span><br></pre></td></tr></table></figure><h3 id="自定义属性编程思想"><a href="#自定义属性编程思想" class="headerlink" title="自定义属性编程思想"></a>自定义属性编程思想</h3><p> 自定义属性编程思想：<br> 凡是在后面的操作当中需要用到一些值，我们需要将属性定义到当前元素的属性上data-,后期需要用到这个值的时候，我们基于自定义属性获取到即可,后期我们获取这个值的时候，只能基于get attribut这种模式获取;<br> 凡是在后面的某项操作当中，我们需要用到当前元素的某个值，但是这个值我们可以在前面的某个元素中得到，这时我们就想办法在前面的元素中设置自定义属性，存储这些值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="DOM映射机制"><a href="#DOM映射机制" class="headerlink" title="DOM映射机制"></a>DOM映射机制</h3><pre><code>页面中的HTML元素，和JS中通过相关方法获取到的元素集合或者元素对象存在映射关系（一个改变，另一个也改变）    xxx.style.color=&apos;red&apos;: 把xxx元素对象对应堆内存中的style属性下的color属性值修改为red(本质操作的是JS堆内存)   但是由于DOM映射关系，页面中的标签和xxx元素对象是绑在一起的，我们修改元素对象空间中的值，页面中的元素会按照最新的值渲染。    在元素绑定前，我们获取容器中的元素，得到一个空的元素集合，元素数据绑定后，我们不需要重新获取，DOM的映射机制</code></pre><p>  会帮我们把新增加的元素映射到之前获取到的元素集合中，让其变为有元素的集合；<br>     querySelectALL获取的集合是静态集合，不存在上述所谓的映射机制，基于这种办法，数据绑定完成后需要重新获取一次才可以</p><p><strong>箭头函数虽然很强大，但是不能乱用，尤其是在需要改变函数中this的情况下，箭头函数中的this不受我们管控，都是默认继承上下文中的，使用call也没有用</strong><br><strong>拿出一张白纸，写思路，再按照思路写代码</strong></p><h2 id="完整的商城排序代码"><a href="#完整的商城排序代码" class="headerlink" title="完整的商城排序代码"></a>完整的商城排序代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> linkBox = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>),</span><br><span class="line">    headerBox = <span class="built_in">document</span>.getElementById(<span class="string">'header'</span>),</span><br><span class="line">    linkList = headerBox.getElementsByTagName(<span class="string">'a'</span>),</span><br><span class="line">    productList = linkBox.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> productData = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">    xhr.open(<span class="string">'get'</span>, <span class="string">'json/product.json'</span>, <span class="literal">false</span>);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">0</span> ? productData = xhr.responseText : <span class="literal">null</span>;</span><br><span class="line">        productData ? productData = <span class="built_in">JSON</span>.parse(productData) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; productData.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; time, price, hot, img, title &#125; = productData[i];</span><br><span class="line">        str += <span class="string">`&lt;li data-time='<span class="subst">$&#123;time&#125;</span>' data-price='<span class="subst">$&#123;price&#125;</span>' data-hot='<span class="subst">$&#123;hot&#125;</span>'&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="javascript:;"&gt;</span></span><br><span class="line"><span class="string">                &lt;img src="<span class="subst">$&#123;img&#125;</span>" alt=""&gt;</span></span><br><span class="line"><span class="string">                &lt;p title="<span class="subst">$&#123;title&#125;</span>"&gt;<span class="subst">$&#123;title&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;￥<span class="subst">$&#123;price&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;时间：<span class="subst">$&#123;time&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;热度：<span class="subst">$&#123;hot&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">    linkBox.innerHTML = str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; linkList.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = linkList[i];</span><br><span class="line">        item.index=i;</span><br><span class="line">        item.flag=<span class="number">-1</span>;</span><br><span class="line">        item.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; linkList.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span> !== linkList[j])&#123;</span><br><span class="line">                    linkList[j].flag=<span class="number">-1</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                </span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">this</span>.flag *=<span class="number">-1</span>;</span><br><span class="line">            sortList.call(<span class="keyword">this</span>);</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sortList=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> productAry=[].slice.call(productList,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">let</span> ary=[<span class="string">'data-time'</span>,<span class="string">'data-price'</span>,<span class="string">'data-hot'</span>];</span><br><span class="line">        <span class="keyword">let</span> &#123;<span class="attr">index</span>:_index,<span class="attr">flag</span>:_flag&#125;=<span class="keyword">this</span>;</span><br><span class="line">        productAry.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> aInn=a.getAttribute(ary[_index]),</span><br><span class="line">            bInn=b.getAttribute(ary[_index]);</span><br><span class="line">            _index===<span class="number">0</span>?(aInn=aInn.replace(<span class="regexp">/-/g</span>,<span class="string">''</span>),bInn=bInn.replace(<span class="regexp">/-/g</span>,<span class="string">''</span>)):<span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> (aInn-bInn)*_flag;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; productAry.length; i++) &#123;</span><br><span class="line">            linkBox.appendChild(productAry[i]);        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//基于高级单例模式完成业务逻辑开发</span></span><br><span class="line"><span class="keyword">let</span> productRender = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//=》自执行函数形成的私有作用域不销毁（闭包）</span></span><br><span class="line">    <span class="comment">//里面的方法和变量和外界不冲突，里面创建的值不销毁</span></span><br><span class="line">    <span class="comment">//基于ajax获取数据</span></span><br><span class="line">    <span class="keyword">let</span> productData = <span class="literal">null</span>; <span class="comment">// 如果一个变量在多个方法里都要用到，我们需要定义一个公共变量</span></span><br><span class="line">    <span class="keyword">let</span> productBox = <span class="built_in">document</span>.getElementById(<span class="string">'productBox'</span>);</span><br><span class="line">    <span class="keyword">let</span> headerBox = <span class="built_in">document</span>.getElementById(<span class="string">'headerBox'</span>);</span><br><span class="line">    <span class="keyword">let</span> linkList = headerBox.getElementsByTagName(<span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">let</span> productList = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> getData = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">        xhr.open(<span class="string">'get'</span>, <span class="string">'../SHOP/json/product.json'</span>, <span class="literal">false</span>);</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">0</span> ? (productData = xhr.responseText) : <span class="literal">null</span>;</span><br><span class="line">            productData ? productData = <span class="built_in">JSON</span>.parse(productData) : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send(<span class="literal">null</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据绑定:基于ES6模板字符串</span></span><br><span class="line">    <span class="keyword">let</span> bindHTML = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">``</span>;</span><br><span class="line">        productData.forEach(<span class="function">(<span class="params">&#123; time, price, hot, title, img &#125;, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//$&#123;&#125;里面放的是JS代码，包含需要动态绑定的数据的JS变量的值</span></span><br><span class="line">            str += <span class="string">`&lt;li data-time='<span class="subst">$&#123;time&#125;</span>' data-price='<span class="subst">$&#123;price&#125;</span>' data-hot='<span class="subst">$&#123;hot&#125;</span>'&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="javascript:;"&gt;</span></span><br><span class="line"><span class="string">                &lt;img src="../SHOP/<span class="subst">$&#123;img&#125;</span>" alt=""&gt;</span></span><br><span class="line"><span class="string">                &lt;p title="<span class="subst">$&#123;title&#125;</span>"&gt;<span class="subst">$&#123;title&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;￥<span class="subst">$&#123;price&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;时间：<span class="subst">$&#123;time&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;热度：<span class="subst">$&#123;hot&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;`</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        productBox.innerHTML = str;</span><br><span class="line">        productList=productBox.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定点击事件</span></span><br><span class="line">    <span class="keyword">let</span> bindClick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//给三个排序标签绑定点击事件</span></span><br><span class="line">        [].forEach.call(linkList,(curLink,index)=&gt;&#123;</span><br><span class="line">            <span class="comment">//循环三次，执行三次click方法，每次执行都会形成一个闭包，每一个闭包中都保存了当前这个A对应的索引index</span></span><br><span class="line">            curLink.flag=<span class="number">-1</span>;</span><br><span class="line">            curLink.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.flag *= <span class="number">-1</span>;</span><br><span class="line">                <span class="comment">// 给product-List进行排序（依据点击列的不同）</span></span><br><span class="line">                <span class="comment">// 点击的时候需要获取每一个li的时间/价格/热度，此时我们可以在绑定的时候，把这些信息存储到自定义属性上，点击的时候根据自定义属性排序</span></span><br><span class="line">                <span class="keyword">let</span> ary=[<span class="string">'data-time'</span>,<span class="string">'data-price'</span>,<span class="string">'data-hot'</span>]; <span class="comment">// 根据点击的li的索引获取按照谁来排序                </span></span><br><span class="line">                productAry=[].slice.call(productList);</span><br><span class="line">                productAry.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">let</span> aInn=a.getAttribute(ary[index]), bInn=b.getAttribute(ary[index]);</span><br><span class="line">                    index===<span class="number">0</span>?(aInn=aInn.replace(<span class="regexp">/-/g</span>,<span class="string">''</span>),bInn=bInn.replace(<span class="regexp">/-/g</span>,<span class="string">''</span>)):<span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">return</span> (aInn-bInn) *<span class="keyword">this</span>.flag ;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">//按照最新顺序依次添加到容器当中</span></span><br><span class="line">                productAry.forEach(<span class="function"><span class="params">curLi</span>=&gt;</span>&#123;</span><br><span class="line">                    productBox.appendChild(curLi);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//当前模块的入口，想要实现完整的业务逻辑，我们执行init即可，</span></span><br><span class="line">            <span class="comment">//在Init中，我们根据具体的业务需求，规划哪些方法先执行，哪些方法后执行，</span></span><br><span class="line">            <span class="comment">//init相当于当前模块的指挥官           </span></span><br><span class="line">            getData();</span><br><span class="line">            bindHTML();</span><br><span class="line">            bindClick();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">productRender.init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* forEach:数组中的方法，用来遍历数组中的每一项内容 */</span></span><br><span class="line"><span class="keyword">let</span> ary = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>];</span><br><span class="line">ary.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//item：当前遍历的值； index:当前遍历的索引</span></span><br><span class="line">    <span class="comment">//数组中有多少项，我们这个函数就被执行多少次，保证数组中的每一项都可以得到遍历</span></span><br><span class="line">    <span class="built_in">console</span>.log(item, index);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1 字符串拼接</span></span><br><span class="line"><span class="comment"> *      -&gt;普通字符串拼接</span></span><br><span class="line"><span class="comment"> *      -&gt;ES6模板字符串</span></span><br><span class="line"><span class="comment"> *      -&gt;模板引擎</span></span><br><span class="line"><span class="comment"> *  2 DOM操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"HUAWEI Mate 10 4GB+64GB 全网通版（亮黑色）"</span>,</span><br><span class="line">        <span class="string">"price"</span>: <span class="number">3899</span>,</span><br><span class="line">        <span class="string">"time"</span>: <span class="string">"2017-03-15"</span>,</span><br><span class="line">        <span class="string">"hot"</span>: <span class="number">198</span>,</span><br><span class="line">        <span class="string">"img"</span>: <span class="string">"img/1.jpg"</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*   data.forEach((item,index) =&gt;&#123;</span></span><br><span class="line"><span class="comment">      //动态创建DOM（外层容器基于create-element完成，容器中的具体内容可以基于创建DOM完成，也可以基于字符串拼接完成）</span></span><br><span class="line"><span class="comment">      let curLi=document.createElement('li');</span></span><br><span class="line"><span class="comment">      curLi.innerHTML=`&lt;li&gt;</span></span><br><span class="line"><span class="comment">      &lt;a href="javascript:;"&gt;</span></span><br><span class="line"><span class="comment">          &lt;img src="../SHOP/img/1.jpg" alt=""&gt;</span></span><br><span class="line"><span class="comment">          &lt;p title="来的感觉的管理法规和；国家宏观"&gt;来的感觉的管理法规和；国家宏观&lt;/p&gt;</span></span><br><span class="line"><span class="comment">          &lt;span&gt;￥4888&lt;/span&gt;</span></span><br><span class="line"><span class="comment">          &lt;span&gt;时间：2014-01-01&lt;/span&gt;</span></span><br><span class="line"><span class="comment">          &lt;span&gt;热度：999&lt;/span&gt;</span></span><br><span class="line"><span class="comment">      &lt;/a&gt;</span></span><br><span class="line"><span class="comment">  &lt;/li&gt;`;</span></span><br><span class="line"><span class="comment">      document.querySelector('.productBox').appendChild(curLi); </span></span><br><span class="line"><span class="comment">      // 之所以不建议使用这种方式，因为循环十次，每一次都改变了DOM结构，引发浏览器的十次回流  避免循环创建DOM</span></span><br><span class="line"><span class="comment">  &#125;); */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基于文档碎片（虚拟内存中开辟的一个容器）可以解决这个问题：每创建一个li，我们首先把它存放到文档碎片中（千万不要放到页面中，</span></span><br><span class="line"><span class="comment">// 避免回流），当我们把需要的元素都创建完成，并且都添加到文档碎片中，在统一把文档随便存放到页面中（只引发一次回流操作）</span></span><br><span class="line"><span class="keyword">let</span> frg=<span class="built_in">document</span>.createDocumentFragment();<span class="comment">//创建文档碎片容器</span></span><br><span class="line">data.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> curLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">    curLi.innerHTML = <span class="string">`&lt;li&gt;</span></span><br><span class="line"><span class="string">    &lt;a href="javascript:;"&gt;</span></span><br><span class="line"><span class="string">        &lt;img src="../SHOP/img/1.jpg" alt=""&gt;</span></span><br><span class="line"><span class="string">        &lt;p title="来的感觉的管理法规和；国家宏观"&gt;来的感觉的管理法规和；国家宏观&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;￥4888&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;时间：2014-01-01&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;热度：999&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;`</span>;</span><br><span class="line">    frg.appendChild(curLi);<span class="comment">// 每一次把创建的li存放到文档碎片中</span></span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.productBox'</span>).appendChild(frg);</span><br><span class="line">frg=<span class="literal">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> frg=<span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"></span><br><span class="line">                productAry.forEach(<span class="function"><span class="params">curLi</span>=&gt;</span>&#123;</span><br><span class="line">                    frg.appendChild(curLi);</span><br><span class="line">                &#125;)</span><br><span class="line">                productBox.appendChild(frg);</span><br><span class="line">                frg=<span class="literal">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DOM的回流(reflow)和重绘(repaint)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    1. 计算DOM结构（DOM树）；</span></span><br><span class="line"><span class="comment"> *    2. 加载CSS</span></span><br><span class="line"><span class="comment"> *    3. 生成渲染树(RENDER TREE):渲染树是和样式相关的</span></span><br><span class="line"><span class="comment"> *    4. 浏览器基于GPU开始按照RENDER TREE画页面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  重绘：当某一个DOM元素样式更改(位置没变，只是样式更改，例如：颜色变为红色……)浏览器会重新渲染这个元素</span></span><br><span class="line"><span class="comment"> *        box.style.color='red';</span></span><br><span class="line"><span class="comment"> *        box.style.fontSize='16px'</span></span><br><span class="line"><span class="comment"> *        上面的操作触发了两次重绘，性能上有所消耗，真实项目中为了优化这个性能，我们最好一次性把需要的样式搞定，例如</span></span><br><span class="line"><span class="comment"> *            .xxx&#123;</span></span><br><span class="line"><span class="comment"> *                    color:'red';</span></span><br><span class="line"><span class="comment"> *                    font-size:16px;</span></span><br><span class="line"><span class="comment"> *                &#125;</span></span><br><span class="line"><span class="comment"> *            box.className='xxx';</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  回流：当DOM元素的结构或者位置发生改变（删除或增加元素，改变位置，改变大小……）都会引发回流</span></span><br><span class="line"><span class="comment"> *        所谓回流，就是浏览器抛弃原有计算的结构和样式，重新计算DOM TREE和RENDER TREE，非常非常。。。消耗性能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 字符串拼接只引发一次回流， +str 把原有容器中的结构都已字符串的方式获取到，然后和新的str字符串拼接，最后统一再插入到原有的</span></span><br><span class="line"><span class="comment"> * 容器中 =str用新的字符串替换原有的结构</span></span><br><span class="line"><span class="comment"> *  这种方式并不如文档碎片，因为浏览器需要把字符串再转化成文档结构，但是因为字符串拼接简单，在实际项目中常用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分离读写 ： 把所有读的操作放在一起，把所有写的操作放在一起</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">box.style.top=<span class="string">'100px'</span>; <span class="comment">//引发回流</span></span><br><span class="line"><span class="built_in">console</span>.log(box.style.top); <span class="comment">//100px</span></span><br><span class="line">box.style.left=<span class="string">'100px'</span>; <span class="comment">// 再次引发回流</span></span><br><span class="line"><span class="comment">//总共引发两次回流</span></span><br><span class="line"></span><br><span class="line">box.style.top=<span class="string">'100px'</span>;</span><br><span class="line">box.style.left=<span class="string">'100px'</span>; <span class="comment">// </span></span><br><span class="line"><span class="built_in">console</span>.log(box.style.top); <span class="comment">//100px</span></span><br><span class="line"><span class="comment">//只引发一次回流，浏览器会把任务放在待办任务中，继续往下看，遇到写的操作时重绘</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;商城排序是项目中常见的问题，我们在本篇中使用原生JS实现此功能&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Javascript基础知识三</title>
    <link href="https://abluecup.github.io/2019/04/18/Javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%89/"/>
    <id>https://abluecup.github.io/2019/04/18/Javascript基础知识三/</id>
    <published>2019-04-18T08:15:30.000Z</published>
    <updated>2019-06-27T09:36:58.665Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍了js底层机制和一些经典的面试题<br><a id="more"></a></p><h2 id="js底层机制"><a href="#js底层机制" class="headerlink" title="js底层机制"></a>js底层机制</h2><h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数有三种角色：</span></span><br><span class="line"><span class="comment"> *   1 普通函数</span></span><br><span class="line"><span class="comment">        堆栈内存释放</span></span><br><span class="line"><span class="comment">        作用域链</span></span><br><span class="line"><span class="comment"> *   2 类</span></span><br><span class="line"><span class="comment">        prototype ： 原型</span></span><br><span class="line"><span class="comment">        _proto_ : 原型链</span></span><br><span class="line"><span class="comment">        实例</span></span><br><span class="line"><span class="comment"> *   3 普通对象</span></span><br><span class="line"><span class="comment">        和普通的obj没啥区别，就是对键值对的增删改查</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment"> *      三种角色之前没有必然的关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">this</span>.m = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.aa = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'aa'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Fn.bb = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bb'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 普通函数执行</span></span><br><span class="line">Fn(); <span class="comment">// this:window,有一个私有变量n,和原型以及属性bb没有关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  构造函数执行</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(f.n); <span class="comment">// undefined;</span></span><br><span class="line"><span class="built_in">console</span>.log(f.m); <span class="comment">// 100</span></span><br><span class="line">f.aa(); <span class="comment">// 'aa' 实例通过_proto_找到Fn.prototype上的方法aa</span></span><br><span class="line"><span class="built_in">console</span>.log(f.bb); <span class="comment">// undefined, bb是把Fn当作一个普通对象设置的属性，和实例没有关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Fn作为一个对象，只跟bb有关系</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JQ这个类库提供了很多的方法，其中有一部分是卸载原型上的，有一部分是把它当作普通对象处理的</span></span><br><span class="line">~ <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="keyword">return</span> [JQ实例]</span><br><span class="line">    &#125;</span><br><span class="line">    jQuery.prototype.animate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;；</span><br><span class="line">    jQuery.ajax = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="built_in">window</span>..jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">$().ajax(); <span class="comment">// 无法调取，ajax是jq的私有属性 $.ajax(); 直接的对象键值对操作</span></span><br><span class="line">$().animate(); <span class="comment">// 可以调取，原型上的方法 $.animate():无法执行，对象上没有animate这个属性</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getName(); <span class="comment">// 2 把Foo当作一个对象，找Foo对象下的getName属性</span></span><br><span class="line">getName(); <span class="comment">// 4 全局下的getName函数</span></span><br><span class="line">Foo().getName(); <span class="comment">// 1 //window.getName(); 先把Foo当作普通函数执行，把执行返回的结果再调取getName方法</span></span><br><span class="line">getName(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">new</span> Foo.getName(); <span class="comment">// 2 A: Foo.getName , new A</span></span><br><span class="line"><span class="keyword">new</span> Foo().getName(); <span class="comment">// 3  B: new Foo(), B.getName();</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName(); <span class="comment">// 3 C: new Foo(), D:C.getName(), new D</span></span><br><span class="line"><span class="comment">// 优先级 . = new Fn() &gt; new Fn; 同级别从左到右</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  Foo -&gt; aaff00 函数代码, getName = aaff11 （4）</span></span><br></pre></td></tr></table></figure><p>只要是函数，不管是啥类，永远都是内置类Function的实例<br>函数的<em>proto</em>  指向  Function.prototype</p><p>Object.<em>proto</em>  指向  Function.prototype<br>Function.prototype.<em>proto</em>   指向  Object.prototype</p><p>Function.prototype === Function.<em>proto</em> // true  Function也是函数，它的<em>proto</em>指向所属类Function的原型Function.prototype<br>Object.prototype.hasOwnProperty == Object.<em>proto</em>.<em>proto</em>.hasOwnProperty<br><img src="/2019/04/18/Javascript基础知识三/1.bmp" alt="js底层机制"></p><h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call, apply, bind"></a>call, apply, bind</h3><p>用来改变某一个函数中this关键字指向</p><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.name = <span class="string">"kyle"</span>;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'OBJ'</span>,</span><br><span class="line">    fn: fn</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> oo = &#123;</span><br><span class="line">    name: <span class="string">'oo'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1. [fn].call([this],[param]...)</span></span><br><span class="line"><span class="comment"> *      fn.call:当前实例fn通过原型链的查找机制找到Function.prototype上的call方法 =&gt; function call()&#123;[native code]&#125;</span></span><br><span class="line"><span class="comment"> *      fn.call()把找到的call方法执行</span></span><br><span class="line"><span class="comment"> *      当call方法执行的时候，内部处理了一些事情</span></span><br><span class="line"><span class="comment"> *          =&gt; 首先把要操作的函数中的this关键字变为call方法传递的第一个实参值</span></span><br><span class="line"><span class="comment"> *          =&gt; 把call方法第二个及以后的实参获取到</span></span><br><span class="line"><span class="comment"> *          =&gt; 把第二个以后传递进来的实参传给操作的函数,把要操作的函数执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// call 中的this指向的是函数，this执行即函数执行，如果没有传参，call中的this就是指向fn,直接执行fn即可，如果传参，就要</span></span><br><span class="line"><span class="comment">// 调用call执行的是call中的this,</span></span><br><span class="line">fn.call(oo); <span class="comment">// this -&gt; oo</span></span><br><span class="line">fn.call(obj); <span class="comment">// this -&gt; OBJ</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> param1 = <span class="built_in">arguments</span>[<span class="number">0</span>],</span><br><span class="line">        paramOther = []; <span class="comment">// 把arg中除了第一个以外的方法获取到</span></span><br><span class="line">    <span class="comment">// this:fn 当前要操作的函数(函数类的一个实例)</span></span><br><span class="line">    <span class="comment">// 把fn中的this关键字修改为param1 =&gt; 把this(call中)中的this关键字修改为param1</span></span><br><span class="line">    <span class="comment">// 把fn执行，把paramOther分别传递给fn  =&gt; this(paramOther)</span></span><br><span class="line">    <span class="keyword">this</span>(paramOther)</span><br><span class="line">                                         </span><br><span class="line">&#125;</span><br><span class="line">fn.mycall();</span><br><span class="line"></span><br><span class="line">sum.call.call(opt);</span><br><span class="line"><span class="comment">// 1 sum.call 找到Function.prototype上的call方法（也是一个函数，是函数类的实例，可以继续调用call/apply等方法）sum.call = A</span></span><br><span class="line"><span class="comment">// 2 A.call(opt), 继续找原型上的call方法，把call方法执行，把A中的this关键字修改为opt,把A执行</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>)&#125;;</span><br><span class="line"></span><br><span class="line">fn1.call(fn2); <span class="comment">// call中的this是fn1, fn1中没有this关键字，不做修改，然后执行this(fn1), 输出1</span></span><br><span class="line">fn1.call.call(fn2) </span><br><span class="line"><span class="comment">// fn1.call.call中的this是fn1.call,第一个参数是fn2, fn1.call中的this修改为fn2,执行this(fn1.call)</span></span><br><span class="line"><span class="comment">// call中的this,在上一步操作中已经被修改为fn2, fn2中没有this关键字，不做修改，直接执行this(fn2),输出 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.call(fn1);<span class="comment">//</span></span><br><span class="line"><span class="comment">// call方法执行， this 是 Function.prototype, 这是个匿名函数，匿名函数中的 this 被修改为 fn1, 执行匿名函数Function.prototype, 没有任何输出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.call.call(fn1);</span><br><span class="line"><span class="comment">// call 方法执行， this 是 Function.prototype.call函数，第一个参数fn1, 将Function.prototype.call函数中的this修改成fn1, 后面没有参数，执行Function.prototype.call()函数，这个函数中的this已经被修改为fn1, 而不是Function.prototype,执行this就是执行fn1,输出1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.call.call.call.call.call(fn2);</span><br><span class="line"><span class="comment">// call方法第一次执行，前面的call函数中的this被修改为fn2,执行前面的call函数，没有参数，就没有this的修改，直接执行fn2,输出2；执行前面的call函数，没有参数，this是前面的..call,没有任何输出，直到执行匿名函数Function.prototype为止，都没有任何输出</span></span><br><span class="line">fn1.call.call.call.call.call(fn2);</span><br><span class="line"><span class="comment">// 结果也是只输出fn2</span></span><br><span class="line"></span><br><span class="line">fn.call(<span class="number">10</span>,<span class="number">20</span>); <span class="comment">// this:Number&#123;10&#125;, a:20, b:undefined;</span></span><br><span class="line"></span><br><span class="line">fn.call();<span class="comment">// this:window;</span></span><br><span class="line">fn.call(<span class="literal">null</span>);<span class="comment">// this:window;</span></span><br><span class="line">fn.call(<span class="literal">undefined</span>);<span class="comment">// this:window;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* call中的细节</span></span><br><span class="line"><span class="comment">* 1,非严格模式下，如果参数不传，或者第一个传递的是null / undefined,this都指向window;</span></span><br><span class="line"><span class="comment">* 2,在严格模式下，第一个参数是谁，this就指向谁(包括null和undefined),不传，this是undefined;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 和call基本上一样，唯一区别在于传参方式</span></span><br><span class="line"><span class="comment">*       fn.call(obj,10,20);</span></span><br><span class="line"><span class="comment">*       fn.apply(obj,[10,20]); apply把需要传递给fn的参数放到一个数组（或者类数组）中传递进去，虽然写的是一个数组，但是也相当于给fn一个个传递</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * bind:语法和call一模一样，唯一的区别在于立即执行还是等待执行</span></span><br><span class="line"><span class="comment"> *      fn.call(obj,10,20) 改变fn中的this，并且把fn立即执行</span></span><br><span class="line"><span class="comment"> *      fn.bind(obj,10,20) 改变fn中的this,此时fn并没有执行，不兼容IE6-8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'OBJ'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//document.onclick = fn; //把fn绑定给点击事件，点击的时候执行fn;</span></span><br><span class="line"><span class="comment">//document.onclick=fn();// 绑定的时候，先执行fn,把执行的返回值返回给点击事件，当点击的时候执行的是undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// document.onclick = fn.call(obj); 虽然把this修改为obj了，但是绑定的时候就把fn执行了(call是立即执行函数)，点击的时候执行的是fn的返回值</span></span><br><span class="line"><span class="built_in">document</span>.onclick = fn.bind(obj, <span class="number">10</span>, <span class="number">20</span>); <span class="comment">// bind属于把fn中的this预处理为obj,当点击的时候才会执行fn</span></span><br></pre></td></tr></table></figure><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 需求一：获取数组中的最大值（最小值）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> ary = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">14</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>];</span><br><span class="line"><span class="comment">/*1,给数组由大到小排序**/</span></span><br><span class="line"><span class="comment">/*let max = ary.sort(function (a, b) &#123;</span></span><br><span class="line"><span class="comment">    return b - a;</span></span><br><span class="line"><span class="comment">&#125;)[0];</span></span><br><span class="line"><span class="comment">let min = ary[ary.length - 1];</span></span><br><span class="line"><span class="comment">console.log(max, min);*/</span></span><br><span class="line"><span class="comment">/*2,假设法：假设第一个值是最大值，依次遍历数组中后面的每一项，和假设的值进行比较，如果比假设的值大，把当前项赋值给max**/</span></span><br><span class="line"><span class="comment">/*let max = ary[0];</span></span><br><span class="line"><span class="comment">let min = ary[0];</span></span><br><span class="line"><span class="comment">for (let i = 1; i &lt; ary.length; i++) &#123;</span></span><br><span class="line"><span class="comment">    max - ary[i] &lt; 0 ? (max = ary[i]) : null;</span></span><br><span class="line"><span class="comment">    min - ary[i] &gt; 0 ? (min = ary[i]) : null;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">console.log(max, min);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*3,基于Math.max,apply**/</span></span><br><span class="line"><span class="comment">// 利用了apply的一个特征，虽然方的是一个数组，但是执行方法的时候，也是把数组中的每一项一个个的传递给函数</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, ary);</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line"><span class="keyword">let</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, ary);</span><br><span class="line"><span class="built_in">console</span>.log(min);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 基于Math.max, eval</span></span><br><span class="line"><span class="comment"> *  4, eval: 不能使用Math.max(eval(ary.toString()));因为括号表达式自身的执行机制，原因如下</span></span><br><span class="line"><span class="comment"> [12,23,34].toString()</span></span><br><span class="line"><span class="comment"> * 2,括号表达式：用小括号包起来，里面有很多项，每一项用逗号分隔，最后值获取最后一项的内容，但是会把其他的项也过一遍</span></span><br><span class="line"><span class="comment"> *   (function () &#123;</span></span><br><span class="line"><span class="comment"> *     console.log(1)</span></span><br><span class="line"><span class="comment"> *   &#125;, function () &#123;</span></span><br><span class="line"><span class="comment"> *      console.log(2)</span></span><br><span class="line"><span class="comment"> *  &#125;)();</span></span><br><span class="line"><span class="comment"> * 不建议过多使用括号表达式，因为会改变this</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*let fn = function () &#123;</span></span><br><span class="line"><span class="comment">    console.log(this);</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">let obj = &#123;</span></span><br><span class="line"><span class="comment">    fn: fn</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">(fn, obj.fn)(); // 执行的是obj.fn，当时方法中的this是window而不是obj</span></span><br><span class="line"><span class="comment">(obj.fn)(); // this是obj*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*let max = eval("Math.max(" + ary.toString() + ")");</span></span><br><span class="line"><span class="comment">let min = eval("Math.min(" + ary.toString() + ")");</span></span><br><span class="line"><span class="comment">console.log(max, min);*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上述需求一的最优解，...是ES6中的</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...ary),</span><br><span class="line">    min = <span class="built_in">Math</span>.min(...ary);</span><br><span class="line"><span class="built_in">console</span>.log(max, min);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解构赋值：按照一个数据值的结构，快速解析获取到其中的内容</span></span><br><span class="line"><span class="comment"> *   1. 真实项目中一般都是针对于数组或者对象进行解构赋值；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//===========数组解构赋值</span></span><br><span class="line"><span class="keyword">let</span> ary = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>];</span><br><span class="line"><span class="comment">/*let [a, b, c] = ary; // 让等号左边出现和右边相同的数据结构，左边可以创建一些变量快速获取到右侧对应位置的值（解构赋值）；</span></span><br><span class="line"><span class="comment">console.log(a, b, c);</span></span><br><span class="line"><span class="comment">let [d] = ary;</span></span><br><span class="line"><span class="comment">console.log(d); //12</span></span><br><span class="line"><span class="comment">let [, , e] = ary;</span></span><br><span class="line"><span class="comment">console.log(e); //34</span></span><br><span class="line"><span class="comment">let [f, , g] = ary;</span></span><br><span class="line"><span class="comment">console.log(f, g);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//获取第一项，把剩下的项作为数组返回</span></span><br><span class="line"><span class="comment">let [a, ...b] = ary; // ...在此处称之为剩余运算符：除了前面以外的项都放在一个数组当中</span></span><br><span class="line"><span class="comment">console.log(a, b);</span></span><br><span class="line"><span class="comment">let [a, ...b,c] = ary; //这样会报错，因为剩余运算符必须放在解构位置中的最后</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> ary2 = [<span class="number">12</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b = <span class="number">0</span>] = ary2; <span class="comment">//结构的时候可以给变量设置默认值：如果当前变量对应结构中的这一项没有值，变量使用默认值</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">12</span>,</span><br><span class="line">    b = <span class="number">13</span>;</span><br><span class="line"><span class="comment">//=&gt;a,b交换值</span></span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//============对象解构赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'xxx'</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    sex: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*let &#123;</span></span><br><span class="line"><span class="comment">    name,</span></span><br><span class="line"><span class="comment">    age</span></span><br><span class="line"><span class="comment">&#125; = obj; //对象结构赋值默认情况下要求：左侧变量名和对象中的属性名一致才可以</span></span><br><span class="line"><span class="comment">console.log(name, age);</span></span><br><span class="line"><span class="comment">let &#123;</span></span><br><span class="line"><span class="comment">    sex</span></span><br><span class="line"><span class="comment">&#125; = obj;</span></span><br><span class="line"><span class="comment">console.log(sex);*/</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    name: nameAA <span class="comment">// 给解构的属性名起别名作为我们使用的变量</span></span><br><span class="line">&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(nameAA);</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    friend: friendAA = <span class="number">0</span> <span class="comment">// 给不存在的值设置默认值</span></span><br><span class="line">&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(friendAA);</span><br><span class="line"><span class="built_in">console</span>.log(friend); <span class="comment">// 报错：obj中没有这个属性名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常用赋值方法</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    name = <span class="string">'kyle'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    age = <span class="number">0</span></span></span></span><br><span class="line"><span class="function"><span class="params">&#125; = &#123;&#125;</span>) </span>&#123; <span class="comment">// 把传递的对象解构了,设置默认值是&#123;&#125;:现在传递对象或者不传递，形参接收到的都是对象</span></span><br><span class="line">    <span class="comment">//结构的时候可以把传递进来的对象中，如果某个属性不存在，我们赋值默认值</span></span><br><span class="line">    <span class="built_in">console</span>.log(name, age);</span><br><span class="line">&#125;;</span><br><span class="line">fn(); <span class="comment">//kyle 0</span></span><br><span class="line">fn(&#123;</span><br><span class="line">    name: <span class="string">'picapoon'</span>,</span><br><span class="line">    age: <span class="number">28</span></span><br><span class="line">&#125;); <span class="comment">// picapoon 28</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用：</span></span><br><span class="line"><span class="keyword">let</span> value = &#123;</span><br><span class="line">    name: <span class="string">'xxx'</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    score: [<span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>, <span class="number">45</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a=xxx,b=12,c=[23,34,45]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    name: a,</span><br><span class="line">    score: [b, ...c]</span><br><span class="line">&#125; = value;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * "..."在ES6中有三种含义</span></span><br><span class="line"><span class="comment"> *   1. 剩余运算符</span></span><br><span class="line"><span class="comment"> *   2. 拓展运算符</span></span><br><span class="line"><span class="comment"> *   3. 展开运算符 : 把数组（或者对象，类数组）中的每一项展开</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*let ary = [12, 23, 34];</span></span><br><span class="line"><span class="comment">let [...arg] = ary; // ary.slice(0);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">function fn(context, ...arg) &#123;</span></span><br><span class="line"><span class="comment">    //获取传递值中的第一个和剩下的</span></span><br><span class="line"><span class="comment">    console.log(context, arg);</span></span><br><span class="line"><span class="comment">    //arg是一个数组格式的，aruments是一个类数组</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">let obj = &#123;</span></span><br><span class="line"><span class="comment">    name: 'xxx'</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">fn(obj, 10, 20, 30, 40);*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//传递几个实参，arg中就存储多少个，此时arg和arguments是一样的，区别是arg是一个数组，arguments是一个类数组</span></span><br><span class="line">    <span class="keyword">return</span> arg.join(<span class="string">'+'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//console.log(sum([1, 2, 3, 4, 5]));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//展开运算符</span></span><br><span class="line"><span class="keyword">let</span> ary = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>];</span><br><span class="line"><span class="built_in">Math</span>.max(...ary); <span class="comment">// Math.max(12,23,34);</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">fn(ary); <span class="comment">// [12,23,34],undefined,undefined</span></span><br><span class="line">fn(...ary); <span class="comment">//12,23,34 把数组中的每一项分别传递给一个函数，此时我们使用展开运算符即可；</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'xxx'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> newObj = &#123; <span class="comment">//对象的克隆，</span></span><br><span class="line">    ...obj, <span class="comment">//原有对象展开，即克隆到新的对象上</span></span><br><span class="line">    sex: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//数组的展开</span></span><br><span class="line"><span class="keyword">let</span> ary0 = [<span class="number">12</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">let</span> newAry = [...ary0, <span class="number">100</span>]; <span class="comment">//[12,23,100]</span></span><br></pre></td></tr></table></figure><h3 id="类数组转化为数组"><a href="#类数组转化为数组" class="headerlink" title="类数组转化为数组"></a>类数组转化为数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写一个方法fn，实现任意数求平均值（去除数字中最大值和最小值，然后再算平均值，保留小数点后两位）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// arguments是类数组，不能执行数组原型上的方法</span></span><br><span class="line">    <span class="comment">//1.先给arguments排序（不能直接使用sort方法），把排序后的值去掉首尾，</span></span><br><span class="line">    <span class="comment">//2.把剩下的值求和除以总长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//类数组转化为数组 (把类数组克隆一份一模一样 的，最后存储到数组中)，数组的slice可以实现克隆</span></span><br><span class="line">    <span class="comment">/*  let ary=[];</span></span><br><span class="line"><span class="comment">     for (let i = 0; i &lt; arguments.length; i++) &#123;</span></span><br><span class="line"><span class="comment">        ary.push(arguments[i]);       </span></span><br><span class="line"><span class="comment">     &#125;; */</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 如果我们把内置的slice执行，并且让方法中的this指向arguments,就相当于把arg转换为数组</span></span><br><span class="line">     <span class="comment">// Array.prototype.slice()或者[].slice() </span></span><br><span class="line">     <span class="comment">//类数组借用数组原型上的方法执行实现相关的操作：先找到数组原型上的slice方法，调用call方法，修改this为argumens, 类数组和数组类似，都有length和索引</span></span><br><span class="line">     <span class="keyword">let</span> ary=[].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">    ary.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a - b; &#125;);</span><br><span class="line">    ary.pop();</span><br><span class="line">    ary.shift();</span><br><span class="line">    <span class="comment">/*     let total=0;</span></span><br><span class="line"><span class="comment">        for (let i = 0; i &lt; ary.length; i++) &#123;</span></span><br><span class="line"><span class="comment">             total = total+ ary[i];       </span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line">    <span class="keyword">let</span> total = <span class="built_in">eval</span>(ary.join(<span class="string">"+"</span>));</span><br><span class="line">    <span class="keyword">return</span> (total / ary.length).toFixed(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">10</span>, <span class="number">9.8</span>, <span class="number">9.5</span>, <span class="number">8.7</span>, <span class="number">8.8</span>, <span class="number">8</span>, <span class="number">9.2</span>,<span class="number">8.9</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写slice方法，实现： ary.slice(0),相当于把ary克隆一份新数据</span></span><br><span class="line"><span class="keyword">let</span> ary = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.myslice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ary = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        ary[i] = <span class="keyword">this</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ary.myslice());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转化为数组的方法有两种，一是split,一是[].slice.call</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"yuihdgrg"</span>.split(<span class="string">''</span>));</span><br><span class="line"><span class="built_in">console</span>.log([].slice.call(<span class="string">'yuijok'</span>));</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn=<span class="function">(<span class="params">x,y</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn=<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//只有一个参数，可以省略小括号</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn=<span class="function">(<span class="params">x=<span class="number">0</span>,y=<span class="number">0</span></span>)=&gt;</span>x+y <span class="comment">// 如果当前函数体中只有一句操作，并且是RETURN的，可以省略大括号（可以给形参设置默认值）</span></span><br><span class="line"><span class="keyword">let</span> fn=<span class="function"><span class="params">x</span>=&gt;</span><span class="function"><span class="params">y</span>=&gt;</span>x+y</span><br><span class="line">functiion fn(x)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数中没有arguments，但是可以使用剩余运算符代替，而且arg是数组，更便于使用</span></span><br><span class="line"><span class="keyword">let</span> fn=<span class="function">(<span class="params">..arg</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数中没有自己的执行主体this,它的this都是继承上下文中的this</span></span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    fn:(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// this -&gt; window  let _this =this, _this只是一个</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// console.log(_this)  _this不是执行主体，而是一个变量，不是私有的，需要向上级作用域查找</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    fn:(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 箭头函数执行和是否有点，点前面是谁没有关系，因为它没有自己的执行主体，在箭头函数中使用到的this都是直接找上下文中的this来使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍了js底层机制和一些经典的面试题&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://abluecup.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript基础知识二</title>
    <link href="https://abluecup.github.io/2019/04/02/Javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BA%8C/"/>
    <id>https://abluecup.github.io/2019/04/02/Javascript基础知识二/</id>
    <published>2019-04-02T03:24:01.000Z</published>
    <updated>2019-07-01T09:34:30.186Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要介绍的是变量的提升机制、面向对象、原型链等内容<br><a id="more"></a></p><h2 id="变量提升机制"><a href="#变量提升机制" class="headerlink" title="变量提升机制"></a>变量提升机制</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">一般都把js放到body的末尾</span></span><br><span class="line"><span class="comment">1.为啥？</span></span><br><span class="line"><span class="comment">2.放在head中可不可以，如何放到head中也可以实现放到body末尾的效果</span></span><br><span class="line"><span class="comment">3.script标签中有两个属性，defer / async, 这两个属性是做什么的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>栈内存：作用域，</p><pre><code>1. 提供供JS代码自上而下执行的环境（代码都是在栈中执行）；2. 由于基本类型值比较简单，他们都是直接在栈内存中开辟一个位置，把值直接存储进去；    =&gt; 当栈内存被销毁，存储的那些基本值也随之而销毁；</code></pre><p>堆内存：引用值对应的空间<br>    存储引用类型值（对象：键值对；函数：代码字符串;）<br>    =&gt; 当前堆内存销毁，那么引用值彻底没了<br>    =&gt; 堆内存的释放： 当堆内存没有被任何的变量或者其他东西所占用，浏览器会在空闲的时候，自主进行内存回收，把所有不被占用的内存销毁掉。（webkit内核浏览器）<br>    xxx = null;通过空对象指针null可以让原始变量或者其他东西谁都不指向，原先被占用的堆内存就没有被东西占用了，浏览器会销毁它。<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var ary1 =[1,2,4];</span><br><span class="line">ary1= null; // 释放堆内存</span><br></pre></td></tr></table></figure></p><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>当栈内存（作用域）形成，JS自上而下执行之前，浏览器首先会把所有带var / function关键字的进行提前的声明或者定义，这种预先处理机制称之为变量提升；<br>    声明： declare // var a ;function aa; (默认值undefined)<br>    定义： defined a=12; (定义就是赋值)<br>    =&gt; 带var的只声明，未定义；带function的声明和赋值都完成了；<br>变量提升只发生在当前作用域<br>在全局作用域下声明的变量是全局变量，在私有作用域下声明的变量是私有变量 （带 var , function 的才是声明）<br>浏览器很懒，做过的事情不会重复第二遍，即当代码执行遇到创建函数这部分代码的时候，直接跳过（在变量提升阶段，已经完成函数的赋值操作）</p><p>在ES3或者ES5语法规范中，只有全局作用域和函数执行的私有作用域（栈内存），其他大括号不会形成栈内存</p><h2 id="带var-和不带var-的区别"><a href="#带var-和不带var-的区别" class="headerlink" title="带var 和不带var 的区别"></a>带var 和不带var 的区别</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="string">'a'</span> <span class="keyword">in</span> <span class="built_in">window</span>; <span class="comment">// in 用来检测属性是否隶属于对象</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// window对象的一个属性</span></span><br></pre></td></tr></table></figure><p>在全局作用域下声明一个变量，也相当于给window全局对象设置了一个属性，变量的值就是属性的值；私有作用域下声明的私有变量和window没啥关系；<br>全局变量和win中的属性存在映射机制；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不加var,本质是window下的属性，不存在变量提升机制； 加var，本质是变量，存在变量提升机制</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// Uncaught ReferenceError: a is not defined 按照变量的机制处理，且window下并没有window.a的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span> <span class="keyword">in</span> <span class="built_in">window</span>);<span class="comment">//false undefined, 对象没有这个属性，打印undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// undefined</span></span><br><span class="line">a=<span class="number">12</span>;<span class="comment">// window.a=12的简写；</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//12， 不存在变量a,但是window对象下有a属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">//12， </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = b =<span class="number">12</span>; <span class="comment">// 这样写b是不带var的；</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>, b=<span class="number">12</span>;<span class="comment">// 这样写，b是带var的；</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a,b);  <span class="comment">// undefined, undefined;</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">12</span>,b=<span class="number">12</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/** 私有作用域下，带var不带var也有区别</span></span><br><span class="line"><span class="comment">              带var的在私有作用域变量提升阶段，都声明为私有变量，和外界没有任何关系；</span></span><br><span class="line"><span class="comment">              不带var的不是私有变量，会向上级查找，看是否为上级的变量，不是，继续向上查找，一直找到window为止；</span></span><br><span class="line"><span class="comment">              我们把这种查找机制叫做作用域链；也就是我们在私有作用域中操作的这个非私有变量，是一直操作的别人的；</span></span><br><span class="line"><span class="comment">              </span></span><br><span class="line"><span class="comment">              </span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">    <span class="built_in">console</span>.log(a,b); <span class="comment">// 形成一个私有作用域，变量提升， a=undefined, b =window.b =12;</span></span><br><span class="line">    <span class="keyword">var</span> a = b=<span class="number">13</span>;   <span class="comment">// window.b被修改为13</span></span><br><span class="line">    <span class="built_in">console</span>.log(a,b);  <span class="comment">//私有作用域 13 ,13</span></span><br><span class="line">&#125;  <span class="comment">// 跳过函数创建的代码，继续执行</span></span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a,b); <span class="comment">//  12 ， 13// 被覆盖了</span></span><br></pre></td></tr></table></figure><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    b=<span class="number">13</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// 13</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//13</span></span><br></pre></td></tr></table></figure><p>1.变量提升（没有）<br>2.执行fn,没有变量提升；b在fn和window下都没有；在作用域查找的过程中，如果找到win也没有这个变量，相当于给win设置了一个属性b window.b=13;</p><h2 id="只对等号左边进行变量提升"><a href="#只对等号左边进行变量提升" class="headerlink" title="只对等号左边进行变量提升"></a>只对等号左边进行变量提升</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fn(); <span class="comment">// fn is not a function  fn此时是undefined,不是函数</span></span><br><span class="line">sum(); <span class="comment">// 2 普通函数在变量提升阶段已经声明且赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数之函数表达式</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fn(); <span class="comment">// 1 当代码执行到这一行的时候，会把函数赋值给fn</span></span><br><span class="line">sum(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>真实项目中，常常采用函数表达式这种方式</strong></p><h2 id="条件判断下的变量提升"><a href="#条件判断下的变量提升" class="headerlink" title="条件判断下的变量提升"></a>条件判断下的变量提升</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//在当前作用域中，不管条件是否成立都要进行变量的提升 </span></span><br><span class="line">    <span class="comment">// 带var的还是只声明</span></span><br><span class="line">    <span class="comment">// 带function的在老版本浏览器渲染机制下，声明+定义都处理，但是为了迎合ES6中的块级作用域，新版本浏览器对于函数（在条件判断中的函数），不管条件是否成立，都只是先声明，没有定义，类似于var</span></span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">'a'</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> a =<span class="number">100</span>; </span><br><span class="line">   &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">    g = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">    ~ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (g() &amp;&amp; [] == ![]) &#123; <span class="comment">// Uncaught typeError: g is not a function</span></span><br><span class="line"><span class="comment">// 新版本浏览器中只声明，未赋值，g=undefined, undefined不是函数，报错；老版本浏览器中g() = true;</span></span><br><span class="line">            f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;();</span><br><span class="line">    <span class="built_in">console</span>.log(f());</span><br><span class="line">    <span class="built_in">console</span>.log(g());</span><br></pre></td></tr></table></figure><h2 id="同名问题处理"><a href="#同名问题处理" class="headerlink" title="同名问题处理"></a>同名问题处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   1.带var和function关键字声明相同的名字，这种也算是重名了（其实是一个FN，只是存储的值不同）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 2. 关于重名的处理：如果名字重复了，不会重新的声明，但是是会重新的定义：（重新赋值）【不管是变量提升还是代码执行阶段皆是如此】</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *变量提升： fn = ...(1)</span></span><br><span class="line"><span class="comment">                      = ...(2)</span></span><br><span class="line"><span class="comment">                      =...(3)</span></span><br><span class="line"><span class="comment">                      =...(4)</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       fn(); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       fn(); <span class="comment">// 4</span></span><br><span class="line">       <span class="keyword">var</span> fn = <span class="number">100</span>; <span class="comment">// 带var的在变量提升阶段只是把声明处理了，没有执行赋值操作，所以在代码执行的时候需要完成赋值；</span></span><br><span class="line">       fn(); <span class="comment">// Uncaught TypeError: fn is not a function;</span></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       fn();</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       fn();</span><br></pre></td></tr></table></figure><h2 id="let创建的变量不存在变量提升"><a href="#let创建的变量不存在变量提升" class="headerlink" title="let创建的变量不存在变量提升"></a>let创建的变量不存在变量提升</h2><ol><li>在ES6中基于let或const创建变量或者函数，不存在变量提升机制, 且切断了全局变量和window属性的映射机制；</li><li>在同一个作用域中，基于let不能声明相同的变量；</li><li>浏览器在作用域形成之后，执行代码之前，会有一个变量查重机制（语法检测）,发现有重复声明的变量,报错 Uncaught SyntaxError<br>虽然没有把变量提前声明定义，但是浏览器已经记住了，当前作用域下有哪些变量;不管用什么方式，在当前作用域下声明了变量，再次使用let创建都会报错。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b =<span class="number">12</span>; <span class="comment">// window.b=12</span></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line">a=<span class="number">12</span>; <span class="comment">// </span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//Uncaught ReferenceError: a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="ES6-JS中暂时性死区问题"><a href="#ES6-JS中暂时性死区问题" class="headerlink" title="ES6 JS中暂时性死区问题"></a>ES6 JS中暂时性死区问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">13</span>; <span class="comment">// 基于let创建变量，会把大部分&#123;&#125;当成一个私有的块级作用域（类似于函数的私有作用域），在这里也是重新检测语法规范，看一下是否是基于新语法创建的变量，如果是按照新语法来解析</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br><span class="line"><span class="comment">// 在原有浏览器的渲染机制下，基于typeof等逻辑运算符检测一个违背声明过得变量，不会报错，返回undefined   </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c); <span class="comment">// Uncaught ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> c; <span class="comment">//如果当前变量是基于ES6语法处理，在没有声明这个变量的时候，使用TYPEOF检测，会直接报错，不会是undefined,解决了原有的暂时性死区问题</span></span><br></pre></td></tr></table></figure><h2 id="闭包作用域-scope"><a href="#闭包作用域-scope" class="headerlink" title="闭包作用域(scope)"></a>闭包作用域(scope)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>,</span><br><span class="line">    b = <span class="number">13</span>,</span><br><span class="line">    c = <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 形成作用域后，变量提升前，需要做形参赋值 a =12; </span></span><br><span class="line">    <span class="comment">// 在私有作用域中，只有以下两种情况是私有变量 A: 声明过的变量 ；B:形参也是私有变量； </span></span><br><span class="line">    <span class="comment">// 剩下的都不是自己私有的变量，都需要基于作用域链的机制向上查找</span></span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c); <span class="comment">// 12 undefined 14</span></span><br><span class="line">    <span class="keyword">var</span> b = c = a = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// var b=20; c=20;a=20;</span></span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c); <span class="comment">// 20,20,20</span></span><br><span class="line">&#125;</span><br><span class="line">fn(a); <span class="comment">// 执行fn(小括号中是实参：值) -&gt; 执行fn把全局变量a的值12当作实参传递给函数的形参 =&gt; fn(12)</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b, c); <span class="comment">//12,13,20</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [12,23] -&gt; [100,23]</span></span><br><span class="line">     <span class="keyword">var</span> ary = [<span class="number">12</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">ary</span>) </span>&#123; <span class="comment">// 形参赋值赋的是引用地址</span></span><br><span class="line">         <span class="comment">// ary = [12,23]</span></span><br><span class="line">         <span class="built_in">console</span>.log(ary); <span class="comment">// [12,23]</span></span><br><span class="line">         ary[<span class="number">0</span>] = <span class="number">100</span>; <span class="comment">//[100,23] 修改了应用地址中的数据</span></span><br><span class="line"></span><br><span class="line">         ary = [<span class="number">100</span>]; <span class="comment">// 修改了引用地址</span></span><br><span class="line">         ary[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">         <span class="built_in">console</span>.log(ary); <span class="comment">// [0]</span></span><br><span class="line">     &#125;</span><br><span class="line">     fn(ary);</span><br><span class="line">     <span class="built_in">console</span>.log(ary); <span class="comment">// [100,23]</span></span><br></pre></td></tr></table></figure><h2 id="查找上级作用域"><a href="#查找上级作用域" class="headerlink" title="查找上级作用域"></a>查找上级作用域</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前函数执行，形成呢个一个私有作用域A，A的上级作用域是谁，和他在哪执行的没有关系，和他在哪创建的有关系，在哪创建的，他的上级作用域就是谁。</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// arguments.callee:函数本身</span></span><br><span class="line">    <span class="comment">// arguments.callee.caller: 当前函数在哪执行的caller就是谁（记录的是他的宿主环境）;在全局下执行是null</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">120</span>;</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br><span class="line">sum(); <span class="comment">//</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前函数执行，形成呢个一个私有作用域A，A的上级作用域是谁，和他在哪执行的没有关系，和他在哪创建的有关系，在哪创建的，他的上级作用域就是谁。</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="built_in">console</span>.log(n);</span><br><span class="line">    &#125;</span><br><span class="line">    f();</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = fn();</span><br><span class="line">x();</span><br><span class="line">x();</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br></pre></td></tr></table></figure><p><img src="/2019/04/02/Javascript基础知识二/Untitled.png" alt="图解"></p><h2 id="堆栈内存释放"><a href="#堆栈内存释放" class="headerlink" title="堆栈内存释放"></a>堆栈内存释放</h2><p>JS中的内存分为堆内存和栈内存<br>堆内存：存储引用类型数据（对象：键值对  函数：代码字符串）<br>栈内存：提供JS代码执行的环境和存储基本类型值</p><p>【堆内存释放】<br>    让所有引用堆内存地址的变量赋值为null即可（没有变量占用这个堆内存了）浏览器会在空闲的时候把它释放掉</p><p>【栈内存释放】<br>    一般情况下，当函数执行完成，所形成的私有作用域（栈内存）都会自动释放掉，但是也有特殊不销毁的存在：</p><pre><code>1. 函数执行完成，当前形成的栈内存中，某些内容被栈内存以外的变量占用了，此时栈内存不能释放，一旦释放，外面的变量找不到原有的内容了2. 全局栈内存只有在页面关闭的时候才会被释放掉如果当前内存没有被释放，那么之前在栈内存中能够存储的基本值也不会被释放，能够一直保存下来。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//var i=2;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n + (++i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn(<span class="number">2</span>); <span class="comment">// 先把fn执行，实参2，把fn执行的返回结果（return 后面的值）赋值给f</span></span><br><span class="line">f(<span class="number">3</span>); <span class="comment">// 返回的结果执行</span></span><br><span class="line">fn(<span class="number">5</span>)(<span class="number">6</span>); <span class="comment">// 和上面两步类似，都是先执行fn,把fn的返回结果再执行</span></span><br><span class="line">fn(<span class="number">7</span>)(<span class="number">8</span>);</span><br><span class="line">f(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6,12,16,8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// i++  :自身+1  </span></span><br><span class="line"><span class="comment">// ++i  :自身+1</span></span><br><span class="line"><span class="comment">// 区别是在和别人运算的时候，i++,先拿原有的值进行运算，运算结束后，本身累加1； ++i 先自身累加1，再拿累加后的结果进行运算</span></span><br></pre></td></tr></table></figure><p>闭包的作用： 保护私有变量不受外界干扰；形成一个不受外界干扰的栈内存，保存内部的私有变量；</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>【概念】： 函数执行，形成一个私有作用域，保护里面的私有变量不受外界的干扰，这种保护机制称为“闭包”；</p><p>=&gt; 市面上开发者认为的闭包：形成一个不销毁的私有栈内存（作用域）才是闭包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; 闭包：柯里化函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f=fn();</span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt; 闭包：惰性函数</span></span><br><span class="line"><span class="keyword">var</span> utils = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 闭包项目实战应用</span></span><br><span class="line"> <span class="comment">// 真实项目中为了保证JS的性能（对栈内存的性能优化），应该尽可能的减少闭包的使用（不销毁的堆栈内存是耗性能的）</span></span><br><span class="line"> <span class="comment">// 1.闭包具有保护作用：保护私有变量不受外界干扰</span></span><br><span class="line"> <span class="comment">// 在真实项目中，尤其是团队协作开发中，应该尽可能的减少全局变量的使用，</span></span><br><span class="line"> <span class="comment">//以防止相互之间的冲突（“全局变量污染”），此时我们完全可以把这一部分内容封装到一个闭包中，</span></span><br><span class="line"> <span class="comment">//让全局变量转化为私有变量</span></span><br><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> n = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line"> &#125;)()</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 不仅如此，我们封装类库的时候，也会把自己的程序都存放在闭包中保护起来，</span></span><br><span class="line"> <span class="comment">//防止和用户的程序冲突，但是我们又需要暴露一些方法给客户使用，这样我们如何处理呢 ？</span></span><br><span class="line"> <span class="comment">// JQ这种方式，把需要暴露的方法抛到全局</span></span><br><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="comment">//...</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery; <span class="comment">// 把需要供外面使用的方法，通过给WIN设置属性的方式暴露出去；</span></span><br><span class="line"> &#125;)()</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// zepto这种方式，基于return把需要供外面使用的方法暴露出去</span></span><br><span class="line"> <span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">         xxx:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.闭包具有保存作用：形成不销毁的栈内存，把一些值保存拿下来，方便后面的调取使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line"> <span class="keyword">var</span> TabList = oBox.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"> <span class="keyword">var</span> divList = oBox.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">changeTab</span>(<span class="params">curIndex</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; TabList.length; i++) &#123;</span><br><span class="line">         TabList[i].className = <span class="string">''</span>;</span><br><span class="line">         divList[i].className = <span class="string">''</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     TabList[curIndex].className = <span class="string">'active'</span>;</span><br><span class="line">     divList[curIndex].className = <span class="string">'active'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/*   for (var i = 0; i &lt; TabList.length; i++) &#123;</span></span><br><span class="line"><span class="comment">        (function(i) &#123;</span></span><br><span class="line"><span class="comment">            TabList[i].onclick = function() &#123;</span></span><br><span class="line"><span class="comment">                changeTab(i);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;)(i);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    changeTab(0);*/</span></span><br><span class="line"> <span class="comment">// 执行方法：形成一个私有的栈内存，遇到变量I，I 不是私有变量，向上一级作用域查找（上级作用域window）</span></span><br><span class="line"> changeTab(<span class="number">0</span>);</span><br><span class="line"> <span class="comment">// 所有的绑定事件都是异步编程，（同步变成：一件事一件事做，当前这件事没完成，下一个任务不能处理； 异步编程：当前这件事件没有彻底完成，不再等待，继续执行下面的任务），绑定事件后，不需要等待执行，继续执行下一个循环任务，所以当我们点击执行方法的时候，循环早已经结束（全局的I是最后的循环结果）</span></span><br><span class="line"> <span class="comment">// 解决方案1：自定义属性</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; TabList.length; i++) &#123;</span><br><span class="line">     TabList[i].myIndex = i;</span><br><span class="line">     TabList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         changeTab(<span class="keyword">this</span>.myIndex);</span><br><span class="line">         <span class="comment">//=&gt; this:给当前元素的某个事件绑定方法，当事件触发，方法执行的时候，方法中的this是当前操作的元素对象</span></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 解决方案2 闭包</span></span><br><span class="line"> <span class="comment">/*     for (var i = 0; i &lt; TabList.length; i++) &#123;</span></span><br><span class="line"><span class="comment">          TabList[i].onclick = (function(n) &#123;</span></span><br><span class="line"><span class="comment">              //让自执行函数执行，把执行的函数返回值赋值给onclick, </span></span><br><span class="line"><span class="comment">              //此处Onclick绑定的是返回的小函数,点击的时候执行的是小函数，</span></span><br><span class="line"><span class="comment">              //自执行函数在给事件赋值的时候就已经执行了</span></span><br><span class="line"><span class="comment">              return function() &#123;</span></span><br><span class="line"><span class="comment">                  changeTab(n); // 上级作用域：自执行函数执行的时候形成的作用域</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">          &#125;)(i); // i:把本次全局变量i传递给内部函数的形参n</span></span><br><span class="line"><span class="comment">      &#125;*/</span></span><br><span class="line"> <span class="comment">// 总结：循环三次，形成三个不销毁的私有作用域（），而每一个不销毁的栈内存中都存储了一个私有变量，形参n的值；点击的时候，执行返回的小函数，遇到变量n,就是上级作用域中的n</span></span><br><span class="line"> <span class="comment">// 基于ES6来执行</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; TabList.length; i++) &#123;</span><br><span class="line">     TabList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         changeTab(i);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 基于ES6中的let来创建变量是存在块级作用域的（类似于私有作用域）；</span></span><br><span class="line"> <span class="comment">// 作用域： 栈内存</span></span><br><span class="line"> <span class="comment">// 1全局作用域</span></span><br><span class="line"> <span class="comment">// 2 私有作用域 （函数执行）</span></span><br><span class="line"> <span class="comment">// 3 块级作用域（一般用&#123;&#125;包起来的都是块级作用域，前提是ES6语法）</span></span><br><span class="line"> <span class="comment">/*     &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          let a = 1;</span></span><br><span class="line"><span class="comment">          console.log(a); // 1</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      // cosole.log(a); // 报错</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      for (let i = 0; i &lt; 5; i++) &#123;</span></span><br><span class="line"><span class="comment">          // 循环也是块级作用域，初始值设置的变量是当前本次会计作用域中的变量（形成了五个块级作用域）</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      switch</span></span><br><span class="line"><span class="comment">      case // 块级作用域</span></span><br><span class="line"><span class="comment">      let obj = &#123;&#125;; // =&gt; 对象不是块级作用域*/</span></span><br></pre></td></tr></table></figure><h2 id="面向对象编程（OOP-Object-Oriented-Programming）"><a href="#面向对象编程（OOP-Object-Oriented-Programming）" class="headerlink" title="面向对象编程（OOP Object Oriented Programming）"></a>面向对象编程（OOP Object Oriented Programming）</h2><h3 id="单例设计模式-singleton-pattern"><a href="#单例设计模式-singleton-pattern" class="headerlink" title="单例设计模式 singleton pattern"></a>单例设计模式 singleton pattern</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 单例设计模式</span></span><br><span class="line"><span class="comment"> * 1. 表现形式</span></span><br><span class="line"><span class="comment"> *  var obj=&#123;xxx:xxx,...&#125;</span></span><br><span class="line"><span class="comment"> *  在单例设计模式中，obj不仅仅是对象名，它被称为“命名空间”（NameSpace）,</span></span><br><span class="line"><span class="comment"> * 把描述事物的属性存放到命名空间中，多个命名空间是独立分开的，互不冲突。</span></span><br><span class="line"><span class="comment"> * 2. 作用</span></span><br><span class="line"><span class="comment"> *  把描述同一件事务的属性和特征进行“分组、归类”，（存储在不同堆内存中）</span></span><br><span class="line"><span class="comment"> * 因此避免了全局变量之间的冲突和污染</span></span><br><span class="line"><span class="comment"> * 3.单例设计模式命名的由来：每一个命名空间都是JS中Object这个内置基类的实例，</span></span><br><span class="line"><span class="comment"> * 而实例之间是相互独立，互不干扰的，所以我们称之为单例（单独的实例）</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 高级单例模式</span></span><br><span class="line"><span class="comment"> * 1. 再给命名空间赋值的时候，不是直接赋值一个对象，而是先执行匿名函数，</span></span><br><span class="line"><span class="comment"> * 形成一个私有作用域（不销毁的栈内存），在这个私有作用域aa中创建一个堆内存，</span></span><br><span class="line"><span class="comment"> * 把堆内存的地址赋值给命名空间</span></span><br><span class="line"><span class="comment"> * 2. 这种模式的好处：我们完全可以在AA中创造很多内容（变量or函数），</span></span><br><span class="line"><span class="comment"> * 哪些需要供外面调取使用的，我们暴露到返回的对象中（模块化实现的一种思想）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> nameSpace = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">                             </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        fn: fn</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * this</span></span><br><span class="line"><span class="comment"> * 1，给当前元素的某个事件绑定方法，当事件触发方法执行的时候，</span></span><br><span class="line"><span class="comment"> * 方法中的this是当前操作的元素</span></span><br><span class="line"><span class="comment"> * 2, 普通函数执行，函数中的this取决于执行的主体，谁执行的，</span></span><br><span class="line"><span class="comment"> * this就是谁（执行主体：方法执行看方法名前面是否有点,有的话，</span></span><br><span class="line"><span class="comment"> * 点前面是谁this就是谁，没有,this是window）</span></span><br><span class="line"><span class="comment"> * 3, 自执行函数执行，方法中的this是window</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    n: <span class="number">3</span>,</span><br><span class="line">    fn: (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        n *= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> n = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">this</span>.n += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.n *= <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//console.log(m++(++n));</span></span><br><span class="line">            <span class="built_in">console</span>.log(m + (++n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(n) <span class="comment">// 自执行函数执行的时候，堆内存的键值对还没有存储完，它和obj还没有关系，此时obj=undefined,obj.n会报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = obj.fn;</span><br><span class="line">fn(<span class="number">3</span>); <span class="comment">// </span></span><br><span class="line">obj.fn(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n, obj.n);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 模块化开发：</span></span><br><span class="line"><span class="comment"> *  1, 团队协作开发的时候，会把产品按照功能板块进行划分，</span></span><br><span class="line"><span class="comment"> * 每一个功能板块有专人负责开发;</span></span><br><span class="line"><span class="comment"> *  2, 把各个板块之间公用的部分进行提取分装，</span></span><br><span class="line"><span class="comment"> * 后期再想实现这些功能，直接调取引用即可（模块封装）;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> utils = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        aa: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> skipRender = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">skipRender.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> weatherRender = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        initi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn(); <span class="comment">//调取自己模块中的方法，直接调取即可；</span></span><br><span class="line">            skipRender.fn(); <span class="comment">//调取别人模块中的方法</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 工厂模式(factory pattern)：</span></span><br><span class="line"><span class="comment"> * 1, 把实现相同功能的代码进行封装，以此来实现“批量生产”（后期要实现这个功能，我们只需要执行函数即可）</span></span><br><span class="line"><span class="comment"> * 2, 低耦合高内聚：减少页面中的冗余代码，提高代码的重复使用率</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="oop面向对象"><a href="#oop面向对象" class="headerlink" title="oop面向对象"></a>oop面向对象</h3><p>JS是一门编程语言，具有编程思想<br>【面向对象】<br>js/java/php/c#/ruby/python/c++<br>【面向过程】<br>c<br>面向对象编程需要掌握：对象、类、实例的概念</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>万物及对象</p><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>对象的具体细分（按照功能特点进行分类，有大类，也有小类）</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>类中具体的一个事物（拿出类别中的具体一个实例进行研究，那么当前类别下的其他势力也具备这些特点和特征）;</p><p>整个JS就是基于面向对象设计和开发的语言，我们学习和实战的时候，也要按照面向对象的思想去体会和理解；</p><h3 id="JS中的内置类"><a href="#JS中的内置类" class="headerlink" title="JS中的内置类"></a>JS中的内置类</h3><p>Object: Number,String, Boolean,Null,Undefined,Array,Date,Rex,…,HTMLCollection,NodeList,EventTagert(node(Element,),…)</p><h3 id="JS中创建值的两种方式"><a href="#JS中创建值的两种方式" class="headerlink" title="JS中创建值的两种方式"></a>JS中创建值的两种方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 基于构造函数创建自定义类(constructor)</span></span><br><span class="line"><span class="comment"> * 1. 在普通函数执行的基础上"new xxx()",这样就不是普通函数执行了，</span></span><br><span class="line"><span class="comment"> * 而是构造函数执行，当前的函数名称之为“类名”，</span></span><br><span class="line"><span class="comment"> * 接收的返回结果是当前类的一个实例</span></span><br><span class="line"><span class="comment"> * 2. 自己创建的类名，最好第一个单词首字母大写</span></span><br><span class="line"><span class="comment"> * 3. 这种构造函数设计模式执行，主要用于组件、类库、插件、</span></span><br><span class="line"><span class="comment"> * 框架等的封装，平时编写业务逻辑一般不这样处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">Fn(); <span class="comment">//普通函数执行</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn(); <span class="comment">//=&gt; Fn是类，f是类的一个实例</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> Fn(); <span class="comment">// f2也是Fn的一个实例，f2和f是独立分开的，互不影响</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JS中创建值有两种方式</span></span><br><span class="line"><span class="comment"> * 1 字面量表达式</span></span><br><span class="line"><span class="comment"> * 2 构造函数模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 字面量方式</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">//构造函数模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不管是哪一种方式，创造出来的都是Object类的实例，</span></span><br><span class="line"><span class="comment">//而实例之间是独立分开的，所以var xxx=&#123;&#125;这种模式就是JS中的单例模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本数据类型值基于两种不同的方式创建出来的值是不一样的</span></span><br><span class="line"><span class="comment">//基于字面量方式创建出来的是基本类型值，</span></span><br><span class="line"><span class="comment">//基于构造函数创建出来的是引用类型值</span></span><br><span class="line"><span class="comment">// num2是数字类Number的一个实例，num1也是数字类的实例，</span></span><br><span class="line"><span class="comment">//它只是JS表达数字的方式之一，都可以使用数字类提供的属性和方法</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">12</span>; <span class="comment">// 12 number</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">12</span>); <span class="comment">// Number&#123;12&#125; object</span></span><br></pre></td></tr></table></figure><h4 id="构造函数机制"><a href="#构造函数机制" class="headerlink" title="构造函数机制"></a>构造函数机制</h4><p><img src="/2019/04/02/Javascript基础知识二/1.bmp" alt="Alert image"></p><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">this</span>.m = n;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'哈哈哈'</span>; <span class="comment">//这样执行，结束了代码执行，但是不会覆盖实例</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造函数执行</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 构造函数执行，浏览器会默认返回创建的实例</span></span><br><span class="line"><span class="comment"> * return的是一个基本值，返回的依然是类的实例，没有影响，如果返回的是引用值，</span></span><br><span class="line"><span class="comment"> * 则会把默认返回的实例覆盖，此时接收到的结果就不再是当前类的实例</span></span><br><span class="line"><span class="comment"> * 构造函数执行的时候，尽量减少return的使用，防止覆盖实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new Fn === new Fn(); 在构造函数执行的时候，如果Fn不需要传参，</span></span><br><span class="line"><span class="comment">//我们可以省略小括号,意思还是创建实例（和加小括号没有区别）</span></span><br><span class="line"><span class="comment">// instanceof: 检测某一个实例是否隶属于某个类 f instanceof Fn  实例 instanceof 类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// in ：检测当前对象是否存在某个属性 'm' in f, </span></span><br><span class="line"><span class="comment">//不管当前这个属性是对象的私有属性还是公有属性，只要有，结果就是true. </span></span><br><span class="line"><span class="comment">//'toString' in f 结果是true， toString是它的公有属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hasOwnProperty用来检测当前属性是否为对象的私有属性： 不仅要有这个属性，还必须要是私有属性才可以</span></span><br><span class="line">f.hasOwnProperty(<span class="string">'m'</span>); <span class="comment">// true</span></span><br><span class="line">f.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// false 这个是公有属性</span></span><br></pre></td></tr></table></figure><p>思考：编写一个方法hasPubProperty，检测当前属性是否为对象的公有属性，和hasOwnProperty对应<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPubProperty</span>(<span class="params">obj, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (attr <span class="keyword">in</span> obj &amp;&amp; obj.hasOwnProperty(attr) === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="原型和原型链-（prototype-amp-proto）"><a href="#原型和原型链-（prototype-amp-proto）" class="headerlink" title="原型和原型链 （prototype &amp; proto）"></a>原型和原型链 （prototype &amp; <em>proto</em>）</h3><p><img src="/2019/04/02/Javascript基础知识二/2.bmp" alt="Alert image"><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  [函数]</span></span><br><span class="line"><span class="comment"> *       普通函数、类（所有的类：包含内置类和自己创建的类）</span></span><br><span class="line"><span class="comment"> *   [对象]</span></span><br><span class="line"><span class="comment"> *       普通对象、数组、正则、Math、实例（是对象类型，除了基本类型的字面量创建的值） </span></span><br><span class="line"><span class="comment"> *          prototype的值，arguments</span></span><br><span class="line"><span class="comment"> *          函数也是对象类型……</span></span><br><span class="line"><span class="comment"> *      1, 所有的函数数据类型都天生自带一个属性叫prototype(原型), 这个属性的值是一个对象，浏览器会默认给它开辟一个堆内存;</span></span><br><span class="line"><span class="comment"> *      2, 浏览器给prototype开辟的堆内存当中，有一个天生自带的属性，叫constructor,这个属性存储的值是当前这个函数本身；</span></span><br><span class="line"><span class="comment"> *      3, 每一个对象都有一个_proto_的属性，这个属性指向当前实例所属类的prototype（如果不能确定是谁的实例，都是Object的实例）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">this</span>.AA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AA私有'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.BB = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'BB私有'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">Fn.prototype.AA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'AA公有'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fn;</span><br><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> Fn;</span><br><span class="line"><span class="built_in">console</span>.log(f1.n); <span class="comment">// undefined 没有这个属性</span></span><br><span class="line"><span class="comment">// f1._proto_.AA === f2._proto_.AA = Fn.prototype.AA // TRUE</span></span><br><span class="line">f1.name = <span class="string">'f1的私有属性'</span>;</span><br><span class="line">f1._proto_.name = <span class="string">'f1原型上的公有属性'</span>; <span class="comment">// 每个实例都可以用这个公有属性</span></span><br></pre></td></tr></table></figure></p><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">x, y, a</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// arguments：函数内置的实参集合，不管是否设置实参，都存在；但是在非严格Js模式下，函数中的形参变量和arguments存在映射机制（映射：相互之间影响）</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line">a = b(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 函数b并没有return,默认函数的返回值是undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3,10，undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *  形参： x=10, y=undefined // y也是私有变量，赋值为undefined</span></span><br><span class="line"><span class="comment">     *  arg和形参之间的映射关系是以arg的索引为基础完成的，arg中有这个索引，浏览器会完成与对应的形参变量中的映射机制搭建，如果形参比arg中个数多，那么多出来的形参是无法和arg中对应的索引形成映射关系的。</span></span><br><span class="line"><span class="comment">     映射机制在一开始就会建立</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(arg);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    arg[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x); <span class="comment">// 100</span></span><br><span class="line">    arg[<span class="number">1</span>] = <span class="number">200</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(y); <span class="comment">// undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line">fn(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS严格模式，在当前作用域的第一行加上 "use strict"即可，这样在当前作用域中，就开启了Js的严格模式</span></span><br><span class="line"><span class="comment">// "use strict"; // 整个Js都开启了严格模式，只对当前这个JS文件中的代码生效，下一个JS文件需要开启严格模式，第一行还是需要再次编写use strict; 真实项目中我们一般都会把JS文件合并压缩成一个导入页面</span></span><br><span class="line"><span class="comment">/*function fn() &#123;</span></span><br><span class="line"><span class="comment">    "use strict"; // 只在当前作用中使用严格模式</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 严格模式下不支持arguments.callee/arguments.callee.caller</span></span><br><span class="line"><span class="comment">// 2. 严格模式下arguments和形参没有映射机制</span></span><br><span class="line"><span class="comment">// 3. 严格模式下不允许给一个对象设置重复属性名的</span></span><br><span class="line"><span class="comment">// 4. 严格模式下函数执行，如果没有明确指定执行的主体（函数前面没有点.,不再像非严格模式下指向window,而是让this指向undefined,代表没有执行主体）严格模式下有执行主体，this就是谁，没有执行主体，就是undefined.</span></span><br><span class="line">~ <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    fn(<span class="number">10</span>); <span class="comment">//10</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        n: <span class="number">10</span>,</span><br><span class="line">        n: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.n);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">~ <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    fn(<span class="number">10</span>); <span class="comment">//100</span></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑与&amp;&amp;,逻辑或||</span></span><br><span class="line"><span class="comment">//1.在条件判断当中 if(1===1 &amp;&amp; 2===2)</span></span><br><span class="line"><span class="comment">//2.在赋值操作中，有时也会用到； var a=1 || 2; 首先验证1是真假，如果为真，1赋值给a,反之，将2赋值给a;</span></span><br><span class="line"><span class="comment">//      var b=1 &amp;&amp; 2; 先验证1的真假，为真，结果是2,反之，将1赋值给b</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//验证传递的参数值，如果没有传递实参，让其默认值为零；</span></span><br><span class="line">    x = x || <span class="number">0</span>; <span class="comment">// 这种赋值方式并不严谨，x传值为false时，依然赋值0;但是项目中却非常常用，因为简单。</span></span><br><span class="line">    y = y || <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* if(typeof callback==='function')&#123;</span></span><br><span class="line"><span class="comment">         callback();</span></span><br><span class="line"><span class="comment">     &#125;*/</span></span><br><span class="line">    callback &amp;&amp; callback(); <span class="comment">//上面if判断的简写版：默认callback要不然传函数，要不然就不传</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.逻辑与和逻辑或的混合模式 </span></span><br><span class="line"><span class="comment">// 优先级： 逻辑与的优先级高于逻辑或</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//0 || 1 &amp;&amp; 2 || 2 &amp;&amp; 0 = 1 || 2 || 0 = 1</span></span><br><span class="line"><span class="comment">//4.逻辑或的实战应用：形参赋值默认值（初始化形参）</span></span><br><span class="line"><span class="comment">//在ES6新语法规范中可以直接给形参设置默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果x没有传递值，默认值是零，一旦传递值，不管传递的是啥，都是按照传递的值处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5 5 6 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b + a++; <span class="comment">// b + a之后a自身再累加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(fn()(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">ary</span>) </span>&#123; <span class="comment">//传递进来的堆内存地址相同，所以第一步修改的是同一个堆内存中的ary[0]</span></span><br><span class="line">    ary[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// </span></span><br><span class="line">    ary = [<span class="number">0</span>]; <span class="comment">// 修改了堆内存地址，与外部的已经不是同一个堆内存</span></span><br><span class="line">    ary[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> ary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = fn(ary);</span><br><span class="line"><span class="built_in">console</span>.log(ary);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n + i++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn(<span class="number">10</span>);</span><br><span class="line">f(<span class="number">20</span>);</span><br><span class="line">fn(<span class="number">20</span>)(<span class="number">40</span>);</span><br><span class="line">fn(<span class="number">30</span>)(<span class="number">50</span>);</span><br><span class="line">f(<span class="number">30</span>);</span><br><span class="line"><span class="comment">// 30,60,80,41</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n + (++i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line">f(<span class="number">20</span>);</span><br><span class="line">fn()(<span class="number">20</span>);</span><br><span class="line">fn()(<span class="number">30</span>);</span><br><span class="line">f(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 31,32,43,44</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  1 和 new Number&#123;1&#125;</span></span><br><span class="line"><span class="comment"> *  区别：</span></span><br><span class="line"><span class="comment"> *       前面是基本数据类型，后面是引用数据类型值</span></span><br><span class="line"><span class="comment"> *  相同点：</span></span><br><span class="line"><span class="comment"> *      都是Number类的实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   函数类型：</span></span><br><span class="line"><span class="comment"> *       普通函数</span></span><br><span class="line"><span class="comment"> *       构造函数（类：内置类和自己创建的类）</span></span><br><span class="line"><span class="comment"> *   对象类型：</span></span><br><span class="line"><span class="comment"> *       普通对象</span></span><br><span class="line"><span class="comment"> *       Math\Json</span></span><br><span class="line"><span class="comment"> *       类的实例（数组、正则、日期等）</span></span><br><span class="line"><span class="comment"> *       prototype或者_proto_</span></span><br><span class="line"><span class="comment"> *       arguments或者元素集合等类数组</span></span><br><span class="line"><span class="comment"> *       函数也是一种对象</span></span><br><span class="line"><span class="comment"> *       -&gt; 万物皆对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  1. 每一个函数（类）都有一个prototype（原型）属性，属性值是一个对象，这个对象中存储了供实例调取和使用的公有属性和方法；</span></span><br><span class="line"><span class="comment"> *  2. 在浏览器默认给原型prototype开辟的堆内存中，有一个属性叫constructor,存储的是当前类的函数；</span></span><br><span class="line"><span class="comment"> *  3. 每一个对象（实例）都有一个_proto_（原型链）属性，这个属性指向当前实例所属类的原型（不确定所属的类，都指向Object.prototype）。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">this</span>.y = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">this</span>.getX = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.getX = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.getY = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1=<span class="keyword">new</span> Fn();</span><br><span class="line"><span class="keyword">var</span> f2= <span class="keyword">new</span> Fn();</span><br></pre></td></tr></table></figure><p><img src="/2019/04/02/Javascript基础知识二/3.bmp" alt="Alert Image"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1 为啥不行？</span></span><br><span class="line"><span class="comment"> *   事件绑定是异步编程，当触发点击行为，绑定的方法执行的时候，外层循环已经结束；方法执行产生私有作用域，用到的变量i不是私有变量，按照作用域查找机制，找到的是全局变量i（此时全局的i已经成为循环最后一次的结果）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  2 如何解决</span></span><br><span class="line"><span class="comment"> *      自定义属性</span></span><br><span class="line"><span class="comment"> *      闭包</span></span><br><span class="line"><span class="comment"> *      ES6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"><span class="keyword">var</span> btnList = box.getElementsByTagName(<span class="string">'button'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btnList.length; i++) &#123;</span><br><span class="line">    btnList[i].onclick = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每一轮循环都执行自执行函数，形成一个私有作用域（不销毁），里面设定一个私有变量i，让存储后期需要用到的索引</span></span><br><span class="line"><span class="comment">// 点击触发方法执行，用到变量i，向对应的上级作用域查找i的值，而上级作用域中存储的i就是我们需要的索引</span></span><br><span class="line"><span class="comment">// 基于闭包解决非常占用内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6和闭包的机制类似，ES6中使用let创建变量，会形成块级作用域，当前案例中，每一轮循环都会形成一个块级作用域，把后续需要用到的索引i存储到自己的作用域中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;btnList.length;i++)&#123;</span><br><span class="line">    btnList[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你以为你以为的就是你以为的</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">'language'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    fullName: <span class="string">'javascript'</span>,</span><br><span class="line">    prop: &#123;</span><br><span class="line">        getFullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.fullName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.prop.getFullName()); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> test = obj.prop.getFullName;</span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// language</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在实际项目中，基于面向对象开发的时候（构造原型设计模式），我们根据需要，很多时候会重定向类的原型（让类的原型指向自己开辟的堆内存）</span></span><br><span class="line"><span class="comment"> * 【存在的问题】</span></span><br><span class="line"><span class="comment"> *   1,自己开辟的堆内存中没有constructor属性，导致类的原型构造函数缺失</span></span><br><span class="line"><span class="comment"> *      解决方案：自己手动在堆内存中增加constructor属性</span></span><br><span class="line"><span class="comment"> *   2,当原型重定向后，浏览器默认开辟的堆内存会被释放掉，如果原来已经存储了一些属性和方法，这些东西都会丢失</span></span><br><span class="line"><span class="comment"> *      所以内置类的原型不允许重定向到自己开辟的堆内存中，因为内置类的原型上自带了很多属性和方法，重定向后都没了，这样是不被允许的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 在原型上批量开发方法的时候，使用原型重定向</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Fn,</span><br><span class="line">    aa: 12,</span><br><span class="line">    bb: 13,</span><br><span class="line">    cc: 14</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function fun() &#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fun.prototype = &#123;</span><br><span class="line">    b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;,</span><br><span class="line">    c: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="number">30</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> my_fun = <span class="keyword">new</span> fun();</span><br><span class="line">my_fun.b(); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(my_fun.a);</span><br><span class="line">my_fun.c(); <span class="comment">//my_fun._proto_.c // 30</span></span><br><span class="line"><span class="built_in">console</span>.log(my_fun.a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有属性：自己堆内存中存储的属性相对自己来说是私有的</span></span><br><span class="line"><span class="comment">// 公有属性：自己基于_proto_属性找到的属性相对自己来说是公有的</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>, <span class="number">34</span>, <span class="number">45</span>];</span><br><span class="line"><span class="comment">// 为啥ary.sort可以执行：因为sort是array.prototype上内置的属性方法，而ary是它的一个实例，可以基于_proto_找到原型上的这个方法，然后调取使用</span></span><br><span class="line">ary.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 基于内置类的原型扩展方法，供他的实例调取使用</span></span><br><span class="line"><span class="comment"> *   1. 我们增加的方法最好设置“my”前缀(前缀可以随便定义)，防止把内置方法重写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.kpUnique = <span class="function"><span class="keyword">function</span> <span class="title">kpUnique</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 方法中的this一般都是当前的实例，也就是我们要操作的数组</span></span><br><span class="line">    <span class="comment">// ary._proto_.kpUnique() IE浏览器中屏蔽了我们对_proto_的操作</span></span><br><span class="line">    <span class="comment">// Array.prototype.myUnique() ;// 这种方法极少使用</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> item = <span class="keyword">this</span>[i];</span><br><span class="line">        obj.hasOwnProperty(item) ? (<span class="keyword">this</span>[i] = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>], <span class="keyword">this</span>.length--, i--) : obj[item] = item;</span><br><span class="line">    &#125;;</span><br><span class="line">    obj = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*var a = ary.kpUnique(); // this:ary, 我们操作this相当于操作ary，方法执行完成，就会修改原数组</span></span><br><span class="line"><span class="comment">// 此时方法执行的返回值是undefined; 原数组改变</span></span><br><span class="line"><span class="comment">console.log(a);</span></span><br><span class="line"><span class="comment">console.log(ary);</span></span><br><span class="line"><span class="comment">// 执行sort返回的是排序后的数组，执行reverse()返回的也是数组，执行pop返回的是返回的那一项</span></span><br><span class="line"><span class="comment">ary.sort(function (a, b) &#123;</span></span><br><span class="line"><span class="comment">    return a - b;</span></span><br><span class="line"><span class="comment">&#125;).reverse().pop(); // js中的链式写法：保证每一个方法执行返回的依然是当前类的实例，这样就可以继续调取方法使用了。*/</span></span><br><span class="line"><span class="keyword">var</span> max = ary.kpUnique().sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">&#125;).pop();</span><br><span class="line"><span class="built_in">console</span>.log(ary);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// document.parentNode 和 document.parentnode的区别</span><br><span class="line"></span><br><span class="line">// 怎么规避多人开发函数重名问题</span><br><span class="line">使用单例模式规避</span><br><span class="line">把当前模块的属性和方法放在一个命名空间中（笔试的时候不要写太详细，阐述题不会表达可以手写代码）</span><br><span class="line"></span><br><span class="line">// javascript如何实现面向对象中的继承</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 你理解的闭包是什么，优缺点？</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要介绍的是变量的提升机制、面向对象、原型链等内容&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://abluecup.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript基础知识一</title>
    <link href="https://abluecup.github.io/2019/04/02/Javascript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%80/"/>
    <id>https://abluecup.github.io/2019/04/02/Javascript基础知识一/</id>
    <published>2019-04-02T03:19:50.000Z</published>
    <updated>2019-07-04T10:02:03.397Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript，通常缩写为JS，是一种高级的，解释执行的编程语言。 JavaScript是一门基于原型、函数先行的语言，是一门多范式的语言，它支持面向对象编程，命令式编程，以及函数式编程。 它提供语法来操控文本、数组、日期以及正则表达式等，不支持I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>javascript是轻量级的客户端脚本编程语言。</p><ol><li>编程语言<br>编程语言是具备一定逻辑的，拥有自己的编程思想（面向对象编程[oop]、 面向过程编程）（HTML + CSS是标记语言）<ul><li>面向对象编程<ul><li>java</li><li>c++</li><li>php</li><li>c# (.net)</li><li>js<br>..</li></ul></li><li>面向过程编程<ul><li>c<br>..</li></ul></li></ul></li></ol><ol start="2"><li><p>目前的JS已经不仅仅是客户端语言了，基于Node可以做服务器端程序，所以js是全栈编程语言</p></li><li><p>JS 包括三部分</p><ul><li>ECMAscript（ES） js语法核心</li><li>DOM document object model 文档对象模型， 提供各种API供js获取和操作html元素（dom元素）（见本页DOM及常用方法）</li><li>BOM brower object model 浏览器对象模型，提供各种API供js操作浏览器</li></ul></li></ol><h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><pre><code>它是Js的语法规划，JS中的变量、数据类型、语法规范、操作语句、设计模式等等都是ES规定的</code></pre><h3 id="变量-variable"><a href="#变量-variable" class="headerlink" title="变量(variable)"></a>变量(variable)</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><pre><code>它不是具体的值，只是一个用来存储具体值的容器或者代名词存储的值可以改变，所以称为变量基于ES语法规范，在js中创建变量有以下规范- var (ES3)- function (ES3) 创建函数（函数也是变量，只不过存储的值是函数类型而已）- let (ES6)- const (ES6) 创建常量- import (ES6) 基于ES6的模块规范导出需要的信息- class (ES6) 基于ES6创建类</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  *语法： var [变量名] = 值;  /  </span><br><span class="line">  *let [变量名] = 值;  / </span><br><span class="line">  *const [变量名] = 值;</span><br><span class="line">  *function 函数名()&#123;&#125;</span><br><span class="line">**/</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">var n = 13;</span><br><span class="line">n = 15;</span><br><span class="line"></span><br><span class="line">const m = 100;</span><br></pre></td></tr></table></figure><h4 id="创建变量的命名规范"><a href="#创建变量的命名规范" class="headerlink" title="创建变量的命名规范"></a>创建变量的命名规范</h4><ul><li>严格区分大小写</li><li>遵循驼峰命名法：按照数字、字母、下划线命名，数字不能作为开头，命名基于英文单词，拼写成一个完整的名字（第一个单词字母小写，其余每一个有意义的单词首字母大写）</li><li>语义化强一些 </li><li>不能使用关键字和保留字： 在js中有特殊含义的叫关键字，未来可能成为关键字的叫做保留字</li></ul><hr><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据值是一门编程语言进行生产的材料。JS中包含的值有一下数据类型：<br>1, 基本数据类型 （值）</p><pre><code>+ 数字 number+ 字符串 string+ 布尔值 boolean+ null+ undefined</code></pre><p>2, 引用数据类型</p><pre><code>+ 对象object    + 普通对象    + 数组对象    + 正则对象    + 日期对象    + ...+ 函数 function</code></pre><p>3, ES6中新增加的一个特殊的数据类型Symbol(唯一的值)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[基本数据类型]</span><br><span class="line">    数字类型中有一个特殊的值，叫 NaN (not a number 代表不是一个有效的数字，但是属于number类型)</span><br><span class="line">    JS中所有用单引号或者双引号包裹起来的都是字符串，里面的内容是当前字符串中的字符（一个字符串由0到多个字符自称）</span><br><span class="line">    boolean: true false</span><br><span class="line"></span><br><span class="line">[引用数据类型]</span><br><span class="line">var o=&#123;name: &apos;name&apos;, age: 9&#125; =&gt; 普通对象 由大括号包裹起来，里面包含多组属性名和属性值（包含多组键值对） &#123;&#125; 空对象</span><br><span class="line"></span><br><span class="line">var array = [1,2,3]; // =&gt; 中括号包裹起来， 包含零到多项内容，这种是数组对象 []空数组</span><br><span class="line"></span><br><span class="line">var reg = /-?(d|[1-9]\d+))(\.\d+)?/g; /=&gt; 由元字符组成一个完整的正则  //不是空正则 当行注释 ^=^</span><br><span class="line"></span><br><span class="line">function fn()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[Symbol] </span><br><span class="line">    创建出来的是一个唯一的值</span><br><span class="line">    var a = Symbol(&apos;珠峰&apos;);</span><br><span class="line">    var b = Symbol(&apos;珠峰&apos;);</span><br><span class="line">    a==b =&gt; false; </span><br><span class="line">    const a = Symbol(&apos;flag&apos;); a 是唯一且不能改变的量</span><br></pre></td></tr></table></figure><ul><li>扩展： JS代码如何运行以及运行后如何输出结果<br>[如何被运行] </li></ul><ul><li>把代码运行在浏览器中，浏览器内核来渲染解析；</li><li>基于Node来运行（Node也是基于V8引擎渲染和解析JS的工具)</li></ul><p>[如何输出结果]</p><ul><li>alert： 在浏览器中通过弹框的方式输出（浏览器提示框）；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert();// =&gt; window.alert()</span><br><span class="line">alert(1+1) =&gt; &apos;2&apos; 基于alert输出的结果都会转换成字符串：把值（如果是表达式先计算出结果）通过toString()这个方法转化成字符串，然后再输出</span><br><span class="line">alert([12,23]) =&gt; &quot;12,23&quot;</span><br><span class="line">alert(&#123;name:&apos;xx&apos;&#125;) =&gt; &apos;[object Object]&apos;</span><br><span class="line"> 对象.toString()结果是[object Object]</span><br></pre></td></tr></table></figure><ul><li>confirm 和alert用法一致，只不过提示的框中有确定和取消两个按钮，所以它是确认提示框</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var flag = confirm(&apos;确定要退出吗&apos;);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">        // 用户点击的是确定按钮</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    //用户点击的取消按钮</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>prompt 在confirm的基础上增加输入框</p></li><li><p>console.log :在浏览器控制台输出日志<br>控制台简介：</p></li></ul><ul><li>Elements: 当前页面中的元素和样式在这里都可以看见，还可以调节样式修改结构等；</li><li>Console: 控制台 可以在JS代码中通过.log输出到这里，也可以在这里直接编写JS代码；</li><li>Source: 当前网站的源文件都在这里</li><li>……</li></ul><ul><li>console.dir 比log的输出更详细（尤其是输出对象数据值的时候）</li><li>console.table: 把一个JSON数据按照表格的方式输出<br>.. (更多的console输出方法)</li></ul><hr><h3 id="数据类型的详细剖析"><a href="#数据类型的详细剖析" class="headerlink" title="数据类型的详细剖析"></a>数据类型的详细剖析</h3><h4 id="number数字类型"><a href="#number数字类型" class="headerlink" title="number数字类型"></a>number数字类型</h4><p>NaN： not a number， 但它是数字类型<br>isNaN: 检测当前值是否不是有效数字，返回true 代表不是有效数字，返回false代表是有效数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">isNaN([value])</span><br><span class="line">isNaN(&apos;13&apos;) =&gt; false</span><br><span class="line">isNaN(&apos;AA&apos;) =&gt; true</span><br><span class="line">isNaN(true) =&gt; false</span><br><span class="line">isNaN(false) =&gt; false</span><br><span class="line">isNaN(null) =&gt; false</span><br><span class="line">isNaN(undefined) =&gt; true</span><br><span class="line">isNaN(&#123;age:9&#125;) =&gt; true</span><br><span class="line">isNaN([12,23]) =&gt; true</span><br><span class="line">isNaN([12]) =&gt; false</span><br><span class="line">isNaN(/DS/) =&gt; true</span><br><span class="line">isNaN(function()&#123;&#125;) =&gt; true</span><br><span class="line"></span><br><span class="line">重要： isNaN检测的机制</span><br><span class="line">1、首先验证当前要检测的值是否为数字类型的值，如果不是，浏览器会默认的把值转换为数字类型；</span><br><span class="line">    把非数字类型转化为数字</span><br><span class="line">    -其他基本类型转换为数字： 直接使用Number这个方法；</span><br><span class="line">    </span><br><span class="line">        [字符串转化为数字] 如果当前字符串中出现任意一个非有效数字字符，结果为NaN</span><br><span class="line">            Number(&apos;13&apos;) =&gt; 13 </span><br><span class="line">            Number(&apos;13a&apos;) =&gt; NaN</span><br><span class="line">            Number(&apos;13.5&apos;) =&gt; 13.5 可以识别小数点</span><br><span class="line">        [布尔转数字]</span><br><span class="line">            Number(true) =&gt; 1</span><br><span class="line">            Number(false) =&gt; 0</span><br><span class="line">        [其他]</span><br><span class="line">            Number(null) =&gt; 0</span><br><span class="line">            Number(undefined) =&gt; NaN</span><br><span class="line">    - 把引用数据类型值转换为数字： 先把引用值调取toString转化为字符串，然后把字符串调取Number转化为数字</span><br><span class="line">    Number(&apos;&apos;) =&gt; 0</span><br><span class="line">    ([]).toString =&gt; &apos;&apos;;</span><br><span class="line">    isNaN([]) =&gt; false</span><br><span class="line">        </span><br><span class="line">2、当前检测的值已经是数字类型，是有效数字返回false,不是返回true  (数字类型中只有NaN不是有效数字，其余都是有效数字)</span><br></pre></td></tr></table></figure></p><ol start="2"><li>parseInt parseFloat<blockquote><p>等同于Number,也是为了把其他值转化为数字类型<br>和Number的区别在于字符串转换分析上<br>Number出现任意非有效字符，即为NaN<br>parseInt: 把一个字符串中的整数部分解析出来<br>parseFloat: 把一个字符串中的小数（浮点数）解析出来</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&apos;13.5px&apos;) =&gt; 13</span><br><span class="line">parseFloat(&apos;13.5px&apos;) = 13.5</span><br><span class="line">parseInt(&apos;w13.5&apos;) =&gt; NaN</span><br><span class="line"></span><br><span class="line">parseInt从字符串最左边字符开始查找有效数字字符，并且转化为数字，但是一旦遇到非有效数字字符，查找结束</span><br><span class="line">parseFloat多识别一个字符. parseFloat(&apos;.2p&apos;) =&gt; 0.2</span><br></pre></td></tr></table></figure><ol start="3"><li>NaN的比较<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(NaN == NaN) =&gt; false NaN和谁都不相等，包括和自己也不相等</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ol><p>思考题： 有一个变量，存储的值不知道，我想检测它是否为一个有效数字，下面的方案是否可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(Number(num) == NaN)&#123; // 条件永远不成立</span><br><span class="line">    alert(&quot;num不是有效数字&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只有一种方案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(isNaN(num))&#123;</span><br><span class="line">    alert(&quot;num不是有效数字&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(typeof num === &quot;number&quot; &amp;&amp; !isNaN(num))&#123;</span><br><span class="line">    console.log(&quot;num是有效数字类型值&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><blockquote><p>只有两个值 true/false<br>如何把其他类型转化为布尔类型</p><ul><li>Boolean<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Boolean(1) =&gt; true</span><br><span class="line">Boolean(0) =&gt; false</span><br><span class="line">数字类型值里面只有0和NaN是false,其余都是true</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>!</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!&apos;st&apos; 非、取反，先把其他数据类型转化为布尔类型，然后取反</span><br></pre></td></tr></table></figure></li><li><p>!!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">否定之否定，肯定</span><br></pre></td></tr></table></figure></li></ul><p>规律  <code>在js中只有 0 null undefined NaN 空字符串 转化为布尔类型的false,其余都转化为true</code><br>“ “不是空字符串，转化为boolean类型值是true<br>Number(“”)值为0， Number(“ “)的值也为0.</p><h3 id="null-amp-undefined"><a href="#null-amp-undefined" class="headerlink" title="null &amp; undefined"></a>null &amp; undefined</h3><blockquote><p>都代表空<br>null ：空对象指针<br>undefined ：未定义</p></blockquote><p>null 一般是意料之中的没有（通俗理解都是认为手动的设置为null, 后面的程序中我们会再次给它赋值）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var num = null; // =&gt;null 是手动赋值的, 预示着我会把num变量的值修改</span><br></pre></td></tr></table></figure></p><p>undefined 代表着没有，一般都不是人为控制的，大部分都是浏览器自主为空，后面可以赋值，也可以不赋值；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num;</span><br><span class="line">// 此时num会被浏览器分配一个值 undefined, 后面可以赋值，也可以不赋值</span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>其他数据类型转化为string类型<code>().toString()</code></p><ul><li>基本数据类型转化为string类型，直接使用引号包裹住字符；</li><li>引用类型转化为string类型<br>  function(){} 直接使用引号包裹<br>  普通对象， [object Object]<br>  数组  [] =&gt; ‘’; [12] =&gt; ‘12’; [12,23] =&gt; ‘12, 23’;<br>  正则对象，日期对象，直接使用引号包裹；</li></ul><hr><h3 id="object对象数据类型"><a href="#object对象数据类型" class="headerlink" title="object对象数据类型"></a>object对象数据类型</h3><p>分为四类</p><h4 id="普通对象"><a href="#普通对象" class="headerlink" title="普通对象"></a>普通对象</h4><pre><code>特点  - 由大括号包裹起来；- 由0到多组属性名和属性值（键值对）组成；</code></pre><p>属性是用来描述当前对象特征的，属性值是对这个特征的描述；(属性：键[key] 属性值：值[value])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    name: &apos;kyle&apos;,</span><br><span class="line">    age: 9</span><br><span class="line">&#125;</span><br><span class="line">// 对象的操作：对键值对的增删改查</span><br><span class="line">[获取] </span><br><span class="line">语法： 对象.属性名 / 对象[属性名]</span><br><span class="line">obj.name</span><br><span class="line">obj[&apos;name&apos;] 一般来说属性名都是字符串格式，属性值不固定，任何格式都可以</span><br><span class="line"></span><br><span class="line">[增/改]</span><br><span class="line">js对象中属性名是不允许重复的，是唯一的。</span><br><span class="line">obj.name = &apos;xxx&apos;;// 原有对象中存在name属性，此处是修改属性值</span><br><span class="line">obj.sex = &apos;man&apos;; // 原对象中不存在sex属性，此处是新增属性</span><br><span class="line">obj[&apos;age&apos;] = 12;</span><br><span class="line"></span><br><span class="line">[删]</span><br><span class="line">彻底删除</span><br><span class="line">delete obj.age // delete obj[&apos;age&apos;] 对象中不存在age属性了</span><br><span class="line">假删除：并没有移除属性，只是让当前属性的值为空</span><br><span class="line">obj.sex = null;// obj[&apos;sex] = null;</span><br><span class="line">obj.class // undefined;</span><br><span class="line">在获取属性值的时候，如果当前对象有这个属性名，可以正常取值(哪怕是null),但是如果没有这个属性名，则获取的值是undefined</span><br><span class="line"></span><br><span class="line">var obj = &#123;name:&apos;kyle&apos;, age: 9&#125;</span><br><span class="line">var name = &apos;peng&apos;;</span><br><span class="line">obj.name =&gt; &apos;kyle;</span><br><span class="line">obj[&apos;name&apos;] =&gt; &apos;kyle&apos;;</span><br><span class="line">obj[name] =&gt; undefined; 此处的name是一个变量，我们要获取的并不是属性名叫name,而是储存在name中的值 &apos;peng&apos;;</span><br></pre></td></tr></table></figure></p><p>一个对象中的属性名不仅仅是字符串格式，还有可能是数字格式,遇到其他格式的先转化为字符串格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chrome控制台下shift+enter换行</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'kyle'</span>,</span><br><span class="line">    <span class="number">0</span>:<span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字格式用obj[0]和obj['0'],但是不能用obj.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SyntaxError 语法错误</span></span><br></pre></td></tr></table></figure><p>当我们存储的属性名不是字符串也不是数字格式时，会调用.toString()转化为字符串格式后，再进行存储 null undefined boolean 引用类型都可以先转化为字符串再储存值<br>obj[{}] = 300; obj = {‘[object Object]’:300}, 获取的时候也是先把{}转化为字符串，然后再获取值</p><hr><h4 id="数组对象（对象由键值对组成）"><a href="#数组对象（对象由键值对组成）" class="headerlink" title="数组对象（对象由键值对组成）"></a>数组对象（对象由键值对组成）</h4><p>var oo = {a:12}<br>var ary=[12,23];//=&gt; 12,23都是属性值，属性名呢？<br>通过观察结果：数组对象的属性名是数字，我们把数字属性名成为当前对象的索引。<br>ary[0], ary[‘0’]</p><p>数组和对象的关系： 数组是一种特殊的对象，属性名是数字</p><hr><h4 id="浅分析js的运行机制"><a href="#浅分析js的运行机制" class="headerlink" title="浅分析js的运行机制"></a>浅分析js的运行机制</h4><p>1、当浏览器(他的内核/引擎)解析和渲染JS的时候，会提供一个供JS代码运行的环境，我们把这个环境称为全局作用域(global scope);<br>2、代码自上而下执行（之前还有一个变量提升阶段）<br>    =&gt;基本数据类型的值会存储在当前作用域下<br>    var a =12; 有三步操作<br>    1）在当前环境下开辟一个空间存储12；<br>    2）声明一个变量名 a;<br>    3) 把声明的变量和值关联起来，赋值操作叫做定义<br>    var b=a; 基本数据类型值也叫值类型，是按照值来操作的：把原有的值复制一份放到新的空间或位置上，和原来的值没有关系.<br>    1) 在当前环境下开辟一个空间存储12；<br>    2） 声明变量 b<br>    3) b 和 12 关联； a 和 b 没有关系；<br>    b =23<br>    1) 开辟空间存储13;<br>    2) b和13关联<br>    变量和基本类型数据是一一对应关系；<br>    =&gt; 引用数据类型的值不能存储在当前的作用域下，因为可能存储的内容过于复杂，我们需要先开辟一个新的空间，把内容存储到这个空间中<br>    1）开辟一个新的空间，把对象中的键值对依次存储起来（为了保证后面可以找到这个空间，此空间有一个16进制的地址）<br>    2）声明一个变量<br>    3）让变量和空间地址关联在一起（把空间的地址赋值给变量）<br>    引用类型不是按值操作，是按照引用的地址操作：把原来空间的地址赋值给新的变量，但是原来的空间没有被克隆。这样就会出现多个变量关联的是同一个空间，相互之间就会存在影响。</p><hr><p>作用域叫栈内存，存储引用类型数据值的叫堆内存<br>栈内存：本身就是供JS代码执行的环境，所有的基本类型值都会直接在栈内存中开辟一个位置；<br>堆内存：独立于栈内存的内存，存储引用类型中的数据值；对象存储的键值对，函数存储的是代码字符串</p><hr><h3 id="隔三行变色"><a href="#隔三行变色" class="headerlink" title="隔三行变色"></a>隔三行变色</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!Doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="undefined">margin: 20px auto;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="undefined">line-height: 35px;</span></span><br><span class="line"><span class="undefined">padding: 0 5px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">dash</span> <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">text-overflow: ellipsis;</span></span><br><span class="line"><span class="undefined">white-space: nowrap;</span></span><br><span class="line"><span class="undefined">overflow: hidden;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.bg0</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:pink</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.bg1</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:lightGreen</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.bg2</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:lightBlue</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.hover</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: orange;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>剴；开放日哦个人头<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>jk;;;ssd<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>受到攻击；哦哦人啊个今儿个‘<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>地方igoerg'e'a'eanj；反对党哦【思伽尔和<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>让他脚痛医脚他已经对方如何【&gt;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>kl;'df 梵蒂冈阿尔贡哦哦人啊个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// var oBox = document.getElementById("box");</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//var oList = oBox.getElementsByTagName("li");</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//console.log(oList);</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//var arr = ['red', 'green', 'blue'], n;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//for(var i=0;i&lt;oList.length; i++)&#123;</span></span></span><br><span class="line"><span class="undefined">/**n = i % 3;</span></span><br><span class="line"><span class="undefined">oList[i].style.backgroundColor = arr[n];*/</span></span><br><span class="line"><span class="javascript"><span class="comment">//oList[i].className = 'bg' + i%3;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// oList[i].style.backgroundColor = i%3 == 0 ? 'lightBlue' : (i % 3 == 1 ? 'lightGreen': 'red');</span></span></span><br><span class="line"><span class="javascript"><span class="comment">////&#125;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oList = oBox.getElementsByTagName(<span class="string">"li"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arr = [<span class="string">'pink'</span>,<span class="string">'lightGreen'</span>,<span class="string">'lightBlue'</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;oList.length; i++)&#123;</span></span><br><span class="line"><span class="undefined">oList[i].style.backgroundColor = arr[i % 3];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//oList[i].</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">changeColor2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oList = oBox.getElementsByTagName(<span class="string">"li"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arr = [<span class="string">'pink'</span>, <span class="string">'lightBlue'</span>, <span class="string">'lightGreen'</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; oList.length;i++)&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(!(i % <span class="number">3</span>))&#123;</span></span><br><span class="line"><span class="javascript">oList[i].style.backgroundColor=<span class="string">'lightBlue'</span>;</span></span><br><span class="line"><span class="javascript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(i%<span class="number">3</span> == <span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="javascript">oList[i].style.backgroundColor=<span class="string">'lightGreen'</span>;</span></span><br><span class="line"><span class="javascript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">oList[i].style.backgroundColor=<span class="string">'pink'</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">changeColor3</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 每次循环一组，但是会出现当前这一组不够三个，这样会报错</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oList = oBox.getElementsByTagName(<span class="string">"li"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;oList.length;i+=<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="javascript">oList[i].style.backgroundColor = <span class="string">'red'</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">// if(i+1 &lt;= oList.length -1;)</span></span></span><br><span class="line"><span class="javascript">oList[i+<span class="number">1</span>].style.backgroundColor = <span class="string">'green'</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">// if(i+2 &lt;= oList.length - 2)</span></span></span><br><span class="line"><span class="javascript">oList[i+<span class="number">2</span>].style.backgroundColor = <span class="string">'blue'</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> changeColor();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">/**</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">三种方案：</span></span><br><span class="line"><span class="undefined">1. 依次遍历每一个Li，通过索引除3的余数，设置当前行的样式；</span></span><br><span class="line"><span class="undefined">2.</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">*/</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">highLight</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oList = oBox.getElementsByTagName(<span class="string">"li"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arr = [<span class="string">'red'</span>, <span class="string">'green'</span>,<span class="string">'blue'</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arr1 = [<span class="string">'pink'</span>,<span class="string">'lightGreen'</span>,<span class="string">'lightBlue'</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> n;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;oList.length;i++)&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//n = i % 3;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//console.log(n);</span></span></span><br><span class="line"><span class="javascript">oList[i].myIndex = i;<span class="comment">// 每一次循环的时候都给每一,个li设置一个自定义属性，属性值存储的是当前li的索引</span></span></span><br><span class="line"><span class="javascript">oList[i].addEventListener(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 有回调函数，一般是异步执行，放在任务队列里</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.style.background = arr[<span class="keyword">this</span>.myIndex % <span class="number">3</span>];</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="javascript">oList[i].addEventListener(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.style.background = arr1[<span class="keyword">this</span>.myIndex % <span class="number">3</span>];</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 绑定方法的时候，还没有执行，存储的是字符串,当循环结束，我们手动去操作li的时候，方法才会才会执行，此时changTab(i)的变量i 已经是3了</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// css 优先级： 行内，ID，样式类，标签</span></span></span><br><span class="line"><span class="undefined">highLight();</span></span><br><span class="line"><span class="undefined">/***</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">css 我们把hover 放在bg的后面，当元素的<span class="class"><span class="keyword">class</span></span>=<span class="string">"bg hover"</span>的时候，元素呈现hover的样式</span></span><br><span class="line"><span class="undefined">鼠标滑过，新增样式类hover,</span></span><br><span class="line"><span class="undefined">鼠标离开，把新增的样式类移除</span></span><br><span class="line"><span class="undefined">**/</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JS中的数据类型转换"><a href="#JS中的数据类型转换" class="headerlink" title="JS中的数据类型转换"></a>JS中的数据类型转换</h2><h3 id="JS中的数据类型"><a href="#JS中的数据类型" class="headerlink" title="JS中的数据类型"></a>JS中的数据类型</h3><p>【基本数据类型】</p><ol><li>数字 number</li><li>字符转 string</li><li>boolean</li><li>null</li><li>undefined</li></ol><p>[引用类型数据]</p><ul><li>对象<br>  普通对象<br>  数组对象<br>  正则对象<br>  日期对象<br>  数学对象<br>  …</li><li>函数 function</li></ul><p>真实项目中，根据需求，我们往往需要把数据类型之间进行转换（规则和规则之间是相互独立的）</p><h3 id="把其他数据类型转化为number类型"><a href="#把其他数据类型转化为number类型" class="headerlink" title="把其他数据类型转化为number类型"></a>把其他数据类型转化为number类型</h3><p><strong>1. 发生的情况</strong></p><ul><li>isNaN检测的时候，当检测的值不是数字类型，浏览器会自己调用Number方法把它转化为数字类型，然后再检测是否为非数字；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="string">'3'</span>) =&gt; <span class="literal">false</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'3'</span>) =&gt; <span class="number">3</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="number">3</span>)=&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>基于parseInt / parseFloat 去手动转化为数字；</li><li><p>数学运算 + - * / (+ 不仅仅是数学运算，还可能是字符串拼接)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">-1</span> =&gt; <span class="number">2</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">3</span>) =&gt; <span class="number">3</span></span><br><span class="line"><span class="string">'3PX -1'</span> =&gt; <span class="literal">NaN</span></span><br><span class="line"><span class="string">'3PX'</span> + <span class="number">1</span> =&gt; <span class="number">3</span>PX1</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="string">'3'</span>;</span><br><span class="line">i+<span class="number">1</span> =&gt; <span class="string">'31'</span></span><br><span class="line">i += <span class="number">1</span> =&gt; <span class="string">'31'</span></span><br><span class="line">i++ =&gt; <span class="number">4</span> i++就是单纯的数学运算，已经摒弃掉字符串拼接的规则</span><br></pre></td></tr></table></figure></li><li><p>基于 “==” 比较的时候，有时候也会把其他值转化为数字类型</p></li><li>…</li></ul><p><strong> 2. 转化规律 </strong></p><p>//=》 转换的方法： Number(浏览器自行转换都是基于这个方法完成的)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">【把字符串转化为数字】</span><br><span class="line">只要遇到一个非有效数字，结果就是<span class="literal">NaN</span>; <span class="string">''</span>变成数字类型是<span class="number">0</span></span><br><span class="line"><span class="string">' '</span>=&gt; <span class="number">0</span>;</span><br><span class="line"><span class="string">'   '</span>=&gt;<span class="number">0</span>;</span><br><span class="line"><span class="string">'\n'</span> =&gt; <span class="number">0</span>; 换行符（多个空格）</span><br><span class="line"><span class="string">'\t'</span> =&gt; <span class="number">0</span>; 制表符（一个tab键是四个空格）</span><br><span class="line"></span><br><span class="line">【布尔类型】</span><br><span class="line"><span class="literal">true</span> =&gt; <span class="number">1</span></span><br><span class="line"><span class="literal">false</span> =&gt; <span class="number">0</span>;</span><br><span class="line">[把没有转换为数字]</span><br><span class="line"><span class="literal">null</span> =&gt; <span class="number">0</span>;</span><br><span class="line"><span class="literal">undefined</span> =&gt; <span class="literal">NaN</span></span><br><span class="line"></span><br><span class="line">[引用类型转换为数字]</span><br><span class="line">首先转换为字符串（toString()）,然后再转换为数字（<span class="built_in">Number</span>）</span><br></pre></td></tr></table></figure><h3 id="把其他类型值转换为字符串"><a href="#把其他类型值转换为字符串" class="headerlink" title="把其他类型值转换为字符串"></a>把其他类型值转换为字符串</h3><p><strong>1. 发生的情况</strong></p><ul><li><p>基于alert / confirm / prompt /document.write等方法输出内容的时候，会把输出的值转换为字符串，然后再输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span>) =&gt; <span class="string">'1'</span></span><br></pre></td></tr></table></figure></li><li><p>基于 + 进行字符串拼接的时候</p></li><li>把引用值转换为数字类型值的时候，首先会转换为字符串，然后再转换为数字</li><li>给对象设置属性名，若属性名不是字符串，先转换为字符串，然后再当作字符串存储到对象中（对象的属性名只能是字符串或者数字）</li><li><p>手动调用toString/toFixed/join/String等方法的时候，也是为了转换为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">Math</span>.PI; <span class="comment">// 圆周率</span></span><br><span class="line">n.toFixed(<span class="number">2</span>) <span class="comment">// '3.14'</span></span><br><span class="line"><span class="keyword">var</span> ary = [<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>]</span><br><span class="line">ary.join(<span class="string">'+'</span>) <span class="comment">// 12+23+34;</span></span><br></pre></td></tr></table></figure></li><li><p>…</p></li></ul><p><strong>2. 转换规律</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器默认调用的方法都是 toString()</span></span><br><span class="line">[除了对象，都是你理解的转换，也就是直接加引号]</span><br><span class="line"><span class="number">1</span> <span class="comment">// '1';</span></span><br><span class="line"><span class="literal">null</span> =&gt; <span class="string">'null'</span></span><br><span class="line">[] =&gt; <span class="string">''</span>;</span><br><span class="line">[<span class="number">12</span>] =&gt; <span class="string">'12'</span>;</span><br><span class="line">[<span class="number">12</span>,<span class="number">23</span>] =&gt; <span class="string">'12,23'</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;).toString() <span class="comment">// "function()&#123;&#125;"</span></span><br><span class="line">【对象】</span><br><span class="line">&#123;<span class="attr">name</span>:<span class="string">'xxx'</span>&#125; =&gt; <span class="string">'[object Object]'</span></span><br><span class="line">&#123;&#125; =&gt; <span class="string">'[object Object]'</span></span><br><span class="line">不管是什么样的普通对象，最后结果都一样</span><br></pre></td></tr></table></figure></p><h3 id="把其他值转为布尔类型值"><a href="#把其他值转为布尔类型值" class="headerlink" title="把其他值转为布尔类型值"></a>把其他值转为布尔类型值</h3><p><strong>1.发生的情况</strong></p><ul><li>基于!/!!/Boolean()方法转换；</li><li>条件判断中的条件最后都会转换为布尔类型</li><li>…<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(n)&#123;</span><br><span class="line">    <span class="comment">// 把n的值转换为不二验证条件的真假</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">'3px'</span> + <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">// 先计算表达式的结果'3px3',把结果转换为布尔类型值true,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>2.转换规律</strong><br>除了 ‘’（空字符串）， null， undefined， 0， NaN转换为boolean是false外，其他都是true.</p><h3 id="特殊情况：数学运算和字符串拼接-“-”"><a href="#特殊情况：数学运算和字符串拼接-“-”" class="headerlink" title="特殊情况：数学运算和字符串拼接 “+”"></a>特殊情况：数学运算和字符串拼接 “+”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">当表达式中出现字符串，就是字符串拼接，否则就是数学运算</span><br><span class="line"><span class="number">1</span>+ <span class="literal">true</span> <span class="comment">// 2  数学运算</span></span><br><span class="line"><span class="string">"1"</span> + <span class="literal">true</span> <span class="comment">// "1true" 字符串拼接</span></span><br><span class="line">[<span class="number">12</span>] + <span class="number">10</span> <span class="comment">// '1210' 虽然现在没看到字符串，但是引用类型转换为数字，会先转换为字符串，所以变为了字符串拼接</span></span><br><span class="line">（&#123;&#125;）+ <span class="number">10</span> <span class="comment">// "[object Object]10"</span></span><br><span class="line">[] + <span class="number">10</span> <span class="comment">// '10'</span></span><br><span class="line">&#123;&#125; + <span class="number">10</span> <span class="comment">// 10 这个和以上说的没有任何关系，因为他根本就不是数学运算，也不是字符串拼接，他是两部分代码 &#123;&#125;代表一个代码块（块级作用域），+10才是我们的操作；严格来说应该分成两部分：</span></span><br><span class="line">&#123;&#125;;</span><br><span class="line">+<span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> + <span class="literal">true</span> + <span class="literal">false</span> + <span class="literal">null</span> + <span class="literal">undefined</span> + [] + <span class="string">'hello'</span> + <span class="literal">null</span> +<span class="literal">undefined</span> + [] + <span class="literal">true</span> <span class="comment">// "NaNhellonullundefinedtrue"</span></span><br><span class="line"><span class="number">13</span> + <span class="literal">NaN</span> = <span class="literal">NaN</span></span><br><span class="line"><span class="literal">NaN</span> +[] = <span class="string">"NaN"</span></span><br><span class="line"></span><br><span class="line"><span class="number">12</span>+[]<span class="comment">// '12'</span></span><br></pre></td></tr></table></figure><h3 id="特殊情况："><a href="#特殊情况：" class="headerlink" title="特殊情况："></a>特殊情况：</h3><p><code>&quot;==&quot;在进行比较的时候，如果左右两边数据类型不一样，则先转换为一样的类型，再进行比较。</code></p><ul><li><p>对象 == 对象；不一定相等，因为对象操作的是引用地址，地址不相同，则不相等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;<span class="attr">name</span>:<span class="string">'xx'</span>&#125; == &#123;<span class="attr">name</span>:<span class="string">'xx'</span>&#125; <span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> obj1=&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2 == obj1 <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>对象==数字，把对象转换为数字，然后再比较；</p></li><li>对象==布尔：把对象转换为数字，把布尔也转换为数字；</li><li>对象==字符串：把对象转化为数字，把字符串也转化为数字</li><li>字符串 == 数字： 字符串转化为数字</li><li>字符串== 布尔： 都转化为数字</li><li>布尔==数字：把布尔转换为数字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">不同类型值的比较，都是把其他值转换为数字类型值，在进行比较</span><br><span class="line"></span><br><span class="line">null == undefined //true</span><br><span class="line">null === undefined //false</span><br><span class="line">null 和 undefined 和其他值都不相等</span><br><span class="line">NaN == NaN //false</span><br><span class="line">以上需要特殊记忆的</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>==<span class="literal">true</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">2</span>==<span class="literal">true</span> <span class="comment">//false 两个情况比较的时候，都转化为数字，这里是把true变为1，而不是把2变为true</span></span><br><span class="line">[] == [] <span class="comment">// false 同类型之间直接比较，对象的引用地址不一样，所以是false</span></span><br><span class="line">![]==[]<span class="comment">// ![]是false,类型不一样，转化为数字是0，[]转化为数字是0 ，结果是true</span></span><br><span class="line">[]==<span class="literal">false</span><span class="comment">// true 0 == 0</span></span><br><span class="line"></span><br><span class="line">[] == <span class="literal">false</span> <span class="comment">// true 都转化为数字 0==0</span></span><br><span class="line">[]==<span class="literal">true</span> <span class="comment">// false</span></span><br><span class="line">![] == <span class="literal">false</span>; <span class="comment">// 先算![] == false; false == false ; 结果是true</span></span><br><span class="line">![]==<span class="literal">true</span>;<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="操作数组的常用方法"><a href="#操作数组的常用方法" class="headerlink" title="操作数组的常用方法"></a>操作数组的常用方法</h2><h3 id="数组也是对象数据类型的，也是由键值对组成的"><a href="#数组也是对象数据类型的，也是由键值对组成的" class="headerlink" title="数组也是对象数据类型的，也是由键值对组成的"></a>数组也是对象数据类型的，也是由键值对组成的</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> ary =[<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*结构</span></span><br><span class="line"><span class="comment">* 0： 12</span></span><br><span class="line"><span class="comment">* 1：23</span></span><br><span class="line"><span class="comment">* 2：34</span></span><br><span class="line"><span class="comment">*length:3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">1.</span>以数字为索引，从零开始递增；</span><br><span class="line"><span class="number">2</span>、有一个length属性存储的是数组的长度</span><br><span class="line">ary[<span class="number">0</span>]<span class="comment">// 获取第一项</span></span><br><span class="line">ary[<span class="number">2</span>] ary[ary.length<span class="number">-1</span>] <span class="comment">// 获取最后一项</span></span><br></pre></td></tr></table></figure><p>数组中每一项的值可以是任何数据类型的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 多维数组</span><br><span class="line">var ary = [</span><br><span class="line">    &#123;name:&apos;xx&apos;,age:9&#125;,</span><br><span class="line">    &#123;name:&apos;yy&apos;,age:10&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><h3 id="数组当中的常用方法"><a href="#数组当中的常用方法" class="headerlink" title="数组当中的常用方法"></a>数组当中的常用方法</h3><blockquote><p>按照四个维度记忆：</p><ul><li>方法的作用</li><li>方法的参数</li><li>方法的返回值</li><li>原有的数组是否改变</li></ul></blockquote><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><blockquote><p>向数组 末尾 追加新的内容 \<br>参数：追加的内容，可以是一个，也可以是多个\<br>返回值： 新增后数组的长度\<br>原有数组改变</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>]</span><br><span class="line">ary.push(<span class="number">100</span>); <span class="comment">// 4</span></span><br><span class="line">ary <span class="comment">// [12,23,34,100]</span></span><br><span class="line">ary.push(<span class="number">200</span>,<span class="number">300</span>);<span class="comment">//6</span></span><br><span class="line">ary <span class="comment">//[12,23,34,100.200.300]</span></span><br><span class="line">ary.push(&#123;<span class="attr">name</span>:<span class="string">'xx'</span>&#125;)<span class="comment">//7</span></span><br><span class="line">ary <span class="comment">// [12,23,34,100,200,300, &#123;name:'xx'&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><blockquote><p>删除数组最后一项\<br>无\<br>返回值： 被删除的那一项内容\<br>原有数组改变</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>];</span><br><span class="line">ary.pop(); <span class="comment">// 34</span></span><br><span class="line">ary <span class="comment">// [12,23]</span></span><br></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><blockquote><p>作用：删除数组中的第一项\<br>参数：无\<br>返回值：被删除的那一项\<br>原数组改变</p></blockquote><p>基于shift删除数组中的第一项，第一项被删除后，原有后面的每一i选哪个的索引都要向前提一位</p><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><blockquote><p>作用：向数组开始位置追加新内容给\<br>参数：新增的内容\<br>返回值：新增后数组的长度\<br>原有数组改变</p></blockquote><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><blockquote><p>基于splice可以对数组进行很多操作：删除指定位置的内容，向数组指定位置增加内容，还可以修改指定位置的内容</p></blockquote><ul><li><p>删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法：ary.splice(n,m) <span class="comment">// 从索引n开始删除m个内容</span></span><br><span class="line">参数：n -&gt; 索引； m -&gt; 要删除的个数</span><br><span class="line">返回值： 把删除的部分以一个新数组返回</span><br><span class="line">原有数组改变</span><br><span class="line">m不写的话或者删除的个数大于最大长度，是指从索引开始删除到数组末尾</span><br></pre></td></tr></table></figure></li><li><p>新增</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ary.splice(n,<span class="number">0</span>,x,...)</span><br><span class="line">从索引n开始删除<span class="number">0</span>项，把x或者更多内容存放到数组中索引n的前面</span><br><span class="line">返回值： [] 因为一项都没有删除</span><br><span class="line">原有数组改变</span><br></pre></td></tr></table></figure></li><li><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ary.splice(n,m,x,...)</span><br><span class="line">修改的原理就是把原有的内容删除掉，然后把新的内容放入数组</span><br><span class="line">返回值是删除内容组成的数组</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">需求扩展</span><br><span class="line">1、删除数组最后一项，有几种办法： </span><br><span class="line">ary.pop();</span><br><span class="line">ary.splice(ary.length-1);</span><br><span class="line">ary.length--;</span><br><span class="line">// 不建议基于delete删除，虽然内容没有了，但是数组的length没有改变</span><br><span class="line">1、向数组末尾追加新的内容，有几种办法；</span><br><span class="line">ary.push();</span><br><span class="line">ary.splice(ary.length,0,x); // x是要添加到索引的前面，所以不能是ary.length-1</span><br><span class="line">ary[ary.length] = x;</span><br></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p>作用：在一个数组中，按照条件查找出其中的部分内容；<br>参数： 两个参数 n,m; 从索引n开始找到索引m处，但是不包含m; m不写的话，查到数组末尾<br>返回值： 以一个新数组存储查找的内容；<br>原有数组不会改变；</p><p>ary.slice(0);ary.slice(); // 数组克隆数组<br><img src="/2019/04/02/Javascript基础知识一/Picture1.png" alt="slice图解"></p><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>作用：实现多个数组（或者值）的拼接<br>参数：数组或者值<br>返回值：拼接后的新数组<br>原有数组不变<br>ary1.concat(ary2,’kyle’,ary3)<br>[].concat(ary1,ary2,’kyle’,ary3) 可以基于空数组作为拼接的开始，再括号中排列拼接的顺序</p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>作用：把数组转化为字符串<br>参数：无<br>返回值：数组中每一项用逗号分隔的字符串<br>原有数组不变</p><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>作用：和toString类似，也是把数组转化为字符串，但是可以设置变为字符串之后每一项和每一项之间的连接符<br>参数：指定的连接符<br>返回：字符串<br>原有数组不变<br><img src="/2019/04/02/Javascript基础知识一/Picture2.png" alt="join的特殊用法"></p><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><p>作用：把数组倒过来排列<br>参数：无<br>返回值：排列后的新数组<br>原有数组改变</p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>作用：给数组排序<br>参数：无或者是个函数<br>返回值：排序后的新数组<br>原有数组改变</p><p><code>sort在不传递参数的情况下只能处理10以内的排序</code><br><strong>在真实项目中，基于sort排序，我们都需要传递参数</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ary.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b; <span class="comment">//升序 return b-a 降序</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><img src="/2019/04/02/Javascript基础知识一/Picture3.png" alt="Alert text"></p><h4 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf / lastIndexOf"></a>indexOf / lastIndexOf</h4><p>这两个方法不兼容IE低版本浏览器(IE678)<br>作用：返回当前项在数组中第一次和最后一次出现的索引<br>参数：要检测的索引<br>返回：索引<br>原有数组不变<br><img src="/2019/04/02/Javascript基础知识一/Picture4.png" alt="Alert text"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 验证数组中是否含有某一项</span><br><span class="line">if(ary.indexOf(100) &gt; -1)&#123;</span><br><span class="line">// 验证数组中是否含有100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一阶段我们不深入研究这些方法，搞懂这些方法需要了解OOP/作用域/回调函数等，第二阶段再去研究</p><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. 定义一个空对象；</span></span><br><span class="line"><span class="comment">* 2. 将数组中的值以当作属性名和属性值存入obj中，之前要先判断obj中是否含有此属性名， typeof ,有则删除，没有则赋值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">34</span>, <span class="number">56</span>, <span class="number">43</span>, <span class="number">34</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = ary[i];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[item] !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="comment">// 存在删除</span></span><br><span class="line">        <span class="comment">//ary.splice(i, 1, ary[ary.length - 1]);</span></span><br><span class="line">        <span class="comment">// 为避免因数组过长而引起的数组塌陷，我们将数组末尾的值赋值给当前值，因为当前值已经在obj中存在，所以没有必要再替换，直接删除最后一项即可；</span></span><br><span class="line">        ary[i] = ary[ary.length - <span class="number">1</span>];</span><br><span class="line">        ary.length--;</span><br><span class="line">        i--; <span class="comment">// 当前项已经不是原来的值了，要重新检测当前值，所以i--;</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj[item] = item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串中的常用方法"><a href="#字符串中的常用方法" class="headerlink" title="字符串中的常用方法"></a>字符串中的常用方法</h2><h3 id="JS中关于JS的一些细节知识"><a href="#JS中关于JS的一些细节知识" class="headerlink" title="JS中关于JS的一些细节知识"></a>JS中关于JS的一些细节知识</h3><blockquote><p>在JS中所有用单引号或者双引号包起来的都是字符串，每一个字符串是有0到多个字符组成；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'kylepeng'</span>;</span><br><span class="line">str.length <span class="comment">// 字符串长度</span></span><br><span class="line">str[<span class="number">100</span>] -&gt; <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">字符串中的每一个字符都有一个自己对应的索引，也有类似于数组一样的length代表自己的长度</span><br></pre></td></tr></table></figure></p></blockquote><p>字符串是基本类型数据，字符串的每一次操作都是值直接的进行操作，不想数组一样是基于空间地址来操作的，所以不存在原有字符串是否改变这一说，肯定都是不变的</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="charAt-charCodeAt"><a href="#charAt-charCodeAt" class="headerlink" title="charAt/charCodeAt"></a>charAt/charCodeAt</h4><p>作用：charAt根据索引获取指定位置的字符；<br>     charCodeAt不仅仅获取字符，它获取的是字符对应的Unicode编码值（ASC II码值）<br>参数：索引<br>返回值：字符或者对应的编码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> str = <span class="string">'sdfsdfse'</span>;</span><br><span class="line">    str.charAt(<span class="number">0</span>) <span class="comment">// s</span></span><br><span class="line">    str.charAt(<span class="number">100</span>) <span class="comment">// ''空字符串</span></span><br><span class="line">    str[<span class="number">100</span>] <span class="comment">// undefined </span></span><br><span class="line"><span class="comment">//当索引不存在的时候，str[x]获取的值和数组一样，结果是undefined;</span></span><br><span class="line"></span><br><span class="line">str.charCodeAt(<span class="number">0</span>) <span class="comment">//115 得到的编码是ASC II中对应的十进制编码</span></span><br><span class="line"><span class="string">'你'</span>.charCodeAt() <span class="comment">//20320 中文也有对应的编码</span></span><br><span class="line"><span class="comment">//String.fromCharCode(122) // 'z' 通过编码找到对应的字符</span></span><br></pre></td></tr></table></figure></p><h4 id="indexOf-lastIndexOf-1"><a href="#indexOf-lastIndexOf-1" class="headerlink" title="indexOf/lastIndexOf"></a>indexOf/lastIndexOf</h4><p>获取当前字符在字符串中第一次出现或最后一次出现的索引，用以判断字符串中是否包含某个字符，有这个字符，返回索引，没有这个字符，返回-1</p><h4 id="slice-1"><a href="#slice-1" class="headerlink" title="slice"></a>slice</h4><p>作用：str.slice(n,m)从索引n开始到索引m止，不包含m,把找到的字符当作新字符串返回<br><img src="/2019/04/02/Javascript基础知识一/Picture5.png" alt="Alert text"></p><h4 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h4><p>和slice语法一摸一样<br>唯一的区别在于，slice支持负数索引，substring不支持负数索引<br>str.substring(-3,-1) // “”<br>str.substring(-3,1) // “s”<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'abcdefg'</span>;</span><br><span class="line">str.slice(<span class="number">-3</span>,<span class="number">-1</span>); <span class="comment">// ef</span></span><br><span class="line">str.slice(<span class="number">-3</span>,<span class="number">1</span>);<span class="comment">//  ''</span></span><br><span class="line">str.substring(<span class="number">-3</span>,<span class="number">-1</span>);<span class="comment">// ''</span></span><br><span class="line">str.substring(<span class="number">-3</span>,<span class="number">1</span>);<span class="comment">//a</span></span><br></pre></td></tr></table></figure></p><h4 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h4><p>也是字符串截取的方法<br>str.substr(n,m) 从索引n开始，截取m个字符<br>支持负数索引，负数索引指的是字符串总长度+负数索引<br>和substring一样，第二个参数不写，截取到末尾，但是支持第一个索引为负数</p><h4 id="toUpperCase-toLowerCase"><a href="#toUpperCase-toLowerCase" class="headerlink" title="toUpperCase / toLowerCase"></a>toUpperCase / toLowerCase</h4><p>实现字符大小写的转化</p><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><p>和数组中的join相对应，join是把数组中的每一项按照指定的连接符变成字符串，split是把字符串按照指定的分隔符，拆分成数组中的每一项。</p><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p>把字符串中的原有字符进行替换<br>参数： 原有字符， 要替换的新字符<br>返回值： 替换后的字符串<br>// =》在不使用正则的请情况下，每执行一次replace,只能替换一次</p><h3 id="真实项目需求"><a href="#真实项目需求" class="headerlink" title="真实项目需求"></a>真实项目需求</h3><h4 id="时间字符串格式化"><a href="#时间字符串格式化" class="headerlink" title="时间字符串格式化"></a>时间字符串格式化</h4><p>有一个时间字符串 ‘2018-4-4 16:6:8’, 我们想基于这个字符串获取到”04月04日 16时06分”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2018-4-4 16:6:8 =&gt; 04月04日 16时06分</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">'2018-4-4 16:6:8'</span>;</span><br><span class="line">        <span class="keyword">var</span> ary = str.split(<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">var</span> ary1 = ary[<span class="number">0</span>].split(<span class="string">'-'</span>);</span><br><span class="line">        <span class="keyword">var</span> ary2 = ary[<span class="number">1</span>].split(<span class="string">':'</span>);</span><br><span class="line">        <span class="keyword">var</span> month = ary1[<span class="number">1</span>],</span><br><span class="line">            date = ary1[<span class="number">2</span>],</span><br><span class="line">            hour = ary2[<span class="number">0</span>],</span><br><span class="line">            minute = ary2[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">addZero</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (n &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                n = <span class="string">'0'</span> + n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> newStr = addZero(month) + <span class="string">'月'</span> + addZero(date) + <span class="string">'日 '</span> + addZero(hour) + <span class="string">'时'</span> + addZero(minute) + <span class="string">'分'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(newStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正则方法</span></span><br><span class="line">        ~ <span class="function"><span class="keyword">function</span>(<span class="params">pro</span>) </span>&#123;</span><br><span class="line">            pro.formatTime = <span class="function"><span class="keyword">function</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line">                template = template || <span class="string">'&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日 &#123;3&#125;时&#123;4&#125;分&#123;5&#125;秒'</span>;</span><br><span class="line">                <span class="keyword">var</span> ary = <span class="keyword">this</span>.match(<span class="regexp">/\d+/g</span>);</span><br><span class="line">                template = template.replace(<span class="regexp">/\&#123;(\d+)\&#125;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> n = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">                    val = ary[n] || <span class="string">'0'</span>;</span><br><span class="line">                    val &lt; <span class="number">10</span> ? val = <span class="string">'0'</span> + val : <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">return</span> val;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> template;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(<span class="built_in">String</span>.prototype);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(str.formatTime());</span><br><span class="line">        <span class="built_in">console</span>.log(str.formatTime(<span class="string">'&#123;1&#125;月&#123;2&#125;日'</span>));</span><br></pre></td></tr></table></figure><h4 id="URL地址问号传参解析"><a href="#URL地址问号传参解析" class="headerlink" title="URL地址问号传参解析"></a>URL地址问号传参解析</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *https://www.zhufeng.cn/stu/?lx=1&amp;name=aa&amp;sex=man#teacher // #后面的成为哈希值HASH,这个值可能有，可能没有，我们需*要处理，有的话我们需要过滤掉</span></span><br><span class="line"><span class="comment"> * 1、先找到问号，把问号后面的信息截取下来即可</span></span><br><span class="line"><span class="comment"> * A、首先我们需要验证是否存在#哈希值，存在我们从问号开始截取到#，不存在我们直接截取到字符串末尾</span></span><br><span class="line"><span class="comment"> * 2、以&amp;进行拆分（数组）</span></span><br><span class="line"><span class="comment"> * 3、 遍历数组中的每一项，把每一项按照=拆分，把拆分后的第一项作为对象的属性名，第二项作为属性值进行存储即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//var str = url.substring(str);</span></span><br><span class="line">    <span class="keyword">var</span> indexASK = url.indexOf(<span class="string">'?'</span>);</span><br><span class="line">    <span class="keyword">var</span> indexWell = url.indexOf(<span class="string">'#'</span>);</span><br><span class="line">    <span class="keyword">var</span> str;</span><br><span class="line">    <span class="comment">// # 可能有，可能没有</span></span><br><span class="line">    <span class="keyword">if</span> (indexWell &gt; <span class="number">-1</span>) &#123; <span class="comment">// # 存在</span></span><br><span class="line">       str = url.substring(indexASK+<span class="number">1</span>,indexWell);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">// 截取到末尾</span></span><br><span class="line">        str = url.substr(indexASK+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ary = str.split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;ary.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> item =ary[i],</span><br><span class="line">        itemAry = item.split(<span class="string">'='</span>);</span><br><span class="line">        obj[itemAry[<span class="number">0</span>]]=itemAry[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getURL(<span class="string">'https://www.zhufeng.cn/stu/?lx=1&amp;name=aa&amp;sex=man#teacher'</span>));</span><br></pre></td></tr></table></figure><h2 id="JS中的Math"><a href="#JS中的Math" class="headerlink" title="JS中的Math"></a>JS中的Math</h2><p>Math称为数学函数，但是它属于对象类型的<br>之所以叫做数学函数，是因为Math这个对象中提供了很多操作数字的方法</p><h3 id="Math-abs"><a href="#Math-abs" class="headerlink" title="Math.abs"></a>Math.abs</h3><p>取绝对值</p><h3 id="Math-ceil-Math-floor"><a href="#Math-ceil-Math-floor" class="headerlink" title="Math.ceil / Math.floor"></a>Math.ceil / Math.floor</h3><p>向上或者向下取整</p><h3 id="Math-round"><a href="#Math-round" class="headerlink" title="Math.round"></a>Math.round</h3><p>四舍五入 Math.round(-10.5) =&gt; -10; Math.round(-10.51) =&gt; -11</p><h3 id="Math-sqrt"><a href="#Math-sqrt" class="headerlink" title="Math.sqrt"></a>Math.sqrt</h3><p>开平方</p><h3 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h3><p>取幂 n的m次方<br>Math.pow(2,10) =&gt; 1024</p><h3 id="max-min"><a href="#max-min" class="headerlink" title="max/min"></a>max/min</h3><p>获取最大值和最小值</p><h3 id="Math-PI"><a href="#Math-PI" class="headerlink" title="Math.PI"></a>Math.PI</h3><p>圆周率</p><h3 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h3><p>获取0到1之间的随机小数<br>Math.ceil(Math.random()<em>10); // 1-10之间的随机整数<br>Math.floor(Math.random()</em>(m-n)+n);获取n-m之间的随机整数</p><h2 id="JS中的判断语句"><a href="#JS中的判断语句" class="headerlink" title="JS中的判断语句"></a>JS中的判断语句</h2><ol><li>if/else if/else<h3 id="在JS中检测数据类型的方式："><a href="#在JS中检测数据类型的方式：" class="headerlink" title="在JS中检测数据类型的方式："></a>在JS中检测数据类型的方式：</h3><blockquote><p>typeof<br>instanceof<br>constructor<br>Object.prototype.toString.call()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> value <span class="comment">//检测value的数据类型</span></span><br><span class="line">返回值：使用<span class="keyword">typeof</span>检测出来的结果是一个字符串，字符串中包含着对应的数据类型：</span><br><span class="line"><span class="string">"number"</span>,<span class="string">'string'</span>,<span class="string">'object'</span>,<span class="string">'undefined'</span>,<span class="string">'function'</span>,<span class="string">'boolean'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object null代表空对象指针，没有指向任何的内存空间</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="comment">// 检测数组/正则/对象，返回结果都是object,也就是基于这种方式无法细分对象</span></span><br><span class="line">    <span class="keyword">typeof</span> <span class="comment">// 是逻辑运算符，不是方法</span></span><br></pre></td></tr></table></figure></blockquote></li></ol><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>语法：<br>    条件？成立做的事：不成立做的事；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">10</span>)&#123;num++&#125;<span class="keyword">else</span>&#123;num--&#125;</span><br><span class="line"></span><br><span class="line">num&gt;<span class="number">10</span>? num++ : num--;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果三元运算符当中，如果有一步步需要做任何处理，我们用 null/undefined/void 0占位即可</span></span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">10</span>)&#123;num++&#125;</span><br><span class="line">num&gt;<span class="number">10</span>? num++ : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要执行多项任务，用小括号括起来，每条操作语句之间用逗号隔开</span></span><br><span class="line">num&gt;<span class="number">10</span>? (num++, num+=<span class="number">10</span>):<span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h3><p>用于变量或者表达式等在不同之情况ia的不同操作，每一种case结束后都要加break(结束整个判断)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n)&#123;</span><br><span class="line">       <span class="keyword">case</span> x:</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> y:</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">            z;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">// switch case 中每一种case情况的比较都是基于 === 绝对相等来完成的。</span></span><br><span class="line"><span class="comment">//不加break，后面的条件不管是否成立，都会被执行，利用此机制，我们可以完成一些特殊的处理，例如：如果num等于10和5，都做同一种事情,那么不用加break,写在一块即可。</span></span><br><span class="line"><span class="keyword">switch</span>(num)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        num=<span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真实项目中，我们基本使用===,保证代码的严谨性</span></span><br></pre></td></tr></table></figure></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><p>在js中，函数就是一个方法（一个功能体），基于函数一般都是为了实现某个功能；<br>函数诞生的目的就是为了实现封装：把闪现一个功能的代码封装到一个函数中，后期想要实现这个功能，只需要把函数执行即可，不必要再次编写重复的代码，起到了 <strong>低耦合，高内聚（减少页面中的冗余代码，提高代码的重复使用率）</strong>的作用</p><p>语法：<br>ES3 标准<br>创建函数<br>function 函数名([参数]){<br>    函数体；实现功能的代码<br>}</p><p>函数名(); 执行函数</p><hr><p>ES6标准：创建箭头函数<br>let 函数名(变量名) = ([参数]) =&gt; {<br>    函数体<br>}<br>函数名();<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>函数作为引用类型的一种，它也是按照引用地址来操作的</p><p><strong>函数的运行机制</strong></p><ol><li>函数也是引用类型，首先会开辟一个新的堆内存，把函数体中的代码当作字符串存储到内存中（对象向内存中存储的是字符串）</li><li>把开辟到堆内存的地址赋值给函数名；</li></ol><ul><li>此时我们输出fn代表当前函数本身，fn()是执行函数fn,所以是否加()是两种不同本质的操作；</li></ul><p>【函数执行】<br>目的：把之前存储在堆内存中的字符串变为真正的JS代码自上而下执行，从而实现应用的功能；<br>1.函数执行，首先会形成一个私有作用域：一个供代码执行的环境，也是也个栈内存；<br>2.把之前在堆内存中存储的代码字符串复制过来，变为真正的JS代码，在新开辟的栈内存中自上而下执行</p><p>【函数中的参数】<br>参数：是函数的入口，当我们在函数中封装一个功能，发现一些原材料不确定，需要执行函数的时候用户传递进来才可以，此时，我们就基于参数的机制，提供出入口即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">//此处的参数叫形参，形参变量</span></span><br><span class="line">    <span class="comment">// a , b分别对应两个数字；</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 1,2是实参，是具体的数据值</span></span><br><span class="line">sum(<span class="number">10</span>) <span class="comment">// a =10, b = undefined;</span></span><br><span class="line">sum() <span class="comment">// a= undefined b=undefined;</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// a=1,b=2;3没有形参变量接收,实参一定是具体的值</span></span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.tabBox</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 500px;</span></span><br><span class="line"><span class="undefined">            margin: 20px auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.tabBox</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">            top: 1px;</span></span><br><span class="line"><span class="css">            <span class="comment">/*            相对自己之前的位置向下移动1px;*/</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.tabBox</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: inline-block;</span></span><br><span class="line"><span class="undefined">            margin-right: 10px;</span></span><br><span class="line"><span class="undefined">            padding: 0 10px;</span></span><br><span class="line"><span class="undefined">            line-height: 33px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">            cursor: pointer;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.tabBox</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="undefined">            font-weight: bold;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*            当前Li的下边框覆盖了div的边框，我们让li的下边框的颜色是白色，这样看上去没有边框了*/</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.tabBox</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">            line-height: 148px;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.tabBox</span> <span class="selector-tag">div</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tabBox"</span> <span class="attr">id</span>=<span class="string">"tabBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>金三胖来华访问<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>红海行动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>fadden<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="undefined">         * [思路]</span></span><br><span class="line"><span class="undefined">         * 1. 给所有的Li绑定点击事件，当点击任何一个Lide时候，都做第二步骤</span></span><br><span class="line"><span class="javascript">         * <span class="number">2.</span> 可以先让所有的li &amp; div的<span class="class"><span class="keyword">class</span>（<span class="title">className</span> </span>= <span class="string">''</span>）都为空，再让 当前点击的这个li和对应的div有active这个样式类即可</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tabBox = <span class="built_in">document</span>.getElementById(<span class="string">'tabBox'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tabList = tabBox.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> divList = tabBox.getElementsByTagName(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tabList.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// tabList[i] : 每一轮循环当前要操作的对象</span></span></span><br><span class="line"><span class="javascript">            tabList[i][<span class="string">'myIndex'</span>] = i;</span></span><br><span class="line"><span class="javascript">            tabList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//事件绑定：给当前元素的某一个事件绑定一个方法，绑定的时候方法没有执行（属于创建一个方法），挡在页面中手动触发点击事件的时候绑定的方法才会执行 </span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// tabList[i]</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// this代表当前的li</span></span></span><br><span class="line"><span class="javascript">                changeTab(<span class="keyword">this</span>.myIndex);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="undefined">         * 自定义属性方案 obj.属性名 = 属性值</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="javascript">        <span class="comment">//=&gt; 封装一个方法，完成页卡切换</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">changeTab</span>(<span class="params">n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// n是形参，当执行这个方法的时候，会把当前点击的这个li的索引传递过来</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//=&gt; 1. 所有都没有选中样式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tabList.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                tabList[i].className = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">                divList[i].className = <span class="string">''</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//=&gt; 2. 当前点击的有选中样式</span></span></span><br><span class="line"><span class="javascript">            tabList[n].className = <span class="string">'active'</span>;</span></span><br><span class="line"><span class="javascript">            divList[n].className = <span class="string">'active'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="隔行变色"><a href="#隔行变色" class="headerlink" title="隔行变色"></a>隔行变色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">/*        nth-child(N) : 当前容器所有子元素的第N个</span></span><br><span class="line"><span class="comment">          .box li:nth-child(1): box容器中所有子元素中的第一个并且标签名是Li  // 先获取第一个，在验证第一个是不是Li</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">          nth-of-type(n): 先给当前容器按照某一个标签名进行分组，获取分组中的第n个</span></span><br><span class="line"><span class="comment">         .box li:nth-of-type(1) 先获取box中所有的li,再获取Li中的第一个</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        even 是偶数</span></span><br><span class="line"><span class="comment">        odd 是奇数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="selector-tag">ul</span><span class="selector-class">.box</span> &#123;</span><br><span class="line">            <span class="attribute">list-style</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        .box li:nth-of-type(even) &#123;</span></span><br><span class="line"><span class="comment">            background-color: #0b5d81;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * document.getElementById  在整个文档中，通过元素的id获取元素对象</span></span><br><span class="line"><span class="comment"> * getElementById 是获取元素的方法，document限定了获取元素的范围，我们把这个范围称之为：“上下文”[context]</span></span><br><span class="line"><span class="comment"> *  class一般都是设置样式，id一般都是供js获取元素</span></span><br><span class="line"><span class="comment"> * 1. 通过getElementById获取的元素是一个对象数据类型的值（里面包含内置的属性）typeof oBox =&gt; 'object'</span></span><br><span class="line"><span class="comment"> * 2. 分析包含的属性：</span></span><br><span class="line"><span class="comment"> *      className:存储的是一个字符串，代表当前元素的样式类名；</span></span><br><span class="line"><span class="comment"> *      id:存储的是当前元素的id值，也是字符串类型</span></span><br><span class="line"><span class="comment"> *      innerHTML: 存储当前元素中所有的内容，包含html标签</span></span><br><span class="line"><span class="comment"> *      innerText: 存储当前元素中所有的文本内容，不包含html标签</span></span><br><span class="line"><span class="comment"> *      onclick: 元素的一个事件属性，基于这个属性，可以给当前对象绑定事件</span></span><br><span class="line"><span class="comment"> *      onmouseover(鼠标滑过) onmouseout（鼠标离开）</span></span><br><span class="line"><span class="comment"> *      style: 存储当前元素的  行内样式值 ；获取和操作的都只能是标签上的行内样式，写在样式表中的样式，无法基于这个属性获取到</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  想要修改元素样式，有两种方法：</span></span><br><span class="line"><span class="comment"> *  1. 通过style修改行内样式</span></span><br><span class="line"><span class="comment"> *  2. 基于className属性修改box的样式类，从而改变样式；oBox.className += " bgColor";</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  [context].getElementsByTagName ： 在指定上下文中，通过元素的标签名获取一组元素集合，上下文是我们自己来指定的</span></span><br><span class="line"><span class="comment"> *  1. 获取的结果是一个元素集合(HTMLCollection)，它也是对象数据类型，结构和数组相似（数字索引，length代表长度），但是不是数组，我们把它叫做“类数组”；</span></span><br><span class="line"><span class="comment"> *  2. 通过索引获取到具体的某一个li即可， oList.length代表长度；</span></span><br><span class="line"><span class="comment"> *  3. 集合中的每一项存的值又是一个元素对象，包含很多内置属性，例如id/className</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> oList = oBox.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"><span class="comment">//console.log(typeof oList);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oList.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// oList[i].style.backgroundColor = 'lightblue';</span></span><br><span class="line">        oList[i].className += <span class="string">'bgColor'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展：除自定义属性外，还有</p><ul><li>let方案</li><li>柯里化</li><li>惰性函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;tabList.length;i++)&#123;</span><br><span class="line">    changeTab(i);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>函数执行的时候，都会形成一个全新的私有作用域（私有栈内存），目的是：</p><ol><li>把原有堆内存中存储的字符串变为JS执行</li><li>保护里面的私有变量不受外界的干扰（和外界是隔离的）<br>我么把函数执行的这种保护机制，称为闭包；</li></ol><p>函数的入口：形参<br>函数的出口：返回值 return 把函数运行的结果（或者函数体中的部分信息）拿到函数外面去使用<br>return 返回的永远是一个值，即函数处理的结果<br>fn(10,20) =&gt; 代表的是函数执行（不仅如此，他还代表函数执行后，返回的结果）<br>如果当前函数没有return, 或者return啥也没有返回，则函数执行的结果是undefined<br>return 还有一个作用，类似与循环中的break,能强制结束函数体中的代码的执行</p><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>形参是有自己的局限性的，我们需要具体的知道函数执行的时候传递的实参数量、顺序等，才可以使用形参变量定义对应的入口<br>arguments:函数内置的实参集合（内置：函数天生就存在的机制，不管你是否设置了形参，也不管你是否传递了实参，arguments都有，始终存在）</p><ol><li>arguments 是类数组（不是数组，不能使用数组中的方法）</li><li>即使设置形参变量，形参该是什么值还是什么值，但是arg始终存储的是所有的传递进来的实参</li><li>argumnents.callee 存储的是当前函数本身 arguments.callee === fn<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意值求和</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//console.log(arguments);</span></span><br><span class="line">            <span class="keyword">var</span> total = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">                total += (<span class="built_in">isNaN</span>(<span class="built_in">Number</span>(<span class="built_in">arguments</span>[i])) ? <span class="literal">null</span> : <span class="built_in">Number</span>(<span class="built_in">arguments</span>[i]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> total;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'6'</span>));</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#codeBox</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: inline-block;</span></span><br><span class="line"><span class="undefined">            width: 80px;</span></span><br><span class="line"><span class="undefined">            height: 35px;</span></span><br><span class="line"><span class="undefined">            line-height: 35px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            font-size: 18px;</span></span><br><span class="line"><span class="undefined">            letter-spacing: 5px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#link</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: inline-block;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"codeBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"link"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>看不清楚，换一张<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阻止a标签跳转--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="undefined">         * 生成一个四位随机验证码</span></span><br><span class="line"><span class="undefined">         * =&gt; 数字+字母</span></span><br><span class="line"><span class="undefined">         * =&gt; 照图片</span></span><br><span class="line"><span class="undefined">         * =&gt; 滑动拼图</span></span><br><span class="line"><span class="undefined">         * =&gt; 问答类</span></span><br><span class="line"><span class="undefined">         * =&gt; 点击汉字拼成语</span></span><br><span class="line"><span class="undefined">         * =&gt;把倒着的文字或者图片正过来</span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> codeBox = <span class="built_in">document</span>.getElementById(<span class="string">'codeBox'</span>),</span></span><br><span class="line"><span class="javascript">            link = <span class="built_in">document</span>.getElementById(<span class="string">'link'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//=&gt;编写一个生成四位随机验证码的方法</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">queryCode</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 准备验证码获取的范围</span></span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//2.我们只需要准备四个索引，即可在codeare中通过charAt方法获取到四个字符，把四个字符拼接成字符串就是我们需要的验证码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> str = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> char = codeArea.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * codeArea.length));</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (str.indexOf(char) &gt; <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="undefined">                    i--;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">continue</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                str += char;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> str;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">queryCode2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> codeArea = <span class="string">'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">while</span> (result.length &lt; <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> n = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">62</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> char = codeArea.charAt(n);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (result.indexOf(char) === <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="undefined">                    result += char;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">        link.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            codeBox.innerHTML = queryCode();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        codeBox.innerHTML = queryCode();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DOM及常用方法"><a href="#DOM及常用方法" class="headerlink" title="DOM及常用方法"></a>DOM及常用方法</h2><h3 id="DOM树（DOM-tree）"><a href="#DOM树（DOM-tree）" class="headerlink" title="DOM树（DOM tree）"></a>DOM树（DOM tree）</h3><p>当浏览器加载HTML页面的时候，首先就是DOM结构的计算，计算出来的DOM结构就是DOM树（把页面中的HTML标签像树状结构一样，分析出之间的层级关系）；<br>window -&gt; document -&gt;html<br>DOM树描述了标签和标签之间的关系，我们只要知道任何一个标签，都可以依据DOM中提供的属性和方法，获取到页面中任意一个标签或者节点</p><h3 id="JS中获取DOM元素的方法"><a href="#JS中获取DOM元素的方法" class="headerlink" title="JS中获取DOM元素的方法"></a>JS中获取DOM元素的方法</h3><p><strong>getElementById</strong><br>通过元素的id获取指定的元素对象 document.getElementById,此处的document限定了获取元素的范围，我们称之为上下文context</p><ol><li>getElementById的上下文只能是document;<blockquote><p>严格意义上一个页面中的id是不能重复的，浏览器规定在整个文档中即可以获取这个唯一的id</p></blockquote></li></ol><p>2.如果页面中的id重复了，我们基于这个方法，只能获取到第一个元素，后面相同的id元素，无法获取<br>3.在IE67浏览器中能够，会把表单元素input的name属性值当作Id来使用（建议：以后使用表单元素的时候，不要让Name和id有冲突）<br><strong>[context]getElementsByTagName</strong><br>在指定的上下文中，根据标签名获取一组元素集合（HTMLCollection）；<br>1.获取的元素集合是类数组，不能直接使用数组中的方法；<br>2.它会把当前上下文中子子孙孙（后代）层级内的标签都获取到（获取到的不仅仅是子集元素）；<br>3.基于这个方法，获取到的永远都是一个集合（不管里面是否有内容，也不管具体有多少项，他都是一个容器或者集合），如果想操作集合中的具体的某一项，需要基于索引获取才可以。<br><strong>[context]getElementsByClassName</strong><br>在指定的上下文中，基于元素的样式类名（class=’xxx’）获取到一组元素集合<br>真实项目中，我们经常基于样式类来给元素设置样式，所以在JS中，我们也会经常基于样式类来获取元素，但是此方法在IE678下不兼容<br><strong>getElementsByName</strong><br>1.上下文只能是document,在整个文档中，基于元素的name值获取一组节点集合（也是一个类数组）<br>2.在IE浏览器中（IE9及以下版本），只对表单元素的name属性起作用（正常来说，我们项目中只会给表单元素设置name,给非表单元素设置name,其实是一个不太合规范的操作）<br><strong>querySelector</strong><br>[context].querySelector()在指定的上下文中，基于选择器（类似于css选择器），获取到指定的节点对象（获取的是一个元素，哪怕选择器匹配了多个，我们只获取第一个）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#id, .className,div'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>querySelectorAll</strong><br>在querySelector的基础上，我们获取到选择器匹配到的所有元素，结果是一个节点集合；<br>querySelector/querySelectorAll都是不兼容IE6-8(不考虑兼容的情况下，我们能用byid或者其他方式获取的，也尽量不要用这两个方法，这两个方法性能消耗大);<br><strong>document.head</strong><br>获取head元素对象<br><strong>document.body</strong><br>获取body元素对象<br><strong>document.documentElement</strong><br>获取html元素对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取浏览器一屏幕的宽度和高度（兼容所有浏览器）</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight</span><br></pre></td></tr></table></figure></p><p>面试题：获取当前页面中所有ID为haha的(兼容所有浏览器)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为要兼容所有浏览器，不能使用querySelectorAll</span></span><br><span class="line"><span class="comment">// 思路：1，获取当前文档中所有的Html标签</span></span><br><span class="line"><span class="comment">// 2，依次遍历这些元素对象，谁的id等于haha,我们就把谁存储起来即可</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">queryAllById</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> nodeList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>); <span class="comment">// 基于通配符*获取到所有的Html标签</span></span><br><span class="line">            <span class="comment">// 遍历集合中的每一项，把元素ID和传递ID相同的这一项存储起来</span></span><br><span class="line">            <span class="keyword">var</span> ary = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodeList.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> item = nodeList[i];</span><br><span class="line">                id === item.id ? ary.push(item) : <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ary;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以直接使用 console.log(id), 因为浏览器中，JS默认会把元素的id设置为变量，不需要自己设置，而且id重复的话，获取的结果就是一个集合，包含所有ID项，不重复，就是元素对象</span></span><br></pre></td></tr></table></figure></p><h2 id="节点（node）"><a href="#节点（node）" class="headerlink" title="节点（node）"></a>节点（node）</h2><p>在一个HTML文档中，出现的所有东西都是节点（标签、文字、注释）</p><blockquote><ul><li>元素节点(html标签)</li><li>文本节点（文字内容）</li><li>注释节点（注释内容）</li><li>文档节点（document）</li><li>…</li></ul></blockquote><p>每一种类型的节点都会有一些属性区分自己的特性和特征</p><ul><li>nodeType 节点类型</li><li>nodeName 节点名称</li><li>nodeValue节点值</li></ul><p><strong>元素节点</strong><br>nodeType: 1<br>nodeName: 大写标签名<br>nodeValue: null</p><p><strong>文本节点</strong><br>nodeType: 3<br>nodeName: ‘#text’<br>nodeValue: 文本内容</p><p>在标准浏览器中，会把空格、换行都当作文本节点</p><p><strong>注释节点</strong><br>nodeType: 8<br>nodeName: ‘#comment’<br>nodeValue: 注释内容</p><p><strong>文档节点</strong><br>nodeType: 9<br>nodeName: ‘#document’<br>nodeValue: null<br><img src="/2019/04/02/Javascript基础知识一/20190704175957.png" alt="节点图示"></p><h3 id="描述节点之间关系的属性"><a href="#描述节点之间关系的属性" class="headerlink" title="描述节点之间关系的属性"></a>描述节点之间关系的属性</h3><p><strong>parentNode</strong><br>获取当前节点唯一的父亲节点</p><p><strong>childNodes</strong><br>获取当前节点的所有子节点（只获取儿子级别的,包含元素节点、文本节点等）</p><p><strong>children</strong><br>获取当前当前元素的元素子节点（在IE6-8下会把注释节点也当作元素节点，所以兼容性不太好）</p><p><strong>previousSibling</strong><br>获取当前节点的上一个节点（可能是元素，也可能是文本、注释等）</p><blockquote><p>previousElementSibling 获取当前节点的上一个元素节点（不兼容IE6-8）</p></blockquote><p><strong>nextSibling</strong><br>获取当前节点的下一个节点</p><blockquote><p>nextElementSibling 获取当前节点的下一个元素节点（不兼容IE6-8）</p></blockquote><p><strong>firstChild</strong><br>获取当前节点的第一个节点</p><blockquote><p>firstElementChild 获取第一个元素子节点（不兼容IE6-8）</p></blockquote><p><strong>lastChild</strong><br>获取当前节点的最后一个节点</p><blockquote><p>lastElementChild 获取当前元素的最后一个元素子节点（不兼容IE6-8）</p></blockquote><h3 id="需求一：获取当前元素的所有元素子节点"><a href="#需求一：获取当前元素的所有元素子节点" class="headerlink" title="需求一：获取当前元素的所有元素子节点"></a>需求一：获取当前元素的所有元素子节点</h3><blockquote><p>基于children 不兼容IE低版本浏览器，会把注释当作元素节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * children: Get all the element nodes of the current element</span></span><br><span class="line"><span class="comment"> * @parameter:</span></span><br><span class="line"><span class="comment"> *      curEle: [object]current element</span></span><br><span class="line"><span class="comment"> *      return: [array] all the element nodes</span></span><br><span class="line"><span class="comment"> *      by author on 2019/04/01 17:39</span></span><br><span class="line"><span class="comment"> *      update xx on xxxxx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params">curEle</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1获取当前元素下所有的子节点，2 遍历所有子节点，筛选出nodeType = 1的元素节点</span></span><br><span class="line">    <span class="keyword">var</span> nodeList = curEle.childNodes,</span><br><span class="line">        result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodeList.length; i++) &#123;</span><br><span class="line">        nodeList[i].nodeType == <span class="number">1</span> ? result.push(nodeList[i]) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="需求二：获取当前元素的上一个元素节点"><a href="#需求二：获取当前元素的上一个元素节点" class="headerlink" title="需求二：获取当前元素的上一个元素节点"></a>需求二：获取当前元素的上一个元素节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * prev ： Get prvious element node of the current node</span></span><br><span class="line"><span class="comment"> * @parameter</span></span><br><span class="line"><span class="comment"> *      curEle: [object] current element</span></span><br><span class="line"><span class="comment"> * @return </span></span><br><span class="line"><span class="comment"> *      [object]</span></span><br><span class="line"><span class="comment"> * by xx onxx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prev</span>(<span class="params">Ele</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//先找当前元素的哥哥节点，看是否为元素节点，不是的话，基于该节点，找上一个节点，直到找到元素节点，或者找完为止（说明我是老大）</span></span><br><span class="line">    <span class="keyword">var</span> pre = Ele.previousSibling;</span><br><span class="line">    <span class="keyword">while</span> (pre &amp;&amp; pre.nodeType !== <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * pre &amp;&amp; pre.nodeType !== 1 </span></span><br><span class="line"><span class="comment">         * pre是验证还有没有，这样写代表有，没有pre是null</span></span><br><span class="line"><span class="comment">         * pre.nodeType !== 1表示不是元素类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        pre = pre.previousSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展： next下一个弟弟节点元素节点， prevAll获取所有哥哥元素的节点，nextAll获取所有弟弟元素节点， sibling获取所有兄弟元素节点，index获取当前元素的索引<br><strong>next下一个元素节点</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * next ： Get next element node of the current node</span></span><br><span class="line"><span class="comment"> * @parameter</span></span><br><span class="line"><span class="comment"> *      curEle: [object] current element</span></span><br><span class="line"><span class="comment"> * @return </span></span><br><span class="line"><span class="comment"> *      [object]</span></span><br><span class="line"><span class="comment"> * by xx onxx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">Ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> next = Ele.nextSibling;</span><br><span class="line">    <span class="keyword">while</span> (next &amp;&amp; next.nodeType !== <span class="number">1</span>) &#123;</span><br><span class="line">        next = next.nextSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>prevALL所有的哥哥元素节点</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * prevAll ： Get all the previous element nodes of the current node</span></span><br><span class="line"><span class="comment"> * @parameter</span></span><br><span class="line"><span class="comment"> *      curEle: [object] current element</span></span><br><span class="line"><span class="comment"> * @return </span></span><br><span class="line"><span class="comment"> *      [array]</span></span><br><span class="line"><span class="comment"> * by xx onxx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prevAll</span>(<span class="params">Ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ary = [],</span><br><span class="line">        pre = Ele.previousSibling;</span><br><span class="line">    <span class="keyword">while</span> (pre) &#123;</span><br><span class="line">        pre.nodeType === <span class="number">1</span> ? ary.unshift(pre) : <span class="literal">null</span>;</span><br><span class="line">        pre = pre.previousSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>nextAll</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * nextAll ： Get all the next element nodes of the current node</span></span><br><span class="line"><span class="comment"> * @parameter</span></span><br><span class="line"><span class="comment"> *      curEle: [object] current element</span></span><br><span class="line"><span class="comment"> * @return </span></span><br><span class="line"><span class="comment"> *      [array]</span></span><br><span class="line"><span class="comment"> * by xx onxx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextAll</span>(<span class="params">Ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ary = [],</span><br><span class="line">        next = Ele.nextSibling;</span><br><span class="line">    <span class="keyword">while</span> (next) &#123;</span><br><span class="line">        next.nodeType === <span class="number">1</span> ? ary.push(next) : <span class="literal">null</span>;</span><br><span class="line">        next = next.nextSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * sibling ： Get all the sibling element nodes of the current node</span></span><br><span class="line"><span class="comment"> * @parameter</span></span><br><span class="line"><span class="comment"> *      curEle: [object] current element</span></span><br><span class="line"><span class="comment"> * @return </span></span><br><span class="line"><span class="comment"> *      [array]</span></span><br><span class="line"><span class="comment"> * by xx onxx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sibling</span>(<span class="params">Ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre = Ele.previousSibling;</span><br><span class="line">    <span class="keyword">var</span> ary = [];</span><br><span class="line">    <span class="keyword">while</span> (pre) &#123;</span><br><span class="line">        pre.nodeType === <span class="number">1</span> ? ary.unshift(pre) : <span class="literal">null</span>;</span><br><span class="line">        pre = pre.previousSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> next = Ele.nextSibling;</span><br><span class="line">    <span class="keyword">while</span> (next) &#123;</span><br><span class="line">        next.nodeType === <span class="number">1</span> ? ary.push(next) : <span class="literal">null</span>;</span><br><span class="line">        next = next.nextSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>index</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * index ： Get index of the current node</span></span><br><span class="line"><span class="comment"> * @parameter</span></span><br><span class="line"><span class="comment"> *      curEle: [object] current element</span></span><br><span class="line"><span class="comment"> * @return </span></span><br><span class="line"><span class="comment"> *      number</span></span><br><span class="line"><span class="comment"> * by xx onxx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre = Ele.previousSibling;</span><br><span class="line">    <span class="keyword">var</span> ary = [];</span><br><span class="line">    <span class="keyword">while</span> (pre) &#123;</span><br><span class="line">        pre.nodeType === <span class="number">1</span> ? ary.unshift(pre) : <span class="literal">null</span>;</span><br><span class="line">        pre = pre.previousSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ary.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="DOM的增删改"><a href="#DOM的增删改" class="headerlink" title="DOM的增删改"></a>DOM的增删改</h2><p>createElement, createTextNode,appendChild, insertBefore,clone,removeChild,set/get/removeAttribute</p><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a><strong>createElement</strong></h3><p>创建一个元素标签/元素对象<br>语法：document.createElement(标签名)</p><h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a><strong>appendChild</strong></h3><p>把一个元素对象插入到指定容器的末尾<br>[container].appendChild([newEle]);</p><h3 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore"></a><strong>insertBefore</strong></h3><p>把一个元素对象插入到指定容器中某一个元素标签之前<br>[container].insertBefore([newEle],[oldEle]);</p><h3 id="cloneNode"><a href="#cloneNode" class="headerlink" title="cloneNode"></a><strong>cloneNode</strong></h3><p>把某一个节点进行克隆<br>[curEle].cloneNode(); 浅克隆，只克隆当前标签<br>[curEle].cloneNode(true); 深克隆，当前标签及里面的内容都克隆过来</p><h3 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild"></a><strong>removeChild</strong></h3><p>在指定元素对象中删除指定元素<br>[container].removeChild([curEle]);</p><h3 id="set-get-removeAttribute"><a href="#set-get-removeAttribute" class="headerlink" title="set/get/removeAttribute"></a><strong>set/get/removeAttribute</strong></h3><p>设置/获取/删除当前元素的某一个属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newP = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line"> newP.innerHTML = <span class="string">'I am p'</span>;</span><br><span class="line"> <span class="built_in">document</span>.body.appendChild(newP);</span><br><span class="line"> <span class="keyword">var</span> newA = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line"> newA.innerHTML = <span class="string">'I am a'</span></span><br><span class="line"> <span class="built_in">document</span>.body.insertBefore(newA, newP);</span><br><span class="line"> <span class="comment">// 把创建的a克隆一份放到body末尾</span></span><br><span class="line"> <span class="keyword">var</span> cloneA = newA.cloneNode();</span><br><span class="line"> <span class="built_in">document</span>.body.appendChild(cloneA);</span><br><span class="line"> <span class="keyword">var</span> cloneAB = newA.cloneNode(<span class="literal">true</span>);</span><br><span class="line"> <span class="built_in">document</span>.body.appendChild(cloneAB);</span><br><span class="line"> <span class="built_in">document</span>.body.removeChild(newP);</span><br><span class="line"> <span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line"> oBox.myIndex = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><p>把元素当作一个对象，在对象对应的堆内存中新增一个自定义属性<br>oBox.myIndex =10// 设置<br> oBox[‘myIndex] // 获取<br>delete oBox[‘myIndex] // 删除</p><p>// =&gt;基于attribute等DOM方法完成自定义属性的设置<br>oBox.setAttribute(‘mycolor’,’red’);<br>oBox.getAttribute(‘mycolor’);<br>oBox.removeAttribut(‘mycolor);</p><p>上下两种机制属于独立的运作体制，不能互相混合使用<br>第一种是基于对象键值对操作方式，修改当前元素的堆内存空间来完成<br>第二种是直接修改页面中的HTML标签的结构来完成（此种办法设置的自定义属性可以在结构上呈现出来）</p><p>基于setAttribute设置的自定义属性值都是字符串</p><h3 id="需求：解析一个URL字符串问好传参和HASH值部分"><a href="#需求：解析一个URL字符串问好传参和HASH值部分" class="headerlink" title="需求：解析一个URL字符串问好传参和HASH值部分"></a>需求：解析一个URL字符串问好传参和HASH值部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryURLParameter</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建一个a标签，把需要解析的地址当作a标签的href赋值</span></span><br><span class="line">    <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    link.href = str;</span><br><span class="line">    <span class="comment">//页面中不需要展示a，我们只是想要利用它的属性而已，所以无需添加到页面当中</span></span><br><span class="line">    <span class="comment">//2.a元素对象的HASH和search两个属性，分别存储了哈希值和参数值</span></span><br><span class="line">    <span class="keyword">var</span> search = link.search.substr(<span class="number">1</span>),</span><br><span class="line">        hash = link.hash.substr(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 3. 分别解析出HASH和参数即可</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    hash ? obj.HASH = hash : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (search) &#123;</span><br><span class="line">        <span class="comment">//先按照&amp;拆分，</span></span><br><span class="line">        search = search.split(<span class="string">'&amp;'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; search.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> itemAry = search[i].split(<span class="string">"="</span>);</span><br><span class="line">            obj[itemAry[<span class="number">0</span>]] = itemAry[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'https://wwww.zhufengpeixun.cn/stu?lx=1&amp;name=AA&amp;age=20#teacher'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = queryURLParameter(str);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><h2 id="扩展：原生JS获取元素样式"><a href="#扩展：原生JS获取元素样式" class="headerlink" title="扩展：原生JS获取元素样式"></a>扩展：原生JS获取元素样式</h2><p><strong>ele.style</strong><br>获取元素的行内样式，这个必须是写在行内的style属性里面的才能获取到，卸载其他地方（比如<code>&lt;head&gt;&lt;/head&gt;</code>中的<code>&lt;style&gt;&lt;/style&gt;</code>里面或者引入的css样式表里面就无法获取到）</p><p><strong>getComputedStyle()</strong><br>获取当前元素所有css属性的方法。<br>语法： window.getComputedStyle(‘元素对象’[，’伪类’]);<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">'id'</span>);</span><br><span class="line"><span class="keyword">var</span> cssStyleCollectiion = <span class="built_in">window</span>.getComputedStyle(obj, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p><p><strong>getPropertyValue()</strong><br>获取css样式某一属性的值，只可读，需要与getComputedStyle结合使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">'id'</span>);</span><br><span class="line"><span class="keyword">var</span> cssStyleCollection = <span class="built_in">window</span>.getComputedStyle(obj, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">var</span> bgColor = cssStyleCollection.getPropertyValue(<span class="string">'background-color'</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript，通常缩写为JS，是一种高级的，解释执行的编程语言。 JavaScript是一门基于原型、函数先行的语言，是一门多范式的语言，它支持面向对象编程，命令式编程，以及函数式编程。 它提供语法来操控文本、数组、日期以及正则表达式等，不支持I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://abluecup.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
